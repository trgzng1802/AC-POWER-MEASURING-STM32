
MEASURE_AC_VOLTAGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800384c  0800384c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800384c  0800384c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800384c  0800384c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003850  08003850  00013850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  080038c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080038c4  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006900  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae3  00000000  00000000  00026999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00028480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00028b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b72  00000000  00000000  000290b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d2d  00000000  00000000  00040c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086026  00000000  00000000  00049957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf97d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c80  00000000  00000000  000cf9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003798 	.word	0x08003798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003798 	.word	0x08003798

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_f2uiz>:
 80002b4:	0042      	lsls	r2, r0, #1
 80002b6:	d20e      	bcs.n	80002d6 <__aeabi_f2uiz+0x22>
 80002b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80002bc:	d30b      	bcc.n	80002d6 <__aeabi_f2uiz+0x22>
 80002be:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80002c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80002c6:	d409      	bmi.n	80002dc <__aeabi_f2uiz+0x28>
 80002c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80002cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002d0:	fa23 f002 	lsr.w	r0, r3, r2
 80002d4:	4770      	bx	lr
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	4770      	bx	lr
 80002dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80002e0:	d101      	bne.n	80002e6 <__aeabi_f2uiz+0x32>
 80002e2:	0242      	lsls	r2, r0, #9
 80002e4:	d102      	bne.n	80002ec <__aeabi_f2uiz+0x38>
 80002e6:	f04f 30ff 	mov.w	r0, #4294967295
 80002ea:	4770      	bx	lr
 80002ec:	f04f 0000 	mov.w	r0, #0
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop

080002f4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	u_t = (adc_value[0] >> 16);
 80002fc:	4b07      	ldr	r3, [pc, #28]	; (800031c <HAL_ADC_ConvCpltCallback+0x28>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	0c1b      	lsrs	r3, r3, #16
 8000302:	b29a      	uxth	r2, r3
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000306:	801a      	strh	r2, [r3, #0]
	i_t = (adc_value[0] & 0x0000ffff);
 8000308:	4b04      	ldr	r3, [pc, #16]	; (800031c <HAL_ADC_ConvCpltCallback+0x28>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	b29a      	uxth	r2, r3
 800030e:	4b05      	ldr	r3, [pc, #20]	; (8000324 <HAL_ADC_ConvCpltCallback+0x30>)
 8000310:	801a      	strh	r2, [r3, #0]
//		 volt_sum = 0;
//		 volt_avg = 0;
//		 curr_sum = 0;
//		 curr_avg = 0;
//	 }
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	20000158 	.word	0x20000158
 8000320:	2000015c 	.word	0x2000015c
 8000324:	2000015e 	.word	0x2000015e

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b085      	sub	sp, #20
 800032c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fb71 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f8bf 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f000 f9c3 	bl	80006c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800033a:	f000 f9a3 	bl	8000684 <MX_DMA_Init>
  MX_ADC1_Init();
 800033e:	f000 f915 	bl	800056c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000342:	f000 f961 	bl	8000608 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  LCD_GPIO.LCD_RS_PIN = LCD_RS_Pin;
 8000346:	4b4b      	ldr	r3, [pc, #300]	; (8000474 <main+0x14c>)
 8000348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800034c:	801a      	strh	r2, [r3, #0]
  LCD_GPIO.LCD_RW_PIN = LCD_RW_Pin;
 800034e:	4b49      	ldr	r3, [pc, #292]	; (8000474 <main+0x14c>)
 8000350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000354:	805a      	strh	r2, [r3, #2]
  LCD_GPIO.LCD_EN_PIN = LCD_EN_Pin;
 8000356:	4b47      	ldr	r3, [pc, #284]	; (8000474 <main+0x14c>)
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	809a      	strh	r2, [r3, #4]
  LCD_GPIO.LCD_D4_PIN = LCD_D4_Pin;
 800035c:	4b45      	ldr	r3, [pc, #276]	; (8000474 <main+0x14c>)
 800035e:	2240      	movs	r2, #64	; 0x40
 8000360:	80da      	strh	r2, [r3, #6]
  LCD_GPIO.LCD_D5_PIN = LCD_D5_Pin;
 8000362:	4b44      	ldr	r3, [pc, #272]	; (8000474 <main+0x14c>)
 8000364:	2220      	movs	r2, #32
 8000366:	811a      	strh	r2, [r3, #8]
  LCD_GPIO.LCD_D6_PIN = LCD_D6_Pin;
 8000368:	4b42      	ldr	r3, [pc, #264]	; (8000474 <main+0x14c>)
 800036a:	2210      	movs	r2, #16
 800036c:	815a      	strh	r2, [r3, #10]
  LCD_GPIO.LCD_D7_PIN = LCD_D7_Pin;
 800036e:	4b41      	ldr	r3, [pc, #260]	; (8000474 <main+0x14c>)
 8000370:	2208      	movs	r2, #8
 8000372:	819a      	strh	r2, [r3, #12]

  LCD_Size.LCD_column = 16;
 8000374:	4b40      	ldr	r3, [pc, #256]	; (8000478 <main+0x150>)
 8000376:	2210      	movs	r2, #16
 8000378:	701a      	strb	r2, [r3, #0]
  LCD_Size.LCD_row    = 2;
 800037a:	4b3f      	ldr	r3, [pc, #252]	; (8000478 <main+0x150>)
 800037c:	2202      	movs	r2, #2
 800037e:	705a      	strb	r2, [r3, #1]

  LCD_Init(&LCD, GPIOB, LCD_GPIO, LCD_Size);
 8000380:	4a3c      	ldr	r2, [pc, #240]	; (8000474 <main+0x14c>)
 8000382:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <main+0x150>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	f8ad 3008 	strh.w	r3, [sp, #8]
 800038a:	466b      	mov	r3, sp
 800038c:	f102 0108 	add.w	r1, r2, #8
 8000390:	c903      	ldmia	r1, {r0, r1}
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	3304      	adds	r3, #4
 8000396:	8019      	strh	r1, [r3, #0]
 8000398:	ca0c      	ldmia	r2, {r2, r3}
 800039a:	4938      	ldr	r1, [pc, #224]	; (800047c <main+0x154>)
 800039c:	4838      	ldr	r0, [pc, #224]	; (8000480 <main+0x158>)
 800039e:	f002 fb07 	bl	80029b0 <LCD_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80003a2:	4838      	ldr	r0, [pc, #224]	; (8000484 <main+0x15c>)
 80003a4:	f000 ff4e 	bl	8001244 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 80003a8:	4837      	ldr	r0, [pc, #220]	; (8000488 <main+0x160>)
 80003aa:	f000 ff4b 	bl	8001244 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(10);
 80003ae:	200a      	movs	r0, #10
 80003b0:	f000 fb92 	bl	8000ad8 <HAL_Delay>
  HAL_ADC_Start(&hadc2);
 80003b4:	4834      	ldr	r0, [pc, #208]	; (8000488 <main+0x160>)
 80003b6:	f000 fc8b 	bl	8000cd0 <HAL_ADC_Start>
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, adc_value, 1);
 80003ba:	2201      	movs	r2, #1
 80003bc:	4933      	ldr	r1, [pc, #204]	; (800048c <main+0x164>)
 80003be:	4831      	ldr	r0, [pc, #196]	; (8000484 <main+0x15c>)
 80003c0:	f000 ffee 	bl	80013a0 <HAL_ADCEx_MultiModeStart_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LCD_SetCursor(&LCD, 0, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2100      	movs	r1, #0
 80003c8:	482d      	ldr	r0, [pc, #180]	; (8000480 <main+0x158>)
 80003ca:	f002 fcd7 	bl	8002d7c <LCD_SetCursor>
	  sprintf(lcd_msg, "Voltage: %03d.%02dV", (uint8_t)Vrms, (uint16_t)(Vrms*100) % 100);
 80003ce:	4b30      	ldr	r3, [pc, #192]	; (8000490 <main+0x168>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff6e 	bl	80002b4 <__aeabi_f2uiz>
 80003d8:	4603      	mov	r3, r0
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461c      	mov	r4, r3
 80003de:	4b2c      	ldr	r3, [pc, #176]	; (8000490 <main+0x168>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	; (8000494 <main+0x16c>)
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff feb1 	bl	800014c <__aeabi_fmul>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff61 	bl	80002b4 <__aeabi_f2uiz>
 80003f2:	4603      	mov	r3, r0
 80003f4:	b29b      	uxth	r3, r3
 80003f6:	4a28      	ldr	r2, [pc, #160]	; (8000498 <main+0x170>)
 80003f8:	fba2 1203 	umull	r1, r2, r2, r3
 80003fc:	0952      	lsrs	r2, r2, #5
 80003fe:	2164      	movs	r1, #100	; 0x64
 8000400:	fb01 f202 	mul.w	r2, r1, r2
 8000404:	1a9b      	subs	r3, r3, r2
 8000406:	b29b      	uxth	r3, r3
 8000408:	4622      	mov	r2, r4
 800040a:	4924      	ldr	r1, [pc, #144]	; (800049c <main+0x174>)
 800040c:	4824      	ldr	r0, [pc, #144]	; (80004a0 <main+0x178>)
 800040e:	f002 fd49 	bl	8002ea4 <siprintf>
	  LCD_SendString(&LCD, lcd_msg);
 8000412:	4923      	ldr	r1, [pc, #140]	; (80004a0 <main+0x178>)
 8000414:	481a      	ldr	r0, [pc, #104]	; (8000480 <main+0x158>)
 8000416:	f002 fcf5 	bl	8002e04 <LCD_SendString>
	  LCD_SetCursor(&LCD, 0, 1);
 800041a:	2201      	movs	r2, #1
 800041c:	2100      	movs	r1, #0
 800041e:	4818      	ldr	r0, [pc, #96]	; (8000480 <main+0x158>)
 8000420:	f002 fcac 	bl	8002d7c <LCD_SetCursor>
	  sprintf(lcd_msg, "Current: %01d.%04dA", (uint8_t)Irms, (uint16_t)(Irms*10000) % 10000);
 8000424:	4b1f      	ldr	r3, [pc, #124]	; (80004a4 <main+0x17c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff43 	bl	80002b4 <__aeabi_f2uiz>
 800042e:	4603      	mov	r3, r0
 8000430:	b2db      	uxtb	r3, r3
 8000432:	461c      	mov	r4, r3
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <main+0x17c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	491b      	ldr	r1, [pc, #108]	; (80004a8 <main+0x180>)
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fe86 	bl	800014c <__aeabi_fmul>
 8000440:	4603      	mov	r3, r0
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff36 	bl	80002b4 <__aeabi_f2uiz>
 8000448:	4603      	mov	r3, r0
 800044a:	b29b      	uxth	r3, r3
 800044c:	4a17      	ldr	r2, [pc, #92]	; (80004ac <main+0x184>)
 800044e:	fba2 1203 	umull	r1, r2, r2, r3
 8000452:	0b52      	lsrs	r2, r2, #13
 8000454:	f242 7110 	movw	r1, #10000	; 0x2710
 8000458:	fb01 f202 	mul.w	r2, r1, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	b29b      	uxth	r3, r3
 8000460:	4622      	mov	r2, r4
 8000462:	4913      	ldr	r1, [pc, #76]	; (80004b0 <main+0x188>)
 8000464:	480e      	ldr	r0, [pc, #56]	; (80004a0 <main+0x178>)
 8000466:	f002 fd1d 	bl	8002ea4 <siprintf>
	  LCD_SendString(&LCD, lcd_msg);
 800046a:	490d      	ldr	r1, [pc, #52]	; (80004a0 <main+0x178>)
 800046c:	4804      	ldr	r0, [pc, #16]	; (8000480 <main+0x158>)
 800046e:	f002 fcc9 	bl	8002e04 <LCD_SendString>
	  LCD_SetCursor(&LCD, 0, 0);
 8000472:	e7a7      	b.n	80003c4 <main+0x9c>
 8000474:	20000144 	.word	0x20000144
 8000478:	20000154 	.word	0x20000154
 800047c:	40010c00 	.word	0x40010c00
 8000480:	20000130 	.word	0x20000130
 8000484:	2000008c 	.word	0x2000008c
 8000488:	200000bc 	.word	0x200000bc
 800048c:	20000158 	.word	0x20000158
 8000490:	20000160 	.word	0x20000160
 8000494:	42c80000 	.word	0x42c80000
 8000498:	51eb851f 	.word	0x51eb851f
 800049c:	080037b0 	.word	0x080037b0
 80004a0:	20000168 	.word	0x20000168
 80004a4:	20000164 	.word	0x20000164
 80004a8:	461c4000 	.word	0x461c4000
 80004ac:	d1b71759 	.word	0xd1b71759
 80004b0:	080037c4 	.word	0x080037c4

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b094      	sub	sp, #80	; 0x50
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004be:	2228      	movs	r2, #40	; 0x28
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 fce6 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004e4:	2301      	movs	r3, #1
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f2:	2301      	movs	r3, #1
 80004f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f6:	2302      	movs	r3, #2
 80004f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000500:	2300      	movs	r3, #0
 8000502:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fce9 	bl	8001ee0 <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000514:	f000 f920 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051c:	2302      	movs	r3, #2
 800051e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000528:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800052a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800052e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f001 ff54 	bl	80023e4 <HAL_RCC_ClockConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000542:	f000 f909 	bl	8000758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000546:	2302      	movs	r3, #2
 8000548:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800054a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800054e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f8c0 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800055e:	f000 f8fb 	bl	8000758 <Error_Handler>
  }
}
 8000562:	bf00      	nop
 8000564:	3750      	adds	r7, #80	; 0x50
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000572:	2300      	movs	r3, #0
 8000574:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000576:	463b      	mov	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <MX_ADC1_Init+0x94>)
 8000582:	4a20      	ldr	r2, [pc, #128]	; (8000604 <MX_ADC1_Init+0x98>)
 8000584:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_ADC1_Init+0x94>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MX_ADC1_Init+0x94>)
 800058e:	2201      	movs	r2, #1
 8000590:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000592:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_ADC1_Init+0x94>)
 8000594:	2200      	movs	r2, #0
 8000596:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000598:	4b19      	ldr	r3, [pc, #100]	; (8000600 <MX_ADC1_Init+0x94>)
 800059a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800059e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_ADC1_Init+0x94>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_ADC1_Init+0x94>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ac:	4814      	ldr	r0, [pc, #80]	; (8000600 <MX_ADC1_Init+0x94>)
 80005ae:	f000 fab7 	bl	8000b20 <HAL_ADC_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_ADC1_Init+0x50>
  {
    Error_Handler();
 80005b8:	f000 f8ce 	bl	8000758 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80005bc:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80005c0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	4619      	mov	r1, r3
 80005c8:	480d      	ldr	r0, [pc, #52]	; (8000600 <MX_ADC1_Init+0x94>)
 80005ca:	f000 ff9f 	bl	800150c <HAL_ADCEx_MultiModeConfigChannel>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005d4:	f000 f8c0 	bl	8000758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005d8:	2306      	movs	r3, #6
 80005da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005dc:	2301      	movs	r3, #1
 80005de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80005e0:	2307      	movs	r3, #7
 80005e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_ADC1_Init+0x94>)
 80005ea:	f000 fc31 	bl	8000e50 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005f4:	f000 f8b0 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000008c 	.word	0x2000008c
 8000604:	40012400 	.word	0x40012400

08000608 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_ADC2_Init+0x74>)
 800061a:	4a19      	ldr	r2, [pc, #100]	; (8000680 <MX_ADC2_Init+0x78>)
 800061c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC2_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC2_Init+0x74>)
 8000626:	2201      	movs	r2, #1
 8000628:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC2_Init+0x74>)
 8000632:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000636:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000638:	4b10      	ldr	r3, [pc, #64]	; (800067c <MX_ADC2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC2_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC2_Init+0x74>)
 8000646:	f000 fa6b 	bl	8000b20 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000650:	f000 f882 	bl	8000758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000654:	2307      	movs	r3, #7
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2301      	movs	r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800065c:	2307      	movs	r3, #7
 800065e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC2_Init+0x74>)
 8000666:	f000 fbf3 	bl	8000e50 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000670:	f000 f872 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000bc 	.word	0x200000bc
 8000680:	40012800 	.word	0x40012800

08000684 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800068a:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <MX_DMA_Init+0x38>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <MX_DMA_Init+0x38>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6153      	str	r3, [r2, #20]
 8000696:	4b09      	ldr	r3, [pc, #36]	; (80006bc <MX_DMA_Init+0x38>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2100      	movs	r1, #0
 80006a6:	200b      	movs	r0, #11
 80006a8:	f001 f859 	bl	800175e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006ac:	200b      	movs	r0, #11
 80006ae:	f001 f872 	bl	8001796 <HAL_NVIC_EnableIRQ>

}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <MX_GPIO_Init+0x90>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <MX_GPIO_Init+0x90>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_GPIO_Init+0x90>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_GPIO_Init+0x90>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_GPIO_Init+0x90>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_GPIO_Init+0x90>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_GPIO_Init+0x90>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a11      	ldr	r2, [pc, #68]	; (8000750 <MX_GPIO_Init+0x90>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_GPIO_Init+0x90>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000722:	480c      	ldr	r0, [pc, #48]	; (8000754 <MX_GPIO_Init+0x94>)
 8000724:	f001 fbc4 	bl	8001eb0 <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000728:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800072c:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2302      	movs	r3, #2
 8000738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x94>)
 8000742:	f001 fa31 	bl	8001ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000746:	bf00      	nop
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000
 8000754:	40010c00 	.word	0x40010c00

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <HAL_MspInit+0x5c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x5c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x60>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_MspInit+0x60>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000

080007c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a3c      	ldr	r2, [pc, #240]	; (80008d4 <HAL_ADC_MspInit+0x10c>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d14a      	bne.n	800087e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007e8:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a3a      	ldr	r2, [pc, #232]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 80007ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a34      	ldr	r2, [pc, #208]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b32      	ldr	r3, [pc, #200]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	613b      	str	r3, [r7, #16]
 8000816:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000818:	2340      	movs	r3, #64	; 0x40
 800081a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081c:	2303      	movs	r3, #3
 800081e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0318 	add.w	r3, r7, #24
 8000824:	4619      	mov	r1, r3
 8000826:	482d      	ldr	r0, [pc, #180]	; (80008dc <HAL_ADC_MspInit+0x114>)
 8000828:	f001 f9be 	bl	8001ba8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800082c:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 800082e:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <HAL_ADC_MspInit+0x11c>)
 8000830:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000838:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000844:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 8000846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 800084e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000852:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 8000856:	2220      	movs	r2, #32
 8000858:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000860:	481f      	ldr	r0, [pc, #124]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 8000862:	f000 ffb3 	bl	80017cc <HAL_DMA_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800086c:	f7ff ff74 	bl	8000758 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 8000874:	621a      	str	r2, [r3, #32]
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <HAL_ADC_MspInit+0x118>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800087c:	e026      	b.n	80008cc <HAL_ADC_MspInit+0x104>
  else if(hadc->Instance==ADC2)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <HAL_ADC_MspInit+0x120>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d121      	bne.n	80008cc <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 800088e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_ADC_MspInit+0x110>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008bc:	2303      	movs	r3, #3
 80008be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <HAL_ADC_MspInit+0x114>)
 80008c8:	f001 f96e 	bl	8001ba8 <HAL_GPIO_Init>
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40012400 	.word	0x40012400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800
 80008e0:	200000ec 	.word	0x200000ec
 80008e4:	40020008 	.word	0x40020008
 80008e8:	40012800 	.word	0x40012800

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr

0800092e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000932:	f000 f8b5 	bl	8000aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <DMA1_Channel1_IRQHandler+0x10>)
 8000942:	f000 fffd 	bl	8001940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000ec 	.word	0x200000ec

08000950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000958:	4a14      	ldr	r2, [pc, #80]	; (80009ac <_sbrk+0x5c>)
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <_sbrk+0x60>)
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <_sbrk+0x64>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d102      	bne.n	8000972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <_sbrk+0x64>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <_sbrk+0x68>)
 8000970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <_sbrk+0x64>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000980:	f002 fa5e 	bl	8002e40 <__errno>
 8000984:	4603      	mov	r3, r0
 8000986:	220c      	movs	r2, #12
 8000988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
 800098e:	e009      	b.n	80009a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <_sbrk+0x64>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <_sbrk+0x64>)
 80009a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20005000 	.word	0x20005000
 80009b0:	00000400 	.word	0x00000400
 80009b4:	2000019c 	.word	0x2000019c
 80009b8:	200001b8 	.word	0x200001b8

080009bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr

080009c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <LoopFillZerobss+0x22>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ee:	f7ff ffe5 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f002 fa2b 	bl	8002e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fc97 	bl	8000328 <main>
  bx lr
 80009fa:	4770      	bx	lr
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a04:	08003854 	.word	0x08003854
  ldr r2, =_sbss
 8000a08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a0c:	200001b4 	.word	0x200001b4

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 fe8f 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	200f      	movs	r0, #15
 8000a2c:	f000 f808 	bl	8000a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fe98 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_InitTick+0x54>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x58>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	4619      	mov	r1, r3
 8000a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fea7 	bl	80017b2 <HAL_SYSTICK_Config>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00e      	b.n	8000a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b0f      	cmp	r3, #15
 8000a72:	d80a      	bhi.n	8000a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a74:	2200      	movs	r2, #0
 8000a76:	6879      	ldr	r1, [r7, #4]
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f000 fe6f 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a80:	4a06      	ldr	r2, [pc, #24]	; (8000a9c <HAL_InitTick+0x5c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e000      	b.n	8000a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000004 	.word	0x20000004

08000aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_IncTick+0x1c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a03      	ldr	r2, [pc, #12]	; (8000ac0 <HAL_IncTick+0x20>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	200001a0 	.word	0x200001a0

08000ac4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <HAL_GetTick+0x10>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200001a0 	.word	0x200001a0

08000ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae0:	f7ff fff0 	bl	8000ac4 <HAL_GetTick>
 8000ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d005      	beq.n	8000afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_Delay+0x44>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	4413      	add	r3, r2
 8000afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000afe:	bf00      	nop
 8000b00:	f7ff ffe0 	bl	8000ac4 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <HAL_Delay+0x28>
  {
  }
}
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008

08000b20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e0be      	b.n	8000cc0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fe32 	bl	80007c8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 fac5 	bl	80010f4 <ADC_ConversionStop_Disable>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8099 	bne.w	8000cae <HAL_ADC_Init+0x18e>
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8095 	bne.w	8000cae <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b8c:	f023 0302 	bic.w	r3, r3, #2
 8000b90:	f043 0202 	orr.w	r2, r3, #2
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7b1b      	ldrb	r3, [r3, #12]
 8000ba6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb8:	d003      	beq.n	8000bc2 <HAL_ADC_Init+0xa2>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d102      	bne.n	8000bc8 <HAL_ADC_Init+0xa8>
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	e000      	b.n	8000bca <HAL_ADC_Init+0xaa>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7d1b      	ldrb	r3, [r3, #20]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d119      	bne.n	8000c0c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7b1b      	ldrb	r3, [r3, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d109      	bne.n	8000bf4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	035a      	lsls	r2, r3, #13
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	e00b      	b.n	8000c0c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	f043 0220 	orr.w	r2, r3, #32
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	f043 0201 	orr.w	r2, r3, #1
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <HAL_ADC_Init+0x1a8>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6812      	ldr	r2, [r2, #0]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	430b      	orrs	r3, r1
 8000c32:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c3c:	d003      	beq.n	8000c46 <HAL_ADC_Init+0x126>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d104      	bne.n	8000c50 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	051b      	lsls	r3, r3, #20
 8000c4e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c56:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	689a      	ldr	r2, [r3, #8]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <HAL_ADC_Init+0x1ac>)
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d10b      	bne.n	8000c8c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c7e:	f023 0303 	bic.w	r3, r3, #3
 8000c82:	f043 0201 	orr.w	r2, r3, #1
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c8a:	e018      	b.n	8000cbe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c90:	f023 0312 	bic.w	r3, r3, #18
 8000c94:	f043 0210 	orr.w	r2, r3, #16
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	f043 0201 	orr.w	r2, r3, #1
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cac:	e007      	b.n	8000cbe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	f043 0210 	orr.w	r2, r3, #16
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	ffe1f7fd 	.word	0xffe1f7fd
 8000ccc:	ff1f0efe 	.word	0xff1f0efe

08000cd0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d101      	bne.n	8000cea <HAL_ADC_Start+0x1a>
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e098      	b.n	8000e1c <HAL_ADC_Start+0x14c>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f9a4 	bl	8001040 <ADC_Enable>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8087 	bne.w	8000e12 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d0c:	f023 0301 	bic.w	r3, r3, #1
 8000d10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a41      	ldr	r2, [pc, #260]	; (8000e24 <HAL_ADC_Start+0x154>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d105      	bne.n	8000d2e <HAL_ADC_Start+0x5e>
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <HAL_ADC_Start+0x158>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d115      	bne.n	8000d5a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d026      	beq.n	8000d96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d58:	e01d      	b.n	8000d96 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <HAL_ADC_Start+0x158>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d004      	beq.n	8000d7a <HAL_ADC_Start+0xaa>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a2b      	ldr	r2, [pc, #172]	; (8000e24 <HAL_ADC_Start+0x154>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10d      	bne.n	8000d96 <HAL_ADC_Start+0xc6>
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <HAL_ADC_Start+0x158>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d007      	beq.n	8000d96 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d006      	beq.n	8000db0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da6:	f023 0206 	bic.w	r2, r3, #6
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dae:	e002      	b.n	8000db6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f06f 0202 	mvn.w	r2, #2
 8000dc6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dd2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000dd6:	d113      	bne.n	8000e00 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ddc:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <HAL_ADC_Start+0x154>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d105      	bne.n	8000dee <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_ADC_Start+0x158>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d108      	bne.n	8000e00 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	e00c      	b.n	8000e1a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689a      	ldr	r2, [r3, #8]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	e003      	b.n	8000e1a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40012800 	.word	0x40012800
 8000e28:	40012400 	.word	0x40012400

08000e2c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr

08000e3e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr

08000e50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d101      	bne.n	8000e70 <HAL_ADC_ConfigChannel+0x20>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e0dc      	b.n	800102a <HAL_ADC_ConfigChannel+0x1da>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b06      	cmp	r3, #6
 8000e7e:	d81c      	bhi.n	8000eba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	3b05      	subs	r3, #5
 8000e92:	221f      	movs	r2, #31
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4019      	ands	r1, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	4413      	add	r3, r2
 8000eaa:	3b05      	subs	r3, #5
 8000eac:	fa00 f203 	lsl.w	r2, r0, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb8:	e03c      	b.n	8000f34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b0c      	cmp	r3, #12
 8000ec0:	d81c      	bhi.n	8000efc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3b23      	subs	r3, #35	; 0x23
 8000ed4:	221f      	movs	r2, #31
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4019      	ands	r1, r3
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	6818      	ldr	r0, [r3, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	3b23      	subs	r3, #35	; 0x23
 8000eee:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8000efa:	e01b      	b.n	8000f34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3b41      	subs	r3, #65	; 0x41
 8000f0e:	221f      	movs	r2, #31
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	4019      	ands	r1, r3
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	3b41      	subs	r3, #65	; 0x41
 8000f28:	fa00 f203 	lsl.w	r2, r0, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d91c      	bls.n	8000f76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68d9      	ldr	r1, [r3, #12]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4613      	mov	r3, r2
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3b1e      	subs	r3, #30
 8000f4e:	2207      	movs	r2, #7
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4019      	ands	r1, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	6898      	ldr	r0, [r3, #8]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	3b1e      	subs	r3, #30
 8000f68:	fa00 f203 	lsl.w	r2, r0, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	e019      	b.n	8000faa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6919      	ldr	r1, [r3, #16]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	2207      	movs	r2, #7
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	4019      	ands	r1, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	6898      	ldr	r0, [r3, #8]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d003      	beq.n	8000fba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fb6:	2b11      	cmp	r3, #17
 8000fb8:	d132      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_ADC_ConfigChannel+0x1e4>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d125      	bne.n	8001010 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d126      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fe0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b10      	cmp	r3, #16
 8000fe8:	d11a      	bne.n	8001020 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_ADC_ConfigChannel+0x1ec>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	0c9a      	lsrs	r2, r3, #18
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001000:	e002      	b.n	8001008 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	3b01      	subs	r3, #1
 8001006:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f9      	bne.n	8001002 <HAL_ADC_ConfigChannel+0x1b2>
 800100e:	e007      	b.n	8001020 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f043 0220 	orr.w	r2, r3, #32
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001028:	7bfb      	ldrb	r3, [r7, #15]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr
 8001034:	40012400 	.word	0x40012400
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83

08001040 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d040      	beq.n	80010e0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0201 	orr.w	r2, r2, #1
 800106c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <ADC_Enable+0xac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a1f      	ldr	r2, [pc, #124]	; (80010f0 <ADC_Enable+0xb0>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	0c9b      	lsrs	r3, r3, #18
 800107a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800107c:	e002      	b.n	8001084 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3b01      	subs	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f9      	bne.n	800107e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800108a:	f7ff fd1b 	bl	8000ac4 <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001090:	e01f      	b.n	80010d2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001092:	f7ff fd17 	bl	8000ac4 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d918      	bls.n	80010d2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d011      	beq.n	80010d2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	f043 0210 	orr.w	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e007      	b.n	80010e2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d1d8      	bne.n	8001092 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000000 	.word	0x20000000
 80010f0:	431bde83 	.word	0x431bde83

080010f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b01      	cmp	r3, #1
 800110c:	d12e      	bne.n	800116c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800111e:	f7ff fcd1 	bl	8000ac4 <HAL_GetTick>
 8001122:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001124:	e01b      	b.n	800115e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001126:	f7ff fccd 	bl	8000ac4 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d914      	bls.n	800115e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b01      	cmp	r3, #1
 8001140:	d10d      	bne.n	800115e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	f043 0210 	orr.w	r2, r3, #16
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e007      	b.n	800116e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d0dc      	beq.n	8001126 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001188:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800118c:	2b00      	cmp	r3, #0
 800118e:	d127      	bne.n	80011e0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011aa:	d115      	bne.n	80011d8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d111      	bne.n	80011d8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d105      	bne.n	80011d8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f7ff f88b 	bl	80002f4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80011de:	e004      	b.n	80011ea <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6a1b      	ldr	r3, [r3, #32]
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	4798      	blx	r3
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff fe13 	bl	8000e2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	f043 0204 	orr.w	r2, r3, #4
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff fe02 	bl	8000e3e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_ADCEx_Calibration_Start+0x1e>
 800125e:	2302      	movs	r3, #2
 8001260:	e097      	b.n	8001392 <HAL_ADCEx_Calibration_Start+0x14e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ff42 	bl	80010f4 <ADC_ConversionStop_Disable>
 8001270:	4603      	mov	r3, r0
 8001272:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fee3 	bl	8001040 <ADC_Enable>
 800127a:	4603      	mov	r3, r0
 800127c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800127e:	7dfb      	ldrb	r3, [r7, #23]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f040 8081 	bne.w	8001388 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800128a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800128e:	f023 0302 	bic.w	r3, r3, #2
 8001292:	f043 0202 	orr.w	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800129a:	4b40      	ldr	r3, [pc, #256]	; (800139c <HAL_ADCEx_Calibration_Start+0x158>)
 800129c:	681c      	ldr	r4, [r3, #0]
 800129e:	2002      	movs	r0, #2
 80012a0:	f001 fad0 	bl	8002844 <HAL_RCCEx_GetPeriphCLKFreq>
 80012a4:	4603      	mov	r3, r0
 80012a6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80012aa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80012ac:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80012ae:	e002      	b.n	80012b6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f9      	bne.n	80012b0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0208 	orr.w	r2, r2, #8
 80012ca:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80012cc:	f7ff fbfa 	bl	8000ac4 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012d2:	e01b      	b.n	800130c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012d4:	f7ff fbf6 	bl	8000ac4 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b0a      	cmp	r3, #10
 80012e0:	d914      	bls.n	800130c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00d      	beq.n	800130c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f023 0312 	bic.w	r3, r3, #18
 80012f8:	f043 0210 	orr.w	r2, r3, #16
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e042      	b.n	8001392 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1dc      	bne.n	80012d4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0204 	orr.w	r2, r2, #4
 8001328:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800132a:	f7ff fbcb 	bl	8000ac4 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001330:	e01b      	b.n	800136a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001332:	f7ff fbc7 	bl	8000ac4 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b0a      	cmp	r3, #10
 800133e:	d914      	bls.n	800136a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00d      	beq.n	800136a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	f023 0312 	bic.w	r3, r3, #18
 8001356:	f043 0210 	orr.w	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e013      	b.n	8001392 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1dc      	bne.n	8001332 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	f023 0303 	bic.w	r3, r3, #3
 8001380:	f043 0201 	orr.w	r2, r3, #1
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001390:	7dfb      	ldrb	r3, [r7, #23]
}
 8001392:	4618      	mov	r0, r3
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000

080013a0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b092      	sub	sp, #72	; 0x48
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	2230      	movs	r2, #48	; 0x30
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 fd6a 	bl	8002e94 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e08f      	b.n	80014ee <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80013d8:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013e2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013e6:	d00b      	beq.n	8001400 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	f043 0220 	orr.w	r2, r3, #32
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e076      	b.n	80014ee <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fe1d 	bl	8001040 <ADC_Enable>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 800140c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001410:	2b00      	cmp	r3, #0
 8001412:	d107      	bne.n	8001424 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe11 	bl	8001040 <ADC_Enable>
 800141e:	4603      	mov	r3, r0
 8001420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001424:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001428:	2b00      	cmp	r3, #0
 800142a:	d15a      	bne.n	80014e2 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8001432:	4013      	ands	r3, r2
 8001434:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001452:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a23      	ldr	r2, [pc, #140]	; (8001504 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8001476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f06f 0202 	mvn.w	r2, #2
 8001488:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001498:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6a18      	ldr	r0, [r3, #32]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	334c      	adds	r3, #76	; 0x4c
 80014a4:	4619      	mov	r1, r3
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f000 f9e9 	bl	8001880 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014bc:	d108      	bne.n	80014d0 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	e00c      	b.n	80014ea <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	e003      	b.n	80014ea <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3748      	adds	r7, #72	; 0x48
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40012800 	.word	0x40012800
 80014fc:	ffeffcfe 	.word	0xffeffcfe
 8001500:	08001177 	.word	0x08001177
 8001504:	080011f3 	.word	0x080011f3
 8001508:	0800120f 	.word	0x0800120f

0800150c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b090      	sub	sp, #64	; 0x40
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	2230      	movs	r2, #48	; 0x30
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fcb5 	bl	8002e94 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8001534:	2302      	movs	r3, #2
 8001536:	e032      	b.n	800159e <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8001542:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b01      	cmp	r3, #1
 8001550:	d016      	beq.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800155a:	2b01      	cmp	r3, #1
 800155c:	d010      	beq.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d10b      	bne.n	8001580 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	e008      	b.n	8001592 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800159a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800159e:	4618      	mov	r0, r3
 80015a0:	3740      	adds	r7, #64	; 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40012800 	.word	0x40012800
 80015ac:	40012400 	.word	0x40012400

080015b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e2:	4a04      	ldr	r2, [pc, #16]	; (80015f4 <__NVIC_SetPriorityGrouping+0x44>)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	60d3      	str	r3, [r2, #12]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__NVIC_GetPriorityGrouping+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0307 	and.w	r3, r3, #7
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	db0b      	blt.n	800163e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 021f 	and.w	r2, r3, #31
 800162c:	4906      	ldr	r1, [pc, #24]	; (8001648 <__NVIC_EnableIRQ+0x34>)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	095b      	lsrs	r3, r3, #5
 8001634:	2001      	movs	r0, #1
 8001636:	fa00 f202 	lsl.w	r2, r0, r2
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bc80      	pop	{r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f7ff ff90 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff2d 	bl	80015b0 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff42 	bl	80015f8 <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff90 	bl	80016a0 <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5f 	bl	800164c <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff35 	bl	8001614 <__NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa2 	bl	8001704 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e043      	b.n	800186a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b22      	ldr	r3, [pc, #136]	; (8001874 <HAL_DMA_Init+0xa8>)
 80017ea:	4413      	add	r3, r2
 80017ec:	4a22      	ldr	r2, [pc, #136]	; (8001878 <HAL_DMA_Init+0xac>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	009a      	lsls	r2, r3, #2
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	; (800187c <HAL_DMA_Init+0xb0>)
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2202      	movs	r2, #2
 8001804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001816:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800181a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001824:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4313      	orrs	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	bffdfff8 	.word	0xbffdfff8
 8001878:	cccccccd 	.word	0xcccccccd
 800187c:	40020000 	.word	0x40020000

08001880 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_DMA_Start_IT+0x20>
 800189c:	2302      	movs	r3, #2
 800189e:	e04b      	b.n	8001938 <HAL_DMA_Start_IT+0xb8>
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d13a      	bne.n	800192a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0201 	bic.w	r2, r2, #1
 80018d0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f937 	bl	8001b4c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f042 020e 	orr.w	r2, r2, #14
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e00f      	b.n	8001918 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0204 	bic.w	r2, r2, #4
 8001906:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 020a 	orr.w	r2, r2, #10
 8001916:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f042 0201 	orr.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e005      	b.n	8001936 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001932:	2302      	movs	r3, #2
 8001934:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001936:	7dfb      	ldrb	r3, [r7, #23]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	2204      	movs	r2, #4
 800195e:	409a      	lsls	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d04f      	beq.n	8001a08 <HAL_DMA_IRQHandler+0xc8>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	2b00      	cmp	r3, #0
 8001970:	d04a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0320 	and.w	r3, r3, #32
 800197c:	2b00      	cmp	r3, #0
 800197e:	d107      	bne.n	8001990 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 0204 	bic.w	r2, r2, #4
 800198e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a66      	ldr	r2, [pc, #408]	; (8001b30 <HAL_DMA_IRQHandler+0x1f0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d029      	beq.n	80019ee <HAL_DMA_IRQHandler+0xae>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a65      	ldr	r2, [pc, #404]	; (8001b34 <HAL_DMA_IRQHandler+0x1f4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d022      	beq.n	80019ea <HAL_DMA_IRQHandler+0xaa>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a63      	ldr	r2, [pc, #396]	; (8001b38 <HAL_DMA_IRQHandler+0x1f8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d01a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0xa4>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a62      	ldr	r2, [pc, #392]	; (8001b3c <HAL_DMA_IRQHandler+0x1fc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d012      	beq.n	80019de <HAL_DMA_IRQHandler+0x9e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a60      	ldr	r2, [pc, #384]	; (8001b40 <HAL_DMA_IRQHandler+0x200>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x98>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5f      	ldr	r2, [pc, #380]	; (8001b44 <HAL_DMA_IRQHandler+0x204>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d102      	bne.n	80019d2 <HAL_DMA_IRQHandler+0x92>
 80019cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d0:	e00e      	b.n	80019f0 <HAL_DMA_IRQHandler+0xb0>
 80019d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019d6:	e00b      	b.n	80019f0 <HAL_DMA_IRQHandler+0xb0>
 80019d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019dc:	e008      	b.n	80019f0 <HAL_DMA_IRQHandler+0xb0>
 80019de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e2:	e005      	b.n	80019f0 <HAL_DMA_IRQHandler+0xb0>
 80019e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e8:	e002      	b.n	80019f0 <HAL_DMA_IRQHandler+0xb0>
 80019ea:	2340      	movs	r3, #64	; 0x40
 80019ec:	e000      	b.n	80019f0 <HAL_DMA_IRQHandler+0xb0>
 80019ee:	2304      	movs	r3, #4
 80019f0:	4a55      	ldr	r2, [pc, #340]	; (8001b48 <HAL_DMA_IRQHandler+0x208>)
 80019f2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8094 	beq.w	8001b26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a06:	e08e      	b.n	8001b26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d056      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x186>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d051      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10b      	bne.n	8001a48 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 020a 	bic.w	r2, r2, #10
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a38      	ldr	r2, [pc, #224]	; (8001b30 <HAL_DMA_IRQHandler+0x1f0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d029      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x166>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a37      	ldr	r2, [pc, #220]	; (8001b34 <HAL_DMA_IRQHandler+0x1f4>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x162>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a35      	ldr	r2, [pc, #212]	; (8001b38 <HAL_DMA_IRQHandler+0x1f8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01a      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x15c>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a34      	ldr	r2, [pc, #208]	; (8001b3c <HAL_DMA_IRQHandler+0x1fc>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d012      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x156>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a32      	ldr	r2, [pc, #200]	; (8001b40 <HAL_DMA_IRQHandler+0x200>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d00a      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x150>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a31      	ldr	r2, [pc, #196]	; (8001b44 <HAL_DMA_IRQHandler+0x204>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d102      	bne.n	8001a8a <HAL_DMA_IRQHandler+0x14a>
 8001a84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a88:	e00e      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x168>
 8001a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a8e:	e00b      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x168>
 8001a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a94:	e008      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x168>
 8001a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a9a:	e005      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x168>
 8001a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aa0:	e002      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x168>
 8001aa2:	2320      	movs	r3, #32
 8001aa4:	e000      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x168>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	4a27      	ldr	r2, [pc, #156]	; (8001b48 <HAL_DMA_IRQHandler+0x208>)
 8001aaa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d034      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ac4:	e02f      	b.n	8001b26 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2208      	movs	r2, #8
 8001acc:	409a      	lsls	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d028      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x1e8>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d023      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 020e 	bic.w	r2, r2, #14
 8001aee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
    }
  }
  return;
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
}
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40020008 	.word	0x40020008
 8001b34:	4002001c 	.word	0x4002001c
 8001b38:	40020030 	.word	0x40020030
 8001b3c:	40020044 	.word	0x40020044
 8001b40:	40020058 	.word	0x40020058
 8001b44:	4002006c 	.word	0x4002006c
 8001b48:	40020000 	.word	0x40020000

08001b4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b62:	2101      	movs	r1, #1
 8001b64:	fa01 f202 	lsl.w	r2, r1, r2
 8001b68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b10      	cmp	r3, #16
 8001b78:	d108      	bne.n	8001b8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b8a:	e007      	b.n	8001b9c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	60da      	str	r2, [r3, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e169      	b.n	8001e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8158 	bne.w	8001e8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a9a      	ldr	r2, [pc, #616]	; (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d05e      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001be4:	4a98      	ldr	r2, [pc, #608]	; (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d875      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bea:	4a98      	ldr	r2, [pc, #608]	; (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d058      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a96      	ldr	r2, [pc, #600]	; (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d86f      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bf6:	4a96      	ldr	r2, [pc, #600]	; (8001e50 <HAL_GPIO_Init+0x2a8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d052      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a94      	ldr	r2, [pc, #592]	; (8001e50 <HAL_GPIO_Init+0x2a8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d869      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c02:	4a94      	ldr	r2, [pc, #592]	; (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d04c      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c08:	4a92      	ldr	r2, [pc, #584]	; (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d863      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c0e:	4a92      	ldr	r2, [pc, #584]	; (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d046      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c14:	4a90      	ldr	r2, [pc, #576]	; (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d85d      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d82a      	bhi.n	8001c74 <HAL_GPIO_Init+0xcc>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d859      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <HAL_GPIO_Init+0x80>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001c8f 	.word	0x08001c8f
 8001c34:	08001cd1 	.word	0x08001cd1
 8001c38:	08001cd7 	.word	0x08001cd7
 8001c3c:	08001cd7 	.word	0x08001cd7
 8001c40:	08001cd7 	.word	0x08001cd7
 8001c44:	08001cd7 	.word	0x08001cd7
 8001c48:	08001cd7 	.word	0x08001cd7
 8001c4c:	08001cd7 	.word	0x08001cd7
 8001c50:	08001cd7 	.word	0x08001cd7
 8001c54:	08001cd7 	.word	0x08001cd7
 8001c58:	08001cd7 	.word	0x08001cd7
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cd7 	.word	0x08001cd7
 8001c64:	08001cd7 	.word	0x08001cd7
 8001c68:	08001cd7 	.word	0x08001cd7
 8001c6c:	08001c85 	.word	0x08001c85
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	4a79      	ldr	r2, [pc, #484]	; (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7a:	e02c      	b.n	8001cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e029      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e024      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	3308      	adds	r3, #8
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e01f      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e01a      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001caa:	2304      	movs	r3, #4
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e013      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	611a      	str	r2, [r3, #16]
          break;
 8001cc2:	e009      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	615a      	str	r2, [r3, #20]
          break;
 8001cce:	e003      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          break;
 8001cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d801      	bhi.n	8001ce2 <HAL_GPIO_Init+0x13a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_Init+0x13e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d802      	bhi.n	8001cf4 <HAL_GPIO_Init+0x14c>
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x152>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3b08      	subs	r3, #8
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	210f      	movs	r1, #15
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80b1 	beq.w	8001e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d40:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a40      	ldr	r2, [pc, #256]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_GPIO_Init+0x1ec>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_GPIO_Init+0x2c4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00d      	beq.n	8001d90 <HAL_GPIO_Init+0x1e8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3e      	ldr	r2, [pc, #248]	; (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d007      	beq.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3d      	ldr	r2, [pc, #244]	; (8001e74 <HAL_GPIO_Init+0x2cc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_GPIO_Init+0x1e0>
 8001d84:	2303      	movs	r3, #3
 8001d86:	e006      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e004      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d94:	2300      	movs	r3, #0
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001da6:	492f      	ldr	r1, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	492c      	ldr	r1, [pc, #176]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4928      	ldr	r1, [pc, #160]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	491e      	ldr	r1, [pc, #120]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4918      	ldr	r1, [pc, #96]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4914      	ldr	r1, [pc, #80]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d021      	beq.n	8001e7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e021      	b.n	8001e8a <HAL_GPIO_Init+0x2e2>
 8001e46:	bf00      	nop
 8001e48:	10320000 	.word	0x10320000
 8001e4c:	10310000 	.word	0x10310000
 8001e50:	10220000 	.word	0x10220000
 8001e54:	10210000 	.word	0x10210000
 8001e58:	10120000 	.word	0x10120000
 8001e5c:	10110000 	.word	0x10110000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40011400 	.word	0x40011400
 8001e78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4909      	ldr	r1, [pc, #36]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f47f ae8e 	bne.w	8001bbc <HAL_GPIO_Init+0x14>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	372c      	adds	r7, #44	; 0x2c
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e272      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8087 	beq.w	800200e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f00:	4b92      	ldr	r3, [pc, #584]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d00c      	beq.n	8001f26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f0c:	4b8f      	ldr	r3, [pc, #572]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d112      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5e>
 8001f18:	4b8c      	ldr	r3, [pc, #560]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f24:	d10b      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f26:	4b89      	ldr	r3, [pc, #548]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d06c      	beq.n	800200c <HAL_RCC_OscConfig+0x12c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d168      	bne.n	800200c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e24c      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x76>
 8001f48:	4b80      	ldr	r3, [pc, #512]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a7f      	ldr	r2, [pc, #508]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e02e      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x98>
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7a      	ldr	r2, [pc, #488]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b78      	ldr	r3, [pc, #480]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a77      	ldr	r2, [pc, #476]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e01d      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0xbc>
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a71      	ldr	r2, [pc, #452]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b6f      	ldr	r3, [pc, #444]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6e      	ldr	r2, [pc, #440]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f9c:	4b6b      	ldr	r3, [pc, #428]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b68      	ldr	r3, [pc, #416]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a67      	ldr	r2, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fd82 	bl	8000ac4 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe fd7e 	bl	8000ac4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e200      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xe4>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fd6e 	bl	8000ac4 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7fe fd6a 	bl	8000ac4 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1ec      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x10c>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d063      	beq.n	80020e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	4b4c      	ldr	r3, [pc, #304]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002026:	4b49      	ldr	r3, [pc, #292]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d11c      	bne.n	800206c <HAL_RCC_OscConfig+0x18c>
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d116      	bne.n	800206c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_RCC_OscConfig+0x176>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e1c0      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4939      	ldr	r1, [pc, #228]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	e03a      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fd23 	bl	8000ac4 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002082:	f7fe fd1f 	bl	8000ac4 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e1a1      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4927      	ldr	r1, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	e015      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_RCC_OscConfig+0x270>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7fe fd02 	bl	8000ac4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c4:	f7fe fcfe 	bl	8000ac4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e180      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03a      	beq.n	8002164 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d019      	beq.n	800212a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7fe fce2 	bl	8000ac4 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7fe fcde 	bl	8000ac4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e160      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_RCC_OscConfig+0x26c>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002122:	2001      	movs	r0, #1
 8002124:	f000 faba 	bl	800269c <RCC_Delay>
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212a:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <HAL_RCC_OscConfig+0x274>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7fe fcc8 	bl	8000ac4 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002136:	e00f      	b.n	8002158 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7fe fcc4 	bl	8000ac4 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d908      	bls.n	8002158 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e146      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	42420000 	.word	0x42420000
 8002154:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4b92      	ldr	r3, [pc, #584]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e9      	bne.n	8002138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a6 	beq.w	80022be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b88      	ldr	r3, [pc, #544]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a87      	ldr	r2, [pc, #540]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]
 800218e:	4b85      	ldr	r3, [pc, #532]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fc85 	bl	8000ac4 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe fc81 	bl	8000ac4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	; 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e103      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x312>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a6e      	ldr	r2, [pc, #440]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e02d      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x334>
 80021fa:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a69      	ldr	r2, [pc, #420]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a66      	ldr	r2, [pc, #408]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	e01c      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x356>
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a60      	ldr	r2, [pc, #384]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e00b      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 8002236:	4b5b      	ldr	r3, [pc, #364]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a5a      	ldr	r2, [pc, #360]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6213      	str	r3, [r2, #32]
 8002242:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a57      	ldr	r2, [pc, #348]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7fe fc35 	bl	8000ac4 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fc31 	bl	8000ac4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0b1      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCC_OscConfig+0x37e>
 8002280:	e014      	b.n	80022ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7fe fc1f 	bl	8000ac4 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fc1b 	bl	8000ac4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e09b      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8087 	beq.w	80023d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d061      	beq.n	8002398 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d146      	bne.n	800236a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b33      	ldr	r3, [pc, #204]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe fbef 	bl	8000ac4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fbeb 	bl	8000ac4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e06d      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002310:	d108      	bne.n	8002324 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4921      	ldr	r1, [pc, #132]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a19      	ldr	r1, [r3, #32]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	430b      	orrs	r3, r1
 8002336:	491b      	ldr	r1, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7fe fbbf 	bl	8000ac4 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe fbbb 	bl	8000ac4 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e03d      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x46a>
 8002368:	e035      	b.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7fe fba8 	bl	8000ac4 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe fba4 	bl	8000ac4 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e026      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x498>
 8002396:	e01e      	b.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e019      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
 80023ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	; (80023e0 <HAL_RCC_OscConfig+0x500>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d0      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b6a      	ldr	r3, [pc, #424]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b67      	ldr	r3, [pc, #412]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4965      	ldr	r1, [pc, #404]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a58      	ldr	r2, [pc, #352]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800244a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d040      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e073      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4936      	ldr	r1, [pc, #216]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7fe faf6 	bl	8000ac4 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe faf2 	bl	8000ac4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e053      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b27      	ldr	r3, [pc, #156]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d210      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4922      	ldr	r1, [pc, #136]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255e:	4b12      	ldr	r3, [pc, #72]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	; (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fa54 	bl	8000a40 <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	080037d8 	.word	0x080037d8
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCC_GetSysClockFreq+0x94>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x30>
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x36>
 80025e6:	e027      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	613b      	str	r3, [r7, #16]
      break;
 80025ec:	e027      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002606:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_GetSysClockFreq+0x94>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0c5b      	lsrs	r3, r3, #17
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	4a11      	ldr	r2, [pc, #68]	; (8002658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a0d      	ldr	r2, [pc, #52]	; (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 800261a:	fb03 f202 	mul.w	r2, r3, r2
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e004      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <HAL_RCC_GetSysClockFreq+0xa4>)
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	613b      	str	r3, [r7, #16]
      break;
 8002636:	e002      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 800263a:	613b      	str	r3, [r7, #16]
      break;
 800263c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263e:	693b      	ldr	r3, [r7, #16]
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	007a1200 	.word	0x007a1200
 8002654:	080037f0 	.word	0x080037f0
 8002658:	08003800 	.word	0x08003800
 800265c:	003d0900 	.word	0x003d0900

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b02      	ldr	r3, [pc, #8]	; (8002670 <HAL_RCC_GetHCLKFreq+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002678:	f7ff fff2 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0adb      	lsrs	r3, r3, #11
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	080037e8 	.word	0x080037e8

0800269c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <RCC_Delay+0x34>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <RCC_Delay+0x38>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	0a5b      	lsrs	r3, r3, #9
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026b8:	bf00      	nop
  }
  while (Delay --);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1e5a      	subs	r2, r3, #1
 80026be:	60fa      	str	r2, [r7, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f9      	bne.n	80026b8 <RCC_Delay+0x1c>
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	20000000 	.word	0x20000000
 80026d4:	10624dd3 	.word	0x10624dd3

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d07d      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f8:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10d      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002704:	4b4c      	ldr	r3, [pc, #304]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	4a4b      	ldr	r2, [pc, #300]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270e:	61d3      	str	r3, [r2, #28]
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271c:	2301      	movs	r3, #1
 800271e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002720:	4b46      	ldr	r3, [pc, #280]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d118      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272c:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a42      	ldr	r2, [pc, #264]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002738:	f7fe f9c4 	bl	8000ac4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273e:	e008      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002740:	f7fe f9c0 	bl	8000ac4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b64      	cmp	r3, #100	; 0x64
 800274c:	d901      	bls.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e06d      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800275e:	4b36      	ldr	r3, [pc, #216]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002766:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d02e      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	429a      	cmp	r2, r3
 800277a:	d027      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800277c:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002784:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002786:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002792:	4a29      	ldr	r2, [pc, #164]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d014      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe f98f 	bl	8000ac4 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	e00a      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe f98b 	bl	8000ac4 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e036      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ee      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027cc:	4b1a      	ldr	r3, [pc, #104]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4917      	ldr	r1, [pc, #92]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b14      	ldr	r3, [pc, #80]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	490b      	ldr	r1, [pc, #44]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	2b00      	cmp	r3, #0
 8002818:	d008      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281a:	4b07      	ldr	r3, [pc, #28]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
 8002840:	42420440 	.word	0x42420440

08002844 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	2300      	movs	r3, #0
 8002856:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b10      	cmp	r3, #16
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b10      	cmp	r3, #16
 800286a:	f200 808a 	bhi.w	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d045      	beq.n	8002900 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d075      	beq.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800287a:	e082      	b.n	8002982 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002882:	4b45      	ldr	r3, [pc, #276]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d07b      	beq.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	0c9b      	lsrs	r3, r3, #18
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	4a41      	ldr	r2, [pc, #260]	; (800299c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d015      	beq.n	80028d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028a6:	4b3c      	ldr	r3, [pc, #240]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	0c5b      	lsrs	r3, r3, #17
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	4a3b      	ldr	r2, [pc, #236]	; (80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80028c0:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	e004      	b.n	80028dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4a34      	ldr	r2, [pc, #208]	; (80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80028dc:	4b2e      	ldr	r3, [pc, #184]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e8:	d102      	bne.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	61bb      	str	r3, [r7, #24]
      break;
 80028ee:	e04a      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4a2d      	ldr	r2, [pc, #180]	; (80029ac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
      break;
 80028fe:	e042      	b.n	8002986 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800290c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002910:	d108      	bne.n	8002924 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800291c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002920:	61bb      	str	r3, [r7, #24]
 8002922:	e01f      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800292e:	d109      	bne.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800293c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	e00f      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800294e:	d11c      	bne.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d016      	beq.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800295c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002960:	61bb      	str	r3, [r7, #24]
      break;
 8002962:	e012      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002964:	e011      	b.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002966:	f7ff fe85 	bl	8002674 <HAL_RCC_GetPCLK2Freq>
 800296a:	4602      	mov	r2, r0
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0b9b      	lsrs	r3, r3, #14
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	61bb      	str	r3, [r7, #24]
      break;
 8002980:	e004      	b.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002982:	bf00      	nop
 8002984:	e002      	b.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002986:	bf00      	nop
 8002988:	e000      	b.n	800298c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800298a:	bf00      	nop
    }
  }
  return (frequency);
 800298c:	69bb      	ldr	r3, [r7, #24]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
 800299c:	08003804 	.word	0x08003804
 80029a0:	08003814 	.word	0x08003814
 80029a4:	007a1200 	.word	0x007a1200
 80029a8:	003d0900 	.word	0x003d0900
 80029ac:	aaaaaaab 	.word	0xaaaaaaab

080029b0 <LCD_Init>:
#include "stdarg.h"
#include "stdio.h"

void LCD_Init(LCD_HandleTypeDef *LCD, GPIO_TypeDef *GPIOx, 
                LCD_GPIOTypeDef LCD_Pin, LCD_SizeTypeDef LCD_Size)
{
 80029b0:	b082      	sub	sp, #8
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
 80029bc:	f107 0110 	add.w	r1, r7, #16
 80029c0:	e881 000c 	stmia.w	r1, {r2, r3}
    LCD->GPIOx = GPIOx;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	601a      	str	r2, [r3, #0]
    LCD->LCD_Pin.LCD_RS_PIN = LCD_Pin.LCD_RS_PIN;
 80029ca:	8a3a      	ldrh	r2, [r7, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	809a      	strh	r2, [r3, #4]
    LCD->LCD_Pin.LCD_RW_PIN = LCD_Pin.LCD_RW_PIN;
 80029d0:	8a7a      	ldrh	r2, [r7, #18]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	80da      	strh	r2, [r3, #6]
    LCD->LCD_Pin.LCD_EN_PIN = LCD_Pin.LCD_EN_PIN;
 80029d6:	8aba      	ldrh	r2, [r7, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	811a      	strh	r2, [r3, #8]
    LCD->LCD_Pin.LCD_D7_PIN = LCD_Pin.LCD_D7_PIN;
 80029dc:	8bba      	ldrh	r2, [r7, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	821a      	strh	r2, [r3, #16]
    LCD->LCD_Pin.LCD_D6_PIN = LCD_Pin.LCD_D6_PIN;
 80029e2:	8b7a      	ldrh	r2, [r7, #26]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	81da      	strh	r2, [r3, #14]
    LCD->LCD_Pin.LCD_D5_PIN = LCD_Pin.LCD_D5_PIN;
 80029e8:	8b3a      	ldrh	r2, [r7, #24]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	819a      	strh	r2, [r3, #12]
    LCD->LCD_Pin.LCD_D4_PIN = LCD_Pin.LCD_D4_PIN;
 80029ee:	8afa      	ldrh	r2, [r7, #22]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	815a      	strh	r2, [r3, #10]
    LCD->LCD_Size.LCD_column = LCD_Size.LCD_column;
 80029f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	749a      	strb	r2, [r3, #18]
    LCD->LCD_Size.LCD_row = LCD_Size.LCD_row;
 80029fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	74da      	strb	r2, [r3, #19]

    HAL_Delay(50);
 8002a04:	2032      	movs	r0, #50	; 0x32
 8002a06:	f7fe f867 	bl	8000ad8 <HAL_Delay>
    /* Function set: 4-bit interface*/
    LCD_SendCommand(LCD, 0x03);
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f849 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(5);
 8002a12:	2005      	movs	r0, #5
 8002a14:	f7fe f860 	bl	8000ad8 <HAL_Delay>
    LCD_SendCommand(LCD, 0x03);
 8002a18:	2103      	movs	r1, #3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f842 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(1);
 8002a20:	2001      	movs	r0, #1
 8002a22:	f7fe f859 	bl	8000ad8 <HAL_Delay>
    LCD_SendCommand(LCD, 0x03);
 8002a26:	2103      	movs	r1, #3
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f83b 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(1);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f7fe f852 	bl	8000ad8 <HAL_Delay>
    LCD_SendCommand(LCD, 0x02);
 8002a34:	2102      	movs	r1, #2
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f834 	bl	8002aa4 <LCD_SendCommand>
        HAL_Delay(1);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7fe f84b 	bl	8000ad8 <HAL_Delay>
    /*Display OFF, cursor ON*/
    LCD_SendCommand(LCD, 0x28);
 8002a42:	2128      	movs	r1, #40	; 0x28
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f82d 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(1);
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	f7fe f844 	bl	8000ad8 <HAL_Delay>
    LCD_SendCommand(LCD, 0x08);
 8002a50:	2108      	movs	r1, #8
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f826 	bl	8002aa4 <LCD_SendCommand>
        HAL_Delay(1);
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f7fe f83d 	bl	8000ad8 <HAL_Delay>
    /*Clear display*/
    LCD_SendCommand(LCD, 0x01);
 8002a5e:	2101      	movs	r1, #1
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f81f 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(3);
 8002a66:	2003      	movs	r0, #3
 8002a68:	f7fe f836 	bl	8000ad8 <HAL_Delay>
    LCD_SendCommand(LCD, 0x06);
 8002a6c:	2106      	movs	r1, #6
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f818 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(1);
 8002a74:	2001      	movs	r0, #1
 8002a76:	f7fe f82f 	bl	8000ad8 <HAL_Delay>
    /* Function set: 5x7 mode for chars*/
    LCD_SendCommand(LCD, 0x0c);
 8002a7a:	210c      	movs	r1, #12
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f811 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(1);
 8002a82:	2001      	movs	r0, #1
 8002a84:	f7fe f828 	bl	8000ad8 <HAL_Delay>
    LCD_SendCommand(LCD, 0x02);
 8002a88:	2102      	movs	r1, #2
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f80a 	bl	8002aa4 <LCD_SendCommand>
    HAL_Delay(1);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7fe f821 	bl	8000ad8 <HAL_Delay>

}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002aa0:	b002      	add	sp, #8
 8002aa2:	4770      	bx	lr

08002aa4 <LCD_SendCommand>:

void LCD_SendCommand(LCD_HandleTypeDef *LCD, uint8_t command)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
	/* RS = 0: Write Command */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 0);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	889b      	ldrh	r3, [r3, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7ff f9f8 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	88db      	ldrh	r3, [r3, #6]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7ff f9f0 	bl	8001eb0 <HAL_GPIO_WritePin>
	/* Transmit high nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, (command & 0x10) >> 4);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8959      	ldrh	r1, [r3, #10]
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	111b      	asrs	r3, r3, #4
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f7ff f9e3 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (command & 0x20) >> 5);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6818      	ldr	r0, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	8999      	ldrh	r1, [r3, #12]
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	115b      	asrs	r3, r3, #5
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	f7ff f9d6 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (command & 0x40) >> 6);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	89d9      	ldrh	r1, [r3, #14]
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	119b      	asrs	r3, r3, #6
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	f7ff f9c9 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (command & 0x80) >> 7);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8a19      	ldrh	r1, [r3, #16]
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	09db      	lsrs	r3, r3, #7
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f7ff f9bf 	bl	8001eb0 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6818      	ldr	r0, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	891b      	ldrh	r3, [r3, #8]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f7ff f9b7 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002b42:	2001      	movs	r0, #1
 8002b44:	f7fd ffc8 	bl	8000ad8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6818      	ldr	r0, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	891b      	ldrh	r3, [r3, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7ff f9ac 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f7fd ffbd 	bl	8000ad8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 0);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	889b      	ldrh	r3, [r3, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7ff f9a1 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	88db      	ldrh	r3, [r3, #6]
 8002b76:	2200      	movs	r2, #0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7ff f999 	bl	8001eb0 <HAL_GPIO_WritePin>
    /* Transmit low nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, command & 0x01);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8959      	ldrh	r1, [r3, #10]
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f7ff f98e 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (command & 0x02) >> 1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8999      	ldrh	r1, [r3, #12]
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	105b      	asrs	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f7ff f981 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (command & 0x04) >> 2);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	89d9      	ldrh	r1, [r3, #14]
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	109b      	asrs	r3, r3, #2
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7ff f974 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (command & 0x08) >> 3);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8a19      	ldrh	r1, [r3, #16]
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	10db      	asrs	r3, r3, #3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f7ff f967 	bl	8001eb0 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	891b      	ldrh	r3, [r3, #8]
 8002bea:	2201      	movs	r2, #1
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7ff f95f 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fd ff70 	bl	8000ad8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	891b      	ldrh	r3, [r3, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7ff f954 	bl	8001eb0 <HAL_GPIO_WritePin>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <LCD_SendChar>:

void LCD_SendChar(LCD_HandleTypeDef *LCD, uint8_t LCD_data)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
    /* RS = 1: Write data */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	889b      	ldrh	r3, [r3, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7ff f942 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6818      	ldr	r0, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	88db      	ldrh	r3, [r3, #6]
 8002c34:	2200      	movs	r2, #0
 8002c36:	4619      	mov	r1, r3
 8002c38:	f7ff f93a 	bl	8001eb0 <HAL_GPIO_WritePin>
    /* Transmit high nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, (LCD_data & 0x10) >> 4);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	8959      	ldrh	r1, [r3, #10]
 8002c44:	78fb      	ldrb	r3, [r7, #3]
 8002c46:	111b      	asrs	r3, r3, #4
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	f7ff f92d 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (LCD_data & 0x20) >> 5);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	8999      	ldrh	r1, [r3, #12]
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	115b      	asrs	r3, r3, #5
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f7ff f920 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (LCD_data & 0x40) >> 6);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	89d9      	ldrh	r1, [r3, #14]
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	119b      	asrs	r3, r3, #6
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	f7ff f913 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (LCD_data & 0x80) >> 7);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8a19      	ldrh	r1, [r3, #16]
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	09db      	lsrs	r3, r3, #7
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f7ff f909 	bl	8001eb0 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	891b      	ldrh	r3, [r3, #8]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7ff f901 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7fd ff12 	bl	8000ad8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	891b      	ldrh	r3, [r3, #8]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f7ff f8f6 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7fd ff07 	bl	8000ad8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 1);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	889b      	ldrh	r3, [r3, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f7ff f8eb 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	88db      	ldrh	r3, [r3, #6]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7ff f8e3 	bl	8001eb0 <HAL_GPIO_WritePin>
    /* Transmit low nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, LCD_data & 0x01);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8959      	ldrh	r1, [r3, #10]
 8002cf2:	78fb      	ldrb	r3, [r7, #3]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7ff f8d8 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (LCD_data & 0x02) >> 1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8999      	ldrh	r1, [r3, #12]
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	105b      	asrs	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	f7ff f8cb 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (LCD_data & 0x04) >> 2);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	89d9      	ldrh	r1, [r3, #14]
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	109b      	asrs	r3, r3, #2
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7ff f8be 	bl	8001eb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (LCD_data & 0x08) >> 3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6818      	ldr	r0, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8a19      	ldrh	r1, [r3, #16]
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	10db      	asrs	r3, r3, #3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	f7ff f8b1 	bl	8001eb0 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	891b      	ldrh	r3, [r3, #8]
 8002d56:	2201      	movs	r2, #1
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7ff f8a9 	bl	8001eb0 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7fd feba 	bl	8000ad8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	891b      	ldrh	r3, [r3, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7ff f89e 	bl	8001eb0 <HAL_GPIO_WritePin>
}
 8002d74:	bf00      	nop
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <LCD_SetCursor>:

void LCD_SetCursor(LCD_HandleTypeDef *LCD, 
                    uint8_t LCD_column_pos, uint8_t LCD_row_pos)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	70fb      	strb	r3, [r7, #3]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	70bb      	strb	r3, [r7, #2]
    uint8_t cursor_command;
    if ((LCD_column_pos < LCD->LCD_Size.LCD_column) && (LCD_row_pos < LCD->LCD_Size.LCD_row))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7c9b      	ldrb	r3, [r3, #18]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d22a      	bcs.n	8002dec <LCD_SetCursor+0x70>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	7cdb      	ldrb	r3, [r3, #19]
 8002d9a:	78ba      	ldrb	r2, [r7, #2]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d225      	bcs.n	8002dec <LCD_SetCursor+0x70>
    {
        switch (LCD_row_pos)
 8002da0:	78bb      	ldrb	r3, [r7, #2]
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	d824      	bhi.n	8002df0 <LCD_SetCursor+0x74>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <LCD_SetCursor+0x30>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002dbd 	.word	0x08002dbd
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dcd 	.word	0x08002dcd
 8002db8:	08002ddd 	.word	0x08002ddd
        {
        case 0:
            cursor_command = 0x80 + LCD_column_pos;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	3b80      	subs	r3, #128	; 0x80
 8002dc0:	73fb      	strb	r3, [r7, #15]
            break;
 8002dc2:	e016      	b.n	8002df2 <LCD_SetCursor+0x76>

        case 1:
            cursor_command = 0xc0 + LCD_column_pos;
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	3b40      	subs	r3, #64	; 0x40
 8002dc8:	73fb      	strb	r3, [r7, #15]
            break;
 8002dca:	e012      	b.n	8002df2 <LCD_SetCursor+0x76>

        case 2:
            cursor_command = 0x80 + LCD->LCD_Size.LCD_column + LCD_column_pos;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7c9a      	ldrb	r2, [r3, #18]
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	3b80      	subs	r3, #128	; 0x80
 8002dd8:	73fb      	strb	r3, [r7, #15]
            break;
 8002dda:	e00a      	b.n	8002df2 <LCD_SetCursor+0x76>

        case 3:
            cursor_command = 0xc0 + LCD->LCD_Size.LCD_column + LCD_column_pos;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7c9a      	ldrb	r2, [r3, #18]
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	4413      	add	r3, r2
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3b40      	subs	r3, #64	; 0x40
 8002de8:	73fb      	strb	r3, [r7, #15]
            break;
 8002dea:	e002      	b.n	8002df2 <LCD_SetCursor+0x76>
        default:
            break;
        }
    }
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <LCD_SetCursor+0x76>
            break;
 8002df0:	bf00      	nop
    LCD_SendCommand(LCD, cursor_command);
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff fe54 	bl	8002aa4 <LCD_SendCommand>
}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <LCD_SendString>:

void LCD_SendString(LCD_HandleTypeDef *LCD, char *LCD_string)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < LCD->LCD_Size.LCD_column; i++)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
 8002e12:	e00a      	b.n	8002e2a <LCD_SendString+0x26>
    {
        LCD_SendChar(LCD, LCD_string[i]);
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	4413      	add	r3, r2
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff fef6 	bl	8002c10 <LCD_SendChar>
    for (uint8_t i = 0; i < LCD->LCD_Size.LCD_column; i++)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	3301      	adds	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7c9b      	ldrb	r3, [r3, #18]
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d3ef      	bcc.n	8002e14 <LCD_SendString+0x10>
    }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <__errno>:
 8002e40:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <__errno+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000000c 	.word	0x2000000c

08002e4c <__libc_init_array>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	2600      	movs	r6, #0
 8002e50:	4d0c      	ldr	r5, [pc, #48]	; (8002e84 <__libc_init_array+0x38>)
 8002e52:	4c0d      	ldr	r4, [pc, #52]	; (8002e88 <__libc_init_array+0x3c>)
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	42a6      	cmp	r6, r4
 8002e5a:	d109      	bne.n	8002e70 <__libc_init_array+0x24>
 8002e5c:	f000 fc9c 	bl	8003798 <_init>
 8002e60:	2600      	movs	r6, #0
 8002e62:	4d0a      	ldr	r5, [pc, #40]	; (8002e8c <__libc_init_array+0x40>)
 8002e64:	4c0a      	ldr	r4, [pc, #40]	; (8002e90 <__libc_init_array+0x44>)
 8002e66:	1b64      	subs	r4, r4, r5
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	42a6      	cmp	r6, r4
 8002e6c:	d105      	bne.n	8002e7a <__libc_init_array+0x2e>
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e74:	4798      	blx	r3
 8002e76:	3601      	adds	r6, #1
 8002e78:	e7ee      	b.n	8002e58 <__libc_init_array+0xc>
 8002e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7e:	4798      	blx	r3
 8002e80:	3601      	adds	r6, #1
 8002e82:	e7f2      	b.n	8002e6a <__libc_init_array+0x1e>
 8002e84:	0800384c 	.word	0x0800384c
 8002e88:	0800384c 	.word	0x0800384c
 8002e8c:	0800384c 	.word	0x0800384c
 8002e90:	08003850 	.word	0x08003850

08002e94 <memset>:
 8002e94:	4603      	mov	r3, r0
 8002e96:	4402      	add	r2, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <siprintf>:
 8002ea4:	b40e      	push	{r1, r2, r3}
 8002ea6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002eaa:	b500      	push	{lr}
 8002eac:	b09c      	sub	sp, #112	; 0x70
 8002eae:	ab1d      	add	r3, sp, #116	; 0x74
 8002eb0:	9002      	str	r0, [sp, #8]
 8002eb2:	9006      	str	r0, [sp, #24]
 8002eb4:	9107      	str	r1, [sp, #28]
 8002eb6:	9104      	str	r1, [sp, #16]
 8002eb8:	4808      	ldr	r0, [pc, #32]	; (8002edc <siprintf+0x38>)
 8002eba:	4909      	ldr	r1, [pc, #36]	; (8002ee0 <siprintf+0x3c>)
 8002ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ec0:	9105      	str	r1, [sp, #20]
 8002ec2:	6800      	ldr	r0, [r0, #0]
 8002ec4:	a902      	add	r1, sp, #8
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	f000 f868 	bl	8002f9c <_svfiprintf_r>
 8002ecc:	2200      	movs	r2, #0
 8002ece:	9b02      	ldr	r3, [sp, #8]
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	b01c      	add	sp, #112	; 0x70
 8002ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ed8:	b003      	add	sp, #12
 8002eda:	4770      	bx	lr
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	ffff0208 	.word	0xffff0208

08002ee4 <__ssputs_r>:
 8002ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ee8:	688e      	ldr	r6, [r1, #8]
 8002eea:	4682      	mov	sl, r0
 8002eec:	429e      	cmp	r6, r3
 8002eee:	460c      	mov	r4, r1
 8002ef0:	4690      	mov	r8, r2
 8002ef2:	461f      	mov	r7, r3
 8002ef4:	d838      	bhi.n	8002f68 <__ssputs_r+0x84>
 8002ef6:	898a      	ldrh	r2, [r1, #12]
 8002ef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002efc:	d032      	beq.n	8002f64 <__ssputs_r+0x80>
 8002efe:	6825      	ldr	r5, [r4, #0]
 8002f00:	6909      	ldr	r1, [r1, #16]
 8002f02:	3301      	adds	r3, #1
 8002f04:	eba5 0901 	sub.w	r9, r5, r1
 8002f08:	6965      	ldr	r5, [r4, #20]
 8002f0a:	444b      	add	r3, r9
 8002f0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f14:	106d      	asrs	r5, r5, #1
 8002f16:	429d      	cmp	r5, r3
 8002f18:	bf38      	it	cc
 8002f1a:	461d      	movcc	r5, r3
 8002f1c:	0553      	lsls	r3, r2, #21
 8002f1e:	d531      	bpl.n	8002f84 <__ssputs_r+0xa0>
 8002f20:	4629      	mov	r1, r5
 8002f22:	f000 fb6f 	bl	8003604 <_malloc_r>
 8002f26:	4606      	mov	r6, r0
 8002f28:	b950      	cbnz	r0, 8002f40 <__ssputs_r+0x5c>
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f8ca 3000 	str.w	r3, [sl]
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3a:	81a3      	strh	r3, [r4, #12]
 8002f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f40:	464a      	mov	r2, r9
 8002f42:	6921      	ldr	r1, [r4, #16]
 8002f44:	f000 face 	bl	80034e4 <memcpy>
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f52:	81a3      	strh	r3, [r4, #12]
 8002f54:	6126      	str	r6, [r4, #16]
 8002f56:	444e      	add	r6, r9
 8002f58:	6026      	str	r6, [r4, #0]
 8002f5a:	463e      	mov	r6, r7
 8002f5c:	6165      	str	r5, [r4, #20]
 8002f5e:	eba5 0509 	sub.w	r5, r5, r9
 8002f62:	60a5      	str	r5, [r4, #8]
 8002f64:	42be      	cmp	r6, r7
 8002f66:	d900      	bls.n	8002f6a <__ssputs_r+0x86>
 8002f68:	463e      	mov	r6, r7
 8002f6a:	4632      	mov	r2, r6
 8002f6c:	4641      	mov	r1, r8
 8002f6e:	6820      	ldr	r0, [r4, #0]
 8002f70:	f000 fac6 	bl	8003500 <memmove>
 8002f74:	68a3      	ldr	r3, [r4, #8]
 8002f76:	2000      	movs	r0, #0
 8002f78:	1b9b      	subs	r3, r3, r6
 8002f7a:	60a3      	str	r3, [r4, #8]
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	4433      	add	r3, r6
 8002f80:	6023      	str	r3, [r4, #0]
 8002f82:	e7db      	b.n	8002f3c <__ssputs_r+0x58>
 8002f84:	462a      	mov	r2, r5
 8002f86:	f000 fbb1 	bl	80036ec <_realloc_r>
 8002f8a:	4606      	mov	r6, r0
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1e1      	bne.n	8002f54 <__ssputs_r+0x70>
 8002f90:	4650      	mov	r0, sl
 8002f92:	6921      	ldr	r1, [r4, #16]
 8002f94:	f000 face 	bl	8003534 <_free_r>
 8002f98:	e7c7      	b.n	8002f2a <__ssputs_r+0x46>
	...

08002f9c <_svfiprintf_r>:
 8002f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa0:	4698      	mov	r8, r3
 8002fa2:	898b      	ldrh	r3, [r1, #12]
 8002fa4:	4607      	mov	r7, r0
 8002fa6:	061b      	lsls	r3, r3, #24
 8002fa8:	460d      	mov	r5, r1
 8002faa:	4614      	mov	r4, r2
 8002fac:	b09d      	sub	sp, #116	; 0x74
 8002fae:	d50e      	bpl.n	8002fce <_svfiprintf_r+0x32>
 8002fb0:	690b      	ldr	r3, [r1, #16]
 8002fb2:	b963      	cbnz	r3, 8002fce <_svfiprintf_r+0x32>
 8002fb4:	2140      	movs	r1, #64	; 0x40
 8002fb6:	f000 fb25 	bl	8003604 <_malloc_r>
 8002fba:	6028      	str	r0, [r5, #0]
 8002fbc:	6128      	str	r0, [r5, #16]
 8002fbe:	b920      	cbnz	r0, 8002fca <_svfiprintf_r+0x2e>
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc8:	e0d1      	b.n	800316e <_svfiprintf_r+0x1d2>
 8002fca:	2340      	movs	r3, #64	; 0x40
 8002fcc:	616b      	str	r3, [r5, #20]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002fd8:	2330      	movs	r3, #48	; 0x30
 8002fda:	f04f 0901 	mov.w	r9, #1
 8002fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fe2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003188 <_svfiprintf_r+0x1ec>
 8002fe6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002fea:	4623      	mov	r3, r4
 8002fec:	469a      	mov	sl, r3
 8002fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ff2:	b10a      	cbz	r2, 8002ff8 <_svfiprintf_r+0x5c>
 8002ff4:	2a25      	cmp	r2, #37	; 0x25
 8002ff6:	d1f9      	bne.n	8002fec <_svfiprintf_r+0x50>
 8002ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8002ffc:	d00b      	beq.n	8003016 <_svfiprintf_r+0x7a>
 8002ffe:	465b      	mov	r3, fp
 8003000:	4622      	mov	r2, r4
 8003002:	4629      	mov	r1, r5
 8003004:	4638      	mov	r0, r7
 8003006:	f7ff ff6d 	bl	8002ee4 <__ssputs_r>
 800300a:	3001      	adds	r0, #1
 800300c:	f000 80aa 	beq.w	8003164 <_svfiprintf_r+0x1c8>
 8003010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003012:	445a      	add	r2, fp
 8003014:	9209      	str	r2, [sp, #36]	; 0x24
 8003016:	f89a 3000 	ldrb.w	r3, [sl]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80a2 	beq.w	8003164 <_svfiprintf_r+0x1c8>
 8003020:	2300      	movs	r3, #0
 8003022:	f04f 32ff 	mov.w	r2, #4294967295
 8003026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800302a:	f10a 0a01 	add.w	sl, sl, #1
 800302e:	9304      	str	r3, [sp, #16]
 8003030:	9307      	str	r3, [sp, #28]
 8003032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003036:	931a      	str	r3, [sp, #104]	; 0x68
 8003038:	4654      	mov	r4, sl
 800303a:	2205      	movs	r2, #5
 800303c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003040:	4851      	ldr	r0, [pc, #324]	; (8003188 <_svfiprintf_r+0x1ec>)
 8003042:	f000 fa41 	bl	80034c8 <memchr>
 8003046:	9a04      	ldr	r2, [sp, #16]
 8003048:	b9d8      	cbnz	r0, 8003082 <_svfiprintf_r+0xe6>
 800304a:	06d0      	lsls	r0, r2, #27
 800304c:	bf44      	itt	mi
 800304e:	2320      	movmi	r3, #32
 8003050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003054:	0711      	lsls	r1, r2, #28
 8003056:	bf44      	itt	mi
 8003058:	232b      	movmi	r3, #43	; 0x2b
 800305a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800305e:	f89a 3000 	ldrb.w	r3, [sl]
 8003062:	2b2a      	cmp	r3, #42	; 0x2a
 8003064:	d015      	beq.n	8003092 <_svfiprintf_r+0xf6>
 8003066:	4654      	mov	r4, sl
 8003068:	2000      	movs	r0, #0
 800306a:	f04f 0c0a 	mov.w	ip, #10
 800306e:	9a07      	ldr	r2, [sp, #28]
 8003070:	4621      	mov	r1, r4
 8003072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003076:	3b30      	subs	r3, #48	; 0x30
 8003078:	2b09      	cmp	r3, #9
 800307a:	d94e      	bls.n	800311a <_svfiprintf_r+0x17e>
 800307c:	b1b0      	cbz	r0, 80030ac <_svfiprintf_r+0x110>
 800307e:	9207      	str	r2, [sp, #28]
 8003080:	e014      	b.n	80030ac <_svfiprintf_r+0x110>
 8003082:	eba0 0308 	sub.w	r3, r0, r8
 8003086:	fa09 f303 	lsl.w	r3, r9, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	46a2      	mov	sl, r4
 800308e:	9304      	str	r3, [sp, #16]
 8003090:	e7d2      	b.n	8003038 <_svfiprintf_r+0x9c>
 8003092:	9b03      	ldr	r3, [sp, #12]
 8003094:	1d19      	adds	r1, r3, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	9103      	str	r1, [sp, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	bfbb      	ittet	lt
 800309e:	425b      	neglt	r3, r3
 80030a0:	f042 0202 	orrlt.w	r2, r2, #2
 80030a4:	9307      	strge	r3, [sp, #28]
 80030a6:	9307      	strlt	r3, [sp, #28]
 80030a8:	bfb8      	it	lt
 80030aa:	9204      	strlt	r2, [sp, #16]
 80030ac:	7823      	ldrb	r3, [r4, #0]
 80030ae:	2b2e      	cmp	r3, #46	; 0x2e
 80030b0:	d10c      	bne.n	80030cc <_svfiprintf_r+0x130>
 80030b2:	7863      	ldrb	r3, [r4, #1]
 80030b4:	2b2a      	cmp	r3, #42	; 0x2a
 80030b6:	d135      	bne.n	8003124 <_svfiprintf_r+0x188>
 80030b8:	9b03      	ldr	r3, [sp, #12]
 80030ba:	3402      	adds	r4, #2
 80030bc:	1d1a      	adds	r2, r3, #4
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	9203      	str	r2, [sp, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bfb8      	it	lt
 80030c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80030ca:	9305      	str	r3, [sp, #20]
 80030cc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800318c <_svfiprintf_r+0x1f0>
 80030d0:	2203      	movs	r2, #3
 80030d2:	4650      	mov	r0, sl
 80030d4:	7821      	ldrb	r1, [r4, #0]
 80030d6:	f000 f9f7 	bl	80034c8 <memchr>
 80030da:	b140      	cbz	r0, 80030ee <_svfiprintf_r+0x152>
 80030dc:	2340      	movs	r3, #64	; 0x40
 80030de:	eba0 000a 	sub.w	r0, r0, sl
 80030e2:	fa03 f000 	lsl.w	r0, r3, r0
 80030e6:	9b04      	ldr	r3, [sp, #16]
 80030e8:	3401      	adds	r4, #1
 80030ea:	4303      	orrs	r3, r0
 80030ec:	9304      	str	r3, [sp, #16]
 80030ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f2:	2206      	movs	r2, #6
 80030f4:	4826      	ldr	r0, [pc, #152]	; (8003190 <_svfiprintf_r+0x1f4>)
 80030f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80030fa:	f000 f9e5 	bl	80034c8 <memchr>
 80030fe:	2800      	cmp	r0, #0
 8003100:	d038      	beq.n	8003174 <_svfiprintf_r+0x1d8>
 8003102:	4b24      	ldr	r3, [pc, #144]	; (8003194 <_svfiprintf_r+0x1f8>)
 8003104:	bb1b      	cbnz	r3, 800314e <_svfiprintf_r+0x1b2>
 8003106:	9b03      	ldr	r3, [sp, #12]
 8003108:	3307      	adds	r3, #7
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	3308      	adds	r3, #8
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003114:	4433      	add	r3, r6
 8003116:	9309      	str	r3, [sp, #36]	; 0x24
 8003118:	e767      	b.n	8002fea <_svfiprintf_r+0x4e>
 800311a:	460c      	mov	r4, r1
 800311c:	2001      	movs	r0, #1
 800311e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003122:	e7a5      	b.n	8003070 <_svfiprintf_r+0xd4>
 8003124:	2300      	movs	r3, #0
 8003126:	f04f 0c0a 	mov.w	ip, #10
 800312a:	4619      	mov	r1, r3
 800312c:	3401      	adds	r4, #1
 800312e:	9305      	str	r3, [sp, #20]
 8003130:	4620      	mov	r0, r4
 8003132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003136:	3a30      	subs	r2, #48	; 0x30
 8003138:	2a09      	cmp	r2, #9
 800313a:	d903      	bls.n	8003144 <_svfiprintf_r+0x1a8>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0c5      	beq.n	80030cc <_svfiprintf_r+0x130>
 8003140:	9105      	str	r1, [sp, #20]
 8003142:	e7c3      	b.n	80030cc <_svfiprintf_r+0x130>
 8003144:	4604      	mov	r4, r0
 8003146:	2301      	movs	r3, #1
 8003148:	fb0c 2101 	mla	r1, ip, r1, r2
 800314c:	e7f0      	b.n	8003130 <_svfiprintf_r+0x194>
 800314e:	ab03      	add	r3, sp, #12
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	462a      	mov	r2, r5
 8003154:	4638      	mov	r0, r7
 8003156:	4b10      	ldr	r3, [pc, #64]	; (8003198 <_svfiprintf_r+0x1fc>)
 8003158:	a904      	add	r1, sp, #16
 800315a:	f3af 8000 	nop.w
 800315e:	1c42      	adds	r2, r0, #1
 8003160:	4606      	mov	r6, r0
 8003162:	d1d6      	bne.n	8003112 <_svfiprintf_r+0x176>
 8003164:	89ab      	ldrh	r3, [r5, #12]
 8003166:	065b      	lsls	r3, r3, #25
 8003168:	f53f af2c 	bmi.w	8002fc4 <_svfiprintf_r+0x28>
 800316c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800316e:	b01d      	add	sp, #116	; 0x74
 8003170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003174:	ab03      	add	r3, sp, #12
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	462a      	mov	r2, r5
 800317a:	4638      	mov	r0, r7
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <_svfiprintf_r+0x1fc>)
 800317e:	a904      	add	r1, sp, #16
 8003180:	f000 f87c 	bl	800327c <_printf_i>
 8003184:	e7eb      	b.n	800315e <_svfiprintf_r+0x1c2>
 8003186:	bf00      	nop
 8003188:	08003816 	.word	0x08003816
 800318c:	0800381c 	.word	0x0800381c
 8003190:	08003820 	.word	0x08003820
 8003194:	00000000 	.word	0x00000000
 8003198:	08002ee5 	.word	0x08002ee5

0800319c <_printf_common>:
 800319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031a0:	4616      	mov	r6, r2
 80031a2:	4699      	mov	r9, r3
 80031a4:	688a      	ldr	r2, [r1, #8]
 80031a6:	690b      	ldr	r3, [r1, #16]
 80031a8:	4607      	mov	r7, r0
 80031aa:	4293      	cmp	r3, r2
 80031ac:	bfb8      	it	lt
 80031ae:	4613      	movlt	r3, r2
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031b6:	460c      	mov	r4, r1
 80031b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031bc:	b10a      	cbz	r2, 80031c2 <_printf_common+0x26>
 80031be:	3301      	adds	r3, #1
 80031c0:	6033      	str	r3, [r6, #0]
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	0699      	lsls	r1, r3, #26
 80031c6:	bf42      	ittt	mi
 80031c8:	6833      	ldrmi	r3, [r6, #0]
 80031ca:	3302      	addmi	r3, #2
 80031cc:	6033      	strmi	r3, [r6, #0]
 80031ce:	6825      	ldr	r5, [r4, #0]
 80031d0:	f015 0506 	ands.w	r5, r5, #6
 80031d4:	d106      	bne.n	80031e4 <_printf_common+0x48>
 80031d6:	f104 0a19 	add.w	sl, r4, #25
 80031da:	68e3      	ldr	r3, [r4, #12]
 80031dc:	6832      	ldr	r2, [r6, #0]
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	42ab      	cmp	r3, r5
 80031e2:	dc28      	bgt.n	8003236 <_printf_common+0x9a>
 80031e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031e8:	1e13      	subs	r3, r2, #0
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	bf18      	it	ne
 80031ee:	2301      	movne	r3, #1
 80031f0:	0692      	lsls	r2, r2, #26
 80031f2:	d42d      	bmi.n	8003250 <_printf_common+0xb4>
 80031f4:	4649      	mov	r1, r9
 80031f6:	4638      	mov	r0, r7
 80031f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031fc:	47c0      	blx	r8
 80031fe:	3001      	adds	r0, #1
 8003200:	d020      	beq.n	8003244 <_printf_common+0xa8>
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	68e5      	ldr	r5, [r4, #12]
 8003206:	f003 0306 	and.w	r3, r3, #6
 800320a:	2b04      	cmp	r3, #4
 800320c:	bf18      	it	ne
 800320e:	2500      	movne	r5, #0
 8003210:	6832      	ldr	r2, [r6, #0]
 8003212:	f04f 0600 	mov.w	r6, #0
 8003216:	68a3      	ldr	r3, [r4, #8]
 8003218:	bf08      	it	eq
 800321a:	1aad      	subeq	r5, r5, r2
 800321c:	6922      	ldr	r2, [r4, #16]
 800321e:	bf08      	it	eq
 8003220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003224:	4293      	cmp	r3, r2
 8003226:	bfc4      	itt	gt
 8003228:	1a9b      	subgt	r3, r3, r2
 800322a:	18ed      	addgt	r5, r5, r3
 800322c:	341a      	adds	r4, #26
 800322e:	42b5      	cmp	r5, r6
 8003230:	d11a      	bne.n	8003268 <_printf_common+0xcc>
 8003232:	2000      	movs	r0, #0
 8003234:	e008      	b.n	8003248 <_printf_common+0xac>
 8003236:	2301      	movs	r3, #1
 8003238:	4652      	mov	r2, sl
 800323a:	4649      	mov	r1, r9
 800323c:	4638      	mov	r0, r7
 800323e:	47c0      	blx	r8
 8003240:	3001      	adds	r0, #1
 8003242:	d103      	bne.n	800324c <_printf_common+0xb0>
 8003244:	f04f 30ff 	mov.w	r0, #4294967295
 8003248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800324c:	3501      	adds	r5, #1
 800324e:	e7c4      	b.n	80031da <_printf_common+0x3e>
 8003250:	2030      	movs	r0, #48	; 0x30
 8003252:	18e1      	adds	r1, r4, r3
 8003254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003258:	1c5a      	adds	r2, r3, #1
 800325a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800325e:	4422      	add	r2, r4
 8003260:	3302      	adds	r3, #2
 8003262:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003266:	e7c5      	b.n	80031f4 <_printf_common+0x58>
 8003268:	2301      	movs	r3, #1
 800326a:	4622      	mov	r2, r4
 800326c:	4649      	mov	r1, r9
 800326e:	4638      	mov	r0, r7
 8003270:	47c0      	blx	r8
 8003272:	3001      	adds	r0, #1
 8003274:	d0e6      	beq.n	8003244 <_printf_common+0xa8>
 8003276:	3601      	adds	r6, #1
 8003278:	e7d9      	b.n	800322e <_printf_common+0x92>
	...

0800327c <_printf_i>:
 800327c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003280:	7e0f      	ldrb	r7, [r1, #24]
 8003282:	4691      	mov	r9, r2
 8003284:	2f78      	cmp	r7, #120	; 0x78
 8003286:	4680      	mov	r8, r0
 8003288:	460c      	mov	r4, r1
 800328a:	469a      	mov	sl, r3
 800328c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800328e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003292:	d807      	bhi.n	80032a4 <_printf_i+0x28>
 8003294:	2f62      	cmp	r7, #98	; 0x62
 8003296:	d80a      	bhi.n	80032ae <_printf_i+0x32>
 8003298:	2f00      	cmp	r7, #0
 800329a:	f000 80d9 	beq.w	8003450 <_printf_i+0x1d4>
 800329e:	2f58      	cmp	r7, #88	; 0x58
 80032a0:	f000 80a4 	beq.w	80033ec <_printf_i+0x170>
 80032a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032ac:	e03a      	b.n	8003324 <_printf_i+0xa8>
 80032ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032b2:	2b15      	cmp	r3, #21
 80032b4:	d8f6      	bhi.n	80032a4 <_printf_i+0x28>
 80032b6:	a101      	add	r1, pc, #4	; (adr r1, 80032bc <_printf_i+0x40>)
 80032b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032bc:	08003315 	.word	0x08003315
 80032c0:	08003329 	.word	0x08003329
 80032c4:	080032a5 	.word	0x080032a5
 80032c8:	080032a5 	.word	0x080032a5
 80032cc:	080032a5 	.word	0x080032a5
 80032d0:	080032a5 	.word	0x080032a5
 80032d4:	08003329 	.word	0x08003329
 80032d8:	080032a5 	.word	0x080032a5
 80032dc:	080032a5 	.word	0x080032a5
 80032e0:	080032a5 	.word	0x080032a5
 80032e4:	080032a5 	.word	0x080032a5
 80032e8:	08003437 	.word	0x08003437
 80032ec:	08003359 	.word	0x08003359
 80032f0:	08003419 	.word	0x08003419
 80032f4:	080032a5 	.word	0x080032a5
 80032f8:	080032a5 	.word	0x080032a5
 80032fc:	08003459 	.word	0x08003459
 8003300:	080032a5 	.word	0x080032a5
 8003304:	08003359 	.word	0x08003359
 8003308:	080032a5 	.word	0x080032a5
 800330c:	080032a5 	.word	0x080032a5
 8003310:	08003421 	.word	0x08003421
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	1d1a      	adds	r2, r3, #4
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	602a      	str	r2, [r5, #0]
 800331c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003324:	2301      	movs	r3, #1
 8003326:	e0a4      	b.n	8003472 <_printf_i+0x1f6>
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	6829      	ldr	r1, [r5, #0]
 800332c:	0606      	lsls	r6, r0, #24
 800332e:	f101 0304 	add.w	r3, r1, #4
 8003332:	d50a      	bpl.n	800334a <_printf_i+0xce>
 8003334:	680e      	ldr	r6, [r1, #0]
 8003336:	602b      	str	r3, [r5, #0]
 8003338:	2e00      	cmp	r6, #0
 800333a:	da03      	bge.n	8003344 <_printf_i+0xc8>
 800333c:	232d      	movs	r3, #45	; 0x2d
 800333e:	4276      	negs	r6, r6
 8003340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003344:	230a      	movs	r3, #10
 8003346:	485e      	ldr	r0, [pc, #376]	; (80034c0 <_printf_i+0x244>)
 8003348:	e019      	b.n	800337e <_printf_i+0x102>
 800334a:	680e      	ldr	r6, [r1, #0]
 800334c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003350:	602b      	str	r3, [r5, #0]
 8003352:	bf18      	it	ne
 8003354:	b236      	sxthne	r6, r6
 8003356:	e7ef      	b.n	8003338 <_printf_i+0xbc>
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	6820      	ldr	r0, [r4, #0]
 800335c:	1d19      	adds	r1, r3, #4
 800335e:	6029      	str	r1, [r5, #0]
 8003360:	0601      	lsls	r1, r0, #24
 8003362:	d501      	bpl.n	8003368 <_printf_i+0xec>
 8003364:	681e      	ldr	r6, [r3, #0]
 8003366:	e002      	b.n	800336e <_printf_i+0xf2>
 8003368:	0646      	lsls	r6, r0, #25
 800336a:	d5fb      	bpl.n	8003364 <_printf_i+0xe8>
 800336c:	881e      	ldrh	r6, [r3, #0]
 800336e:	2f6f      	cmp	r7, #111	; 0x6f
 8003370:	bf0c      	ite	eq
 8003372:	2308      	moveq	r3, #8
 8003374:	230a      	movne	r3, #10
 8003376:	4852      	ldr	r0, [pc, #328]	; (80034c0 <_printf_i+0x244>)
 8003378:	2100      	movs	r1, #0
 800337a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800337e:	6865      	ldr	r5, [r4, #4]
 8003380:	2d00      	cmp	r5, #0
 8003382:	bfa8      	it	ge
 8003384:	6821      	ldrge	r1, [r4, #0]
 8003386:	60a5      	str	r5, [r4, #8]
 8003388:	bfa4      	itt	ge
 800338a:	f021 0104 	bicge.w	r1, r1, #4
 800338e:	6021      	strge	r1, [r4, #0]
 8003390:	b90e      	cbnz	r6, 8003396 <_printf_i+0x11a>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d04d      	beq.n	8003432 <_printf_i+0x1b6>
 8003396:	4615      	mov	r5, r2
 8003398:	fbb6 f1f3 	udiv	r1, r6, r3
 800339c:	fb03 6711 	mls	r7, r3, r1, r6
 80033a0:	5dc7      	ldrb	r7, [r0, r7]
 80033a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033a6:	4637      	mov	r7, r6
 80033a8:	42bb      	cmp	r3, r7
 80033aa:	460e      	mov	r6, r1
 80033ac:	d9f4      	bls.n	8003398 <_printf_i+0x11c>
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d10b      	bne.n	80033ca <_printf_i+0x14e>
 80033b2:	6823      	ldr	r3, [r4, #0]
 80033b4:	07de      	lsls	r6, r3, #31
 80033b6:	d508      	bpl.n	80033ca <_printf_i+0x14e>
 80033b8:	6923      	ldr	r3, [r4, #16]
 80033ba:	6861      	ldr	r1, [r4, #4]
 80033bc:	4299      	cmp	r1, r3
 80033be:	bfde      	ittt	le
 80033c0:	2330      	movle	r3, #48	; 0x30
 80033c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033ca:	1b52      	subs	r2, r2, r5
 80033cc:	6122      	str	r2, [r4, #16]
 80033ce:	464b      	mov	r3, r9
 80033d0:	4621      	mov	r1, r4
 80033d2:	4640      	mov	r0, r8
 80033d4:	f8cd a000 	str.w	sl, [sp]
 80033d8:	aa03      	add	r2, sp, #12
 80033da:	f7ff fedf 	bl	800319c <_printf_common>
 80033de:	3001      	adds	r0, #1
 80033e0:	d14c      	bne.n	800347c <_printf_i+0x200>
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295
 80033e6:	b004      	add	sp, #16
 80033e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ec:	4834      	ldr	r0, [pc, #208]	; (80034c0 <_printf_i+0x244>)
 80033ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80033f2:	6829      	ldr	r1, [r5, #0]
 80033f4:	6823      	ldr	r3, [r4, #0]
 80033f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80033fa:	6029      	str	r1, [r5, #0]
 80033fc:	061d      	lsls	r5, r3, #24
 80033fe:	d514      	bpl.n	800342a <_printf_i+0x1ae>
 8003400:	07df      	lsls	r7, r3, #31
 8003402:	bf44      	itt	mi
 8003404:	f043 0320 	orrmi.w	r3, r3, #32
 8003408:	6023      	strmi	r3, [r4, #0]
 800340a:	b91e      	cbnz	r6, 8003414 <_printf_i+0x198>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	f023 0320 	bic.w	r3, r3, #32
 8003412:	6023      	str	r3, [r4, #0]
 8003414:	2310      	movs	r3, #16
 8003416:	e7af      	b.n	8003378 <_printf_i+0xfc>
 8003418:	6823      	ldr	r3, [r4, #0]
 800341a:	f043 0320 	orr.w	r3, r3, #32
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	2378      	movs	r3, #120	; 0x78
 8003422:	4828      	ldr	r0, [pc, #160]	; (80034c4 <_printf_i+0x248>)
 8003424:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003428:	e7e3      	b.n	80033f2 <_printf_i+0x176>
 800342a:	0659      	lsls	r1, r3, #25
 800342c:	bf48      	it	mi
 800342e:	b2b6      	uxthmi	r6, r6
 8003430:	e7e6      	b.n	8003400 <_printf_i+0x184>
 8003432:	4615      	mov	r5, r2
 8003434:	e7bb      	b.n	80033ae <_printf_i+0x132>
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	6826      	ldr	r6, [r4, #0]
 800343a:	1d18      	adds	r0, r3, #4
 800343c:	6961      	ldr	r1, [r4, #20]
 800343e:	6028      	str	r0, [r5, #0]
 8003440:	0635      	lsls	r5, r6, #24
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	d501      	bpl.n	800344a <_printf_i+0x1ce>
 8003446:	6019      	str	r1, [r3, #0]
 8003448:	e002      	b.n	8003450 <_printf_i+0x1d4>
 800344a:	0670      	lsls	r0, r6, #25
 800344c:	d5fb      	bpl.n	8003446 <_printf_i+0x1ca>
 800344e:	8019      	strh	r1, [r3, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	4615      	mov	r5, r2
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	e7ba      	b.n	80033ce <_printf_i+0x152>
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	2100      	movs	r1, #0
 800345c:	1d1a      	adds	r2, r3, #4
 800345e:	602a      	str	r2, [r5, #0]
 8003460:	681d      	ldr	r5, [r3, #0]
 8003462:	6862      	ldr	r2, [r4, #4]
 8003464:	4628      	mov	r0, r5
 8003466:	f000 f82f 	bl	80034c8 <memchr>
 800346a:	b108      	cbz	r0, 8003470 <_printf_i+0x1f4>
 800346c:	1b40      	subs	r0, r0, r5
 800346e:	6060      	str	r0, [r4, #4]
 8003470:	6863      	ldr	r3, [r4, #4]
 8003472:	6123      	str	r3, [r4, #16]
 8003474:	2300      	movs	r3, #0
 8003476:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800347a:	e7a8      	b.n	80033ce <_printf_i+0x152>
 800347c:	462a      	mov	r2, r5
 800347e:	4649      	mov	r1, r9
 8003480:	4640      	mov	r0, r8
 8003482:	6923      	ldr	r3, [r4, #16]
 8003484:	47d0      	blx	sl
 8003486:	3001      	adds	r0, #1
 8003488:	d0ab      	beq.n	80033e2 <_printf_i+0x166>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	079b      	lsls	r3, r3, #30
 800348e:	d413      	bmi.n	80034b8 <_printf_i+0x23c>
 8003490:	68e0      	ldr	r0, [r4, #12]
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	4298      	cmp	r0, r3
 8003496:	bfb8      	it	lt
 8003498:	4618      	movlt	r0, r3
 800349a:	e7a4      	b.n	80033e6 <_printf_i+0x16a>
 800349c:	2301      	movs	r3, #1
 800349e:	4632      	mov	r2, r6
 80034a0:	4649      	mov	r1, r9
 80034a2:	4640      	mov	r0, r8
 80034a4:	47d0      	blx	sl
 80034a6:	3001      	adds	r0, #1
 80034a8:	d09b      	beq.n	80033e2 <_printf_i+0x166>
 80034aa:	3501      	adds	r5, #1
 80034ac:	68e3      	ldr	r3, [r4, #12]
 80034ae:	9903      	ldr	r1, [sp, #12]
 80034b0:	1a5b      	subs	r3, r3, r1
 80034b2:	42ab      	cmp	r3, r5
 80034b4:	dcf2      	bgt.n	800349c <_printf_i+0x220>
 80034b6:	e7eb      	b.n	8003490 <_printf_i+0x214>
 80034b8:	2500      	movs	r5, #0
 80034ba:	f104 0619 	add.w	r6, r4, #25
 80034be:	e7f5      	b.n	80034ac <_printf_i+0x230>
 80034c0:	08003827 	.word	0x08003827
 80034c4:	08003838 	.word	0x08003838

080034c8 <memchr>:
 80034c8:	4603      	mov	r3, r0
 80034ca:	b510      	push	{r4, lr}
 80034cc:	b2c9      	uxtb	r1, r1
 80034ce:	4402      	add	r2, r0
 80034d0:	4293      	cmp	r3, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	d101      	bne.n	80034da <memchr+0x12>
 80034d6:	2000      	movs	r0, #0
 80034d8:	e003      	b.n	80034e2 <memchr+0x1a>
 80034da:	7804      	ldrb	r4, [r0, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	428c      	cmp	r4, r1
 80034e0:	d1f6      	bne.n	80034d0 <memchr+0x8>
 80034e2:	bd10      	pop	{r4, pc}

080034e4 <memcpy>:
 80034e4:	440a      	add	r2, r1
 80034e6:	4291      	cmp	r1, r2
 80034e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80034ec:	d100      	bne.n	80034f0 <memcpy+0xc>
 80034ee:	4770      	bx	lr
 80034f0:	b510      	push	{r4, lr}
 80034f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034f6:	4291      	cmp	r1, r2
 80034f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034fc:	d1f9      	bne.n	80034f2 <memcpy+0xe>
 80034fe:	bd10      	pop	{r4, pc}

08003500 <memmove>:
 8003500:	4288      	cmp	r0, r1
 8003502:	b510      	push	{r4, lr}
 8003504:	eb01 0402 	add.w	r4, r1, r2
 8003508:	d902      	bls.n	8003510 <memmove+0x10>
 800350a:	4284      	cmp	r4, r0
 800350c:	4623      	mov	r3, r4
 800350e:	d807      	bhi.n	8003520 <memmove+0x20>
 8003510:	1e43      	subs	r3, r0, #1
 8003512:	42a1      	cmp	r1, r4
 8003514:	d008      	beq.n	8003528 <memmove+0x28>
 8003516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800351a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800351e:	e7f8      	b.n	8003512 <memmove+0x12>
 8003520:	4601      	mov	r1, r0
 8003522:	4402      	add	r2, r0
 8003524:	428a      	cmp	r2, r1
 8003526:	d100      	bne.n	800352a <memmove+0x2a>
 8003528:	bd10      	pop	{r4, pc}
 800352a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800352e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003532:	e7f7      	b.n	8003524 <memmove+0x24>

08003534 <_free_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	4605      	mov	r5, r0
 8003538:	2900      	cmp	r1, #0
 800353a:	d040      	beq.n	80035be <_free_r+0x8a>
 800353c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003540:	1f0c      	subs	r4, r1, #4
 8003542:	2b00      	cmp	r3, #0
 8003544:	bfb8      	it	lt
 8003546:	18e4      	addlt	r4, r4, r3
 8003548:	f000 f910 	bl	800376c <__malloc_lock>
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <_free_r+0x8c>)
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	b933      	cbnz	r3, 8003560 <_free_r+0x2c>
 8003552:	6063      	str	r3, [r4, #4]
 8003554:	6014      	str	r4, [r2, #0]
 8003556:	4628      	mov	r0, r5
 8003558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800355c:	f000 b90c 	b.w	8003778 <__malloc_unlock>
 8003560:	42a3      	cmp	r3, r4
 8003562:	d908      	bls.n	8003576 <_free_r+0x42>
 8003564:	6820      	ldr	r0, [r4, #0]
 8003566:	1821      	adds	r1, r4, r0
 8003568:	428b      	cmp	r3, r1
 800356a:	bf01      	itttt	eq
 800356c:	6819      	ldreq	r1, [r3, #0]
 800356e:	685b      	ldreq	r3, [r3, #4]
 8003570:	1809      	addeq	r1, r1, r0
 8003572:	6021      	streq	r1, [r4, #0]
 8003574:	e7ed      	b.n	8003552 <_free_r+0x1e>
 8003576:	461a      	mov	r2, r3
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b10b      	cbz	r3, 8003580 <_free_r+0x4c>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d9fa      	bls.n	8003576 <_free_r+0x42>
 8003580:	6811      	ldr	r1, [r2, #0]
 8003582:	1850      	adds	r0, r2, r1
 8003584:	42a0      	cmp	r0, r4
 8003586:	d10b      	bne.n	80035a0 <_free_r+0x6c>
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	4401      	add	r1, r0
 800358c:	1850      	adds	r0, r2, r1
 800358e:	4283      	cmp	r3, r0
 8003590:	6011      	str	r1, [r2, #0]
 8003592:	d1e0      	bne.n	8003556 <_free_r+0x22>
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4401      	add	r1, r0
 800359a:	6011      	str	r1, [r2, #0]
 800359c:	6053      	str	r3, [r2, #4]
 800359e:	e7da      	b.n	8003556 <_free_r+0x22>
 80035a0:	d902      	bls.n	80035a8 <_free_r+0x74>
 80035a2:	230c      	movs	r3, #12
 80035a4:	602b      	str	r3, [r5, #0]
 80035a6:	e7d6      	b.n	8003556 <_free_r+0x22>
 80035a8:	6820      	ldr	r0, [r4, #0]
 80035aa:	1821      	adds	r1, r4, r0
 80035ac:	428b      	cmp	r3, r1
 80035ae:	bf01      	itttt	eq
 80035b0:	6819      	ldreq	r1, [r3, #0]
 80035b2:	685b      	ldreq	r3, [r3, #4]
 80035b4:	1809      	addeq	r1, r1, r0
 80035b6:	6021      	streq	r1, [r4, #0]
 80035b8:	6063      	str	r3, [r4, #4]
 80035ba:	6054      	str	r4, [r2, #4]
 80035bc:	e7cb      	b.n	8003556 <_free_r+0x22>
 80035be:	bd38      	pop	{r3, r4, r5, pc}
 80035c0:	200001a4 	.word	0x200001a4

080035c4 <sbrk_aligned>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	4e0e      	ldr	r6, [pc, #56]	; (8003600 <sbrk_aligned+0x3c>)
 80035c8:	460c      	mov	r4, r1
 80035ca:	6831      	ldr	r1, [r6, #0]
 80035cc:	4605      	mov	r5, r0
 80035ce:	b911      	cbnz	r1, 80035d6 <sbrk_aligned+0x12>
 80035d0:	f000 f8bc 	bl	800374c <_sbrk_r>
 80035d4:	6030      	str	r0, [r6, #0]
 80035d6:	4621      	mov	r1, r4
 80035d8:	4628      	mov	r0, r5
 80035da:	f000 f8b7 	bl	800374c <_sbrk_r>
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	d00a      	beq.n	80035f8 <sbrk_aligned+0x34>
 80035e2:	1cc4      	adds	r4, r0, #3
 80035e4:	f024 0403 	bic.w	r4, r4, #3
 80035e8:	42a0      	cmp	r0, r4
 80035ea:	d007      	beq.n	80035fc <sbrk_aligned+0x38>
 80035ec:	1a21      	subs	r1, r4, r0
 80035ee:	4628      	mov	r0, r5
 80035f0:	f000 f8ac 	bl	800374c <_sbrk_r>
 80035f4:	3001      	adds	r0, #1
 80035f6:	d101      	bne.n	80035fc <sbrk_aligned+0x38>
 80035f8:	f04f 34ff 	mov.w	r4, #4294967295
 80035fc:	4620      	mov	r0, r4
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
 8003600:	200001a8 	.word	0x200001a8

08003604 <_malloc_r>:
 8003604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003608:	1ccd      	adds	r5, r1, #3
 800360a:	f025 0503 	bic.w	r5, r5, #3
 800360e:	3508      	adds	r5, #8
 8003610:	2d0c      	cmp	r5, #12
 8003612:	bf38      	it	cc
 8003614:	250c      	movcc	r5, #12
 8003616:	2d00      	cmp	r5, #0
 8003618:	4607      	mov	r7, r0
 800361a:	db01      	blt.n	8003620 <_malloc_r+0x1c>
 800361c:	42a9      	cmp	r1, r5
 800361e:	d905      	bls.n	800362c <_malloc_r+0x28>
 8003620:	230c      	movs	r3, #12
 8003622:	2600      	movs	r6, #0
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4630      	mov	r0, r6
 8003628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800362c:	4e2e      	ldr	r6, [pc, #184]	; (80036e8 <_malloc_r+0xe4>)
 800362e:	f000 f89d 	bl	800376c <__malloc_lock>
 8003632:	6833      	ldr	r3, [r6, #0]
 8003634:	461c      	mov	r4, r3
 8003636:	bb34      	cbnz	r4, 8003686 <_malloc_r+0x82>
 8003638:	4629      	mov	r1, r5
 800363a:	4638      	mov	r0, r7
 800363c:	f7ff ffc2 	bl	80035c4 <sbrk_aligned>
 8003640:	1c43      	adds	r3, r0, #1
 8003642:	4604      	mov	r4, r0
 8003644:	d14d      	bne.n	80036e2 <_malloc_r+0xde>
 8003646:	6834      	ldr	r4, [r6, #0]
 8003648:	4626      	mov	r6, r4
 800364a:	2e00      	cmp	r6, #0
 800364c:	d140      	bne.n	80036d0 <_malloc_r+0xcc>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	4631      	mov	r1, r6
 8003652:	4638      	mov	r0, r7
 8003654:	eb04 0803 	add.w	r8, r4, r3
 8003658:	f000 f878 	bl	800374c <_sbrk_r>
 800365c:	4580      	cmp	r8, r0
 800365e:	d13a      	bne.n	80036d6 <_malloc_r+0xd2>
 8003660:	6821      	ldr	r1, [r4, #0]
 8003662:	3503      	adds	r5, #3
 8003664:	1a6d      	subs	r5, r5, r1
 8003666:	f025 0503 	bic.w	r5, r5, #3
 800366a:	3508      	adds	r5, #8
 800366c:	2d0c      	cmp	r5, #12
 800366e:	bf38      	it	cc
 8003670:	250c      	movcc	r5, #12
 8003672:	4638      	mov	r0, r7
 8003674:	4629      	mov	r1, r5
 8003676:	f7ff ffa5 	bl	80035c4 <sbrk_aligned>
 800367a:	3001      	adds	r0, #1
 800367c:	d02b      	beq.n	80036d6 <_malloc_r+0xd2>
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	442b      	add	r3, r5
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	e00e      	b.n	80036a4 <_malloc_r+0xa0>
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	1b52      	subs	r2, r2, r5
 800368a:	d41e      	bmi.n	80036ca <_malloc_r+0xc6>
 800368c:	2a0b      	cmp	r2, #11
 800368e:	d916      	bls.n	80036be <_malloc_r+0xba>
 8003690:	1961      	adds	r1, r4, r5
 8003692:	42a3      	cmp	r3, r4
 8003694:	6025      	str	r5, [r4, #0]
 8003696:	bf18      	it	ne
 8003698:	6059      	strne	r1, [r3, #4]
 800369a:	6863      	ldr	r3, [r4, #4]
 800369c:	bf08      	it	eq
 800369e:	6031      	streq	r1, [r6, #0]
 80036a0:	5162      	str	r2, [r4, r5]
 80036a2:	604b      	str	r3, [r1, #4]
 80036a4:	4638      	mov	r0, r7
 80036a6:	f104 060b 	add.w	r6, r4, #11
 80036aa:	f000 f865 	bl	8003778 <__malloc_unlock>
 80036ae:	f026 0607 	bic.w	r6, r6, #7
 80036b2:	1d23      	adds	r3, r4, #4
 80036b4:	1af2      	subs	r2, r6, r3
 80036b6:	d0b6      	beq.n	8003626 <_malloc_r+0x22>
 80036b8:	1b9b      	subs	r3, r3, r6
 80036ba:	50a3      	str	r3, [r4, r2]
 80036bc:	e7b3      	b.n	8003626 <_malloc_r+0x22>
 80036be:	6862      	ldr	r2, [r4, #4]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	bf0c      	ite	eq
 80036c4:	6032      	streq	r2, [r6, #0]
 80036c6:	605a      	strne	r2, [r3, #4]
 80036c8:	e7ec      	b.n	80036a4 <_malloc_r+0xa0>
 80036ca:	4623      	mov	r3, r4
 80036cc:	6864      	ldr	r4, [r4, #4]
 80036ce:	e7b2      	b.n	8003636 <_malloc_r+0x32>
 80036d0:	4634      	mov	r4, r6
 80036d2:	6876      	ldr	r6, [r6, #4]
 80036d4:	e7b9      	b.n	800364a <_malloc_r+0x46>
 80036d6:	230c      	movs	r3, #12
 80036d8:	4638      	mov	r0, r7
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	f000 f84c 	bl	8003778 <__malloc_unlock>
 80036e0:	e7a1      	b.n	8003626 <_malloc_r+0x22>
 80036e2:	6025      	str	r5, [r4, #0]
 80036e4:	e7de      	b.n	80036a4 <_malloc_r+0xa0>
 80036e6:	bf00      	nop
 80036e8:	200001a4 	.word	0x200001a4

080036ec <_realloc_r>:
 80036ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036f0:	4680      	mov	r8, r0
 80036f2:	4614      	mov	r4, r2
 80036f4:	460e      	mov	r6, r1
 80036f6:	b921      	cbnz	r1, 8003702 <_realloc_r+0x16>
 80036f8:	4611      	mov	r1, r2
 80036fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036fe:	f7ff bf81 	b.w	8003604 <_malloc_r>
 8003702:	b92a      	cbnz	r2, 8003710 <_realloc_r+0x24>
 8003704:	f7ff ff16 	bl	8003534 <_free_r>
 8003708:	4625      	mov	r5, r4
 800370a:	4628      	mov	r0, r5
 800370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003710:	f000 f838 	bl	8003784 <_malloc_usable_size_r>
 8003714:	4284      	cmp	r4, r0
 8003716:	4607      	mov	r7, r0
 8003718:	d802      	bhi.n	8003720 <_realloc_r+0x34>
 800371a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800371e:	d812      	bhi.n	8003746 <_realloc_r+0x5a>
 8003720:	4621      	mov	r1, r4
 8003722:	4640      	mov	r0, r8
 8003724:	f7ff ff6e 	bl	8003604 <_malloc_r>
 8003728:	4605      	mov	r5, r0
 800372a:	2800      	cmp	r0, #0
 800372c:	d0ed      	beq.n	800370a <_realloc_r+0x1e>
 800372e:	42bc      	cmp	r4, r7
 8003730:	4622      	mov	r2, r4
 8003732:	4631      	mov	r1, r6
 8003734:	bf28      	it	cs
 8003736:	463a      	movcs	r2, r7
 8003738:	f7ff fed4 	bl	80034e4 <memcpy>
 800373c:	4631      	mov	r1, r6
 800373e:	4640      	mov	r0, r8
 8003740:	f7ff fef8 	bl	8003534 <_free_r>
 8003744:	e7e1      	b.n	800370a <_realloc_r+0x1e>
 8003746:	4635      	mov	r5, r6
 8003748:	e7df      	b.n	800370a <_realloc_r+0x1e>
	...

0800374c <_sbrk_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	2300      	movs	r3, #0
 8003750:	4d05      	ldr	r5, [pc, #20]	; (8003768 <_sbrk_r+0x1c>)
 8003752:	4604      	mov	r4, r0
 8003754:	4608      	mov	r0, r1
 8003756:	602b      	str	r3, [r5, #0]
 8003758:	f7fd f8fa 	bl	8000950 <_sbrk>
 800375c:	1c43      	adds	r3, r0, #1
 800375e:	d102      	bne.n	8003766 <_sbrk_r+0x1a>
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	b103      	cbz	r3, 8003766 <_sbrk_r+0x1a>
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	bd38      	pop	{r3, r4, r5, pc}
 8003768:	200001ac 	.word	0x200001ac

0800376c <__malloc_lock>:
 800376c:	4801      	ldr	r0, [pc, #4]	; (8003774 <__malloc_lock+0x8>)
 800376e:	f000 b811 	b.w	8003794 <__retarget_lock_acquire_recursive>
 8003772:	bf00      	nop
 8003774:	200001b0 	.word	0x200001b0

08003778 <__malloc_unlock>:
 8003778:	4801      	ldr	r0, [pc, #4]	; (8003780 <__malloc_unlock+0x8>)
 800377a:	f000 b80c 	b.w	8003796 <__retarget_lock_release_recursive>
 800377e:	bf00      	nop
 8003780:	200001b0 	.word	0x200001b0

08003784 <_malloc_usable_size_r>:
 8003784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003788:	1f18      	subs	r0, r3, #4
 800378a:	2b00      	cmp	r3, #0
 800378c:	bfbc      	itt	lt
 800378e:	580b      	ldrlt	r3, [r1, r0]
 8003790:	18c0      	addlt	r0, r0, r3
 8003792:	4770      	bx	lr

08003794 <__retarget_lock_acquire_recursive>:
 8003794:	4770      	bx	lr

08003796 <__retarget_lock_release_recursive>:
 8003796:	4770      	bx	lr

08003798 <_init>:
 8003798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379a:	bf00      	nop
 800379c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379e:	bc08      	pop	{r3}
 80037a0:	469e      	mov	lr, r3
 80037a2:	4770      	bx	lr

080037a4 <_fini>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr
