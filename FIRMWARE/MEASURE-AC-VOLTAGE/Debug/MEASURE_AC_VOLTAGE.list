
MEASURE_AC_VOLTAGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004178  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004288  08004288  00014288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004320  08004320  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004320  08004320  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000070  08004398  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08004398  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086b7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d97  00000000  00000000  00028750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  0002a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002ad90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fe4  00000000  00000000  0002b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a858  00000000  00000000  00043554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000882cb  00000000  00000000  0004ddac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6077  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  000d60c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004270 	.word	0x08004270

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004270 	.word	0x08004270

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_drsub>:
 800050c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e002      	b.n	8000518 <__adddf3>
 8000512:	bf00      	nop

08000514 <__aeabi_dsub>:
 8000514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000518 <__adddf3>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800051e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000522:	ea94 0f05 	teq	r4, r5
 8000526:	bf08      	it	eq
 8000528:	ea90 0f02 	teqeq	r0, r2
 800052c:	bf1f      	itttt	ne
 800052e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000532:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800053e:	f000 80e2 	beq.w	8000706 <__adddf3+0x1ee>
 8000542:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054a:	bfb8      	it	lt
 800054c:	426d      	neglt	r5, r5
 800054e:	dd0c      	ble.n	800056a <__adddf3+0x52>
 8000550:	442c      	add	r4, r5
 8000552:	ea80 0202 	eor.w	r2, r0, r2
 8000556:	ea81 0303 	eor.w	r3, r1, r3
 800055a:	ea82 0000 	eor.w	r0, r2, r0
 800055e:	ea83 0101 	eor.w	r1, r3, r1
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	2d36      	cmp	r5, #54	; 0x36
 800056c:	bf88      	it	hi
 800056e:	bd30      	pophi	{r4, r5, pc}
 8000570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000574:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800057c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000580:	d002      	beq.n	8000588 <__adddf3+0x70>
 8000582:	4240      	negs	r0, r0
 8000584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800058c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000594:	d002      	beq.n	800059c <__adddf3+0x84>
 8000596:	4252      	negs	r2, r2
 8000598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800059c:	ea94 0f05 	teq	r4, r5
 80005a0:	f000 80a7 	beq.w	80006f2 <__adddf3+0x1da>
 80005a4:	f1a4 0401 	sub.w	r4, r4, #1
 80005a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005ac:	db0d      	blt.n	80005ca <__adddf3+0xb2>
 80005ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b2:	fa22 f205 	lsr.w	r2, r2, r5
 80005b6:	1880      	adds	r0, r0, r2
 80005b8:	f141 0100 	adc.w	r1, r1, #0
 80005bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c0:	1880      	adds	r0, r0, r2
 80005c2:	fa43 f305 	asr.w	r3, r3, r5
 80005c6:	4159      	adcs	r1, r3
 80005c8:	e00e      	b.n	80005e8 <__adddf3+0xd0>
 80005ca:	f1a5 0520 	sub.w	r5, r5, #32
 80005ce:	f10e 0e20 	add.w	lr, lr, #32
 80005d2:	2a01      	cmp	r2, #1
 80005d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d8:	bf28      	it	cs
 80005da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	18c0      	adds	r0, r0, r3
 80005e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	d507      	bpl.n	80005fe <__adddf3+0xe6>
 80005ee:	f04f 0e00 	mov.w	lr, #0
 80005f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80005fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000602:	d31b      	bcc.n	800063c <__adddf3+0x124>
 8000604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000608:	d30c      	bcc.n	8000624 <__adddf3+0x10c>
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000610:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000614:	f104 0401 	add.w	r4, r4, #1
 8000618:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800061c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000620:	f080 809a 	bcs.w	8000758 <__adddf3+0x240>
 8000624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800062e:	f150 0000 	adcs.w	r0, r0, #0
 8000632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000636:	ea41 0105 	orr.w	r1, r1, r5
 800063a:	bd30      	pop	{r4, r5, pc}
 800063c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000640:	4140      	adcs	r0, r0
 8000642:	eb41 0101 	adc.w	r1, r1, r1
 8000646:	3c01      	subs	r4, #1
 8000648:	bf28      	it	cs
 800064a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800064e:	d2e9      	bcs.n	8000624 <__adddf3+0x10c>
 8000650:	f091 0f00 	teq	r1, #0
 8000654:	bf04      	itt	eq
 8000656:	4601      	moveq	r1, r0
 8000658:	2000      	moveq	r0, #0
 800065a:	fab1 f381 	clz	r3, r1
 800065e:	bf08      	it	eq
 8000660:	3320      	addeq	r3, #32
 8000662:	f1a3 030b 	sub.w	r3, r3, #11
 8000666:	f1b3 0220 	subs.w	r2, r3, #32
 800066a:	da0c      	bge.n	8000686 <__adddf3+0x16e>
 800066c:	320c      	adds	r2, #12
 800066e:	dd08      	ble.n	8000682 <__adddf3+0x16a>
 8000670:	f102 0c14 	add.w	ip, r2, #20
 8000674:	f1c2 020c 	rsb	r2, r2, #12
 8000678:	fa01 f00c 	lsl.w	r0, r1, ip
 800067c:	fa21 f102 	lsr.w	r1, r1, r2
 8000680:	e00c      	b.n	800069c <__adddf3+0x184>
 8000682:	f102 0214 	add.w	r2, r2, #20
 8000686:	bfd8      	it	le
 8000688:	f1c2 0c20 	rsble	ip, r2, #32
 800068c:	fa01 f102 	lsl.w	r1, r1, r2
 8000690:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000694:	bfdc      	itt	le
 8000696:	ea41 010c 	orrle.w	r1, r1, ip
 800069a:	4090      	lslle	r0, r2
 800069c:	1ae4      	subs	r4, r4, r3
 800069e:	bfa2      	ittt	ge
 80006a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a4:	4329      	orrge	r1, r5
 80006a6:	bd30      	popge	{r4, r5, pc}
 80006a8:	ea6f 0404 	mvn.w	r4, r4
 80006ac:	3c1f      	subs	r4, #31
 80006ae:	da1c      	bge.n	80006ea <__adddf3+0x1d2>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc0e      	bgt.n	80006d2 <__adddf3+0x1ba>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0220 	rsb	r2, r4, #32
 80006bc:	fa20 f004 	lsr.w	r0, r0, r4
 80006c0:	fa01 f302 	lsl.w	r3, r1, r2
 80006c4:	ea40 0003 	orr.w	r0, r0, r3
 80006c8:	fa21 f304 	lsr.w	r3, r1, r4
 80006cc:	ea45 0103 	orr.w	r1, r5, r3
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f1c4 040c 	rsb	r4, r4, #12
 80006d6:	f1c4 0220 	rsb	r2, r4, #32
 80006da:	fa20 f002 	lsr.w	r0, r0, r2
 80006de:	fa01 f304 	lsl.w	r3, r1, r4
 80006e2:	ea40 0003 	orr.w	r0, r0, r3
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	fa21 f004 	lsr.w	r0, r1, r4
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	f094 0f00 	teq	r4, #0
 80006f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006fa:	bf06      	itte	eq
 80006fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000700:	3401      	addeq	r4, #1
 8000702:	3d01      	subne	r5, #1
 8000704:	e74e      	b.n	80005a4 <__adddf3+0x8c>
 8000706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070a:	bf18      	it	ne
 800070c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000710:	d029      	beq.n	8000766 <__adddf3+0x24e>
 8000712:	ea94 0f05 	teq	r4, r5
 8000716:	bf08      	it	eq
 8000718:	ea90 0f02 	teqeq	r0, r2
 800071c:	d005      	beq.n	800072a <__adddf3+0x212>
 800071e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000722:	bf04      	itt	eq
 8000724:	4619      	moveq	r1, r3
 8000726:	4610      	moveq	r0, r2
 8000728:	bd30      	pop	{r4, r5, pc}
 800072a:	ea91 0f03 	teq	r1, r3
 800072e:	bf1e      	ittt	ne
 8000730:	2100      	movne	r1, #0
 8000732:	2000      	movne	r0, #0
 8000734:	bd30      	popne	{r4, r5, pc}
 8000736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073a:	d105      	bne.n	8000748 <__adddf3+0x230>
 800073c:	0040      	lsls	r0, r0, #1
 800073e:	4149      	adcs	r1, r1
 8000740:	bf28      	it	cs
 8000742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd30      	pop	{r4, r5, pc}
 8000748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800074c:	bf3c      	itt	cc
 800074e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000752:	bd30      	popcc	{r4, r5, pc}
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076a:	bf1a      	itte	ne
 800076c:	4619      	movne	r1, r3
 800076e:	4610      	movne	r0, r2
 8000770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000774:	bf1c      	itt	ne
 8000776:	460b      	movne	r3, r1
 8000778:	4602      	movne	r2, r0
 800077a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800077e:	bf06      	itte	eq
 8000780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000784:	ea91 0f03 	teqeq	r1, r3
 8000788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	bf00      	nop

08000790 <__aeabi_ui2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a4:	f04f 0500 	mov.w	r5, #0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e750      	b.n	8000650 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_i2d>:
 80007b0:	f090 0f00 	teq	r0, #0
 80007b4:	bf04      	itt	eq
 80007b6:	2100      	moveq	r1, #0
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	f04f 0100 	mov.w	r1, #0
 80007d0:	e73e      	b.n	8000650 <__adddf3+0x138>
 80007d2:	bf00      	nop

080007d4 <__aeabi_f2d>:
 80007d4:	0042      	lsls	r2, r0, #1
 80007d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007da:	ea4f 0131 	mov.w	r1, r1, rrx
 80007de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e2:	bf1f      	itttt	ne
 80007e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f0:	4770      	bxne	lr
 80007f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007f6:	bf08      	it	eq
 80007f8:	4770      	bxeq	lr
 80007fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007fe:	bf04      	itt	eq
 8000800:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000804:	4770      	bxeq	lr
 8000806:	b530      	push	{r4, r5, lr}
 8000808:	f44f 7460 	mov.w	r4, #896	; 0x380
 800080c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	e71c      	b.n	8000650 <__adddf3+0x138>
 8000816:	bf00      	nop

08000818 <__aeabi_ul2d>:
 8000818:	ea50 0201 	orrs.w	r2, r0, r1
 800081c:	bf08      	it	eq
 800081e:	4770      	bxeq	lr
 8000820:	b530      	push	{r4, r5, lr}
 8000822:	f04f 0500 	mov.w	r5, #0
 8000826:	e00a      	b.n	800083e <__aeabi_l2d+0x16>

08000828 <__aeabi_l2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000836:	d502      	bpl.n	800083e <__aeabi_l2d+0x16>
 8000838:	4240      	negs	r0, r0
 800083a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800083e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000842:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000846:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084a:	f43f aed8 	beq.w	80005fe <__adddf3+0xe6>
 800084e:	f04f 0203 	mov.w	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000866:	f1c2 0320 	rsb	r3, r2, #32
 800086a:	fa00 fc03 	lsl.w	ip, r0, r3
 800086e:	fa20 f002 	lsr.w	r0, r0, r2
 8000872:	fa01 fe03 	lsl.w	lr, r1, r3
 8000876:	ea40 000e 	orr.w	r0, r0, lr
 800087a:	fa21 f102 	lsr.w	r1, r1, r2
 800087e:	4414      	add	r4, r2
 8000880:	e6bd      	b.n	80005fe <__adddf3+0xe6>
 8000882:	bf00      	nop

08000884 <__aeabi_d2f>:
 8000884:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000888:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800088c:	bf24      	itt	cs
 800088e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000892:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000896:	d90d      	bls.n	80008b4 <__aeabi_d2f+0x30>
 8000898:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800089c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008a4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008ac:	bf08      	it	eq
 80008ae:	f020 0001 	biceq.w	r0, r0, #1
 80008b2:	4770      	bx	lr
 80008b4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b8:	d121      	bne.n	80008fe <__aeabi_d2f+0x7a>
 80008ba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008be:	bfbc      	itt	lt
 80008c0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008c4:	4770      	bxlt	lr
 80008c6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ce:	f1c2 0218 	rsb	r2, r2, #24
 80008d2:	f1c2 0c20 	rsb	ip, r2, #32
 80008d6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008da:	fa20 f002 	lsr.w	r0, r0, r2
 80008de:	bf18      	it	ne
 80008e0:	f040 0001 	orrne.w	r0, r0, #1
 80008e4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008ec:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f0:	ea40 000c 	orr.w	r0, r0, ip
 80008f4:	fa23 f302 	lsr.w	r3, r3, r2
 80008f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008fc:	e7cc      	b.n	8000898 <__aeabi_d2f+0x14>
 80008fe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000902:	d107      	bne.n	8000914 <__aeabi_d2f+0x90>
 8000904:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000908:	bf1e      	ittt	ne
 800090a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800090e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000912:	4770      	bxne	lr
 8000914:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000918:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800091c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <__aeabi_f2uiz>:
 8000924:	0042      	lsls	r2, r0, #1
 8000926:	d20e      	bcs.n	8000946 <__aeabi_f2uiz+0x22>
 8000928:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800092c:	d30b      	bcc.n	8000946 <__aeabi_f2uiz+0x22>
 800092e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000932:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000936:	d409      	bmi.n	800094c <__aeabi_f2uiz+0x28>
 8000938:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800093c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000940:	fa23 f002 	lsr.w	r0, r3, r2
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr
 800094c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000950:	d101      	bne.n	8000956 <__aeabi_f2uiz+0x32>
 8000952:	0242      	lsls	r2, r0, #9
 8000954:	d102      	bne.n	800095c <__aeabi_f2uiz+0x38>
 8000956:	f04f 30ff 	mov.w	r0, #4294967295
 800095a:	4770      	bx	lr
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	0000      	movs	r0, r0
	...

08000968 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	 if(hadc->Instance == hadc1.Instance)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	429a      	cmp	r2, r3
 800097a:	d156      	bne.n	8000a2a <HAL_ADC_ConvCpltCallback+0xc2>
	 {
		 if (HAL_GetTick() - sample > 10000)
 800097c:	f000 fc58 	bl	8001230 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	4b32      	ldr	r3, [pc, #200]	; (8000a4c <HAL_ADC_ConvCpltCallback+0xe4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	f242 7210 	movw	r2, #10000	; 0x2710
 800098c:	4293      	cmp	r3, r2
 800098e:	d90a      	bls.n	80009a6 <HAL_ADC_ConvCpltCallback+0x3e>
		 {
			 volt_max_value = 0;
 8000990:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000992:	2200      	movs	r2, #0
 8000994:	801a      	strh	r2, [r3, #0]
			 currt_max_value = 0;
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <HAL_ADC_ConvCpltCallback+0xec>)
 8000998:	2200      	movs	r2, #0
 800099a:	801a      	strh	r2, [r3, #0]
			 sample = HAL_GetTick();
 800099c:	f000 fc48 	bl	8001230 <HAL_GetTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a2a      	ldr	r2, [pc, #168]	; (8000a4c <HAL_ADC_ConvCpltCallback+0xe4>)
 80009a4:	6013      	str	r3, [r2, #0]
		 }
		   if (volt_max_value < adc_scan_value[0])
 80009a6:	4b2c      	ldr	r3, [pc, #176]	; (8000a58 <HAL_ADC_ConvCpltCallback+0xf0>)
 80009a8:	881a      	ldrh	r2, [r3, #0]
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <HAL_ADC_ConvCpltCallback+0xe8>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d903      	bls.n	80009ba <HAL_ADC_ConvCpltCallback+0x52>
			   volt_max_value = adc_scan_value[0];
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <HAL_ADC_ConvCpltCallback+0xf0>)
 80009b4:	881a      	ldrh	r2, [r3, #0]
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <HAL_ADC_ConvCpltCallback+0xe8>)
 80009b8:	801a      	strh	r2, [r3, #0]
		   if (currt_max_value < adc_scan_value[1])
 80009ba:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <HAL_ADC_ConvCpltCallback+0xf0>)
 80009bc:	885a      	ldrh	r2, [r3, #2]
 80009be:	4b25      	ldr	r3, [pc, #148]	; (8000a54 <HAL_ADC_ConvCpltCallback+0xec>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d903      	bls.n	80009ce <HAL_ADC_ConvCpltCallback+0x66>
			   currt_max_value = adc_scan_value[1];
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <HAL_ADC_ConvCpltCallback+0xf0>)
 80009c8:	885a      	ldrh	r2, [r3, #2]
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <HAL_ADC_ConvCpltCallback+0xec>)
 80009cc:	801a      	strh	r2, [r3, #0]

		   Vrms = (volt_max_value - VOLT_OFFSET_CALIBRATION)*VOLT_GAIN_CALIBRATION;
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <HAL_ADC_ConvCpltCallback+0xe8>)
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff feea 	bl	80007b0 <__aeabi_i2d>
 80009dc:	a316      	add	r3, pc, #88	; (adr r3, 8000a38 <HAL_ADC_ConvCpltCallback+0xd0>)
 80009de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e2:	f7ff fbb5 	bl	8000150 <__aeabi_dmul>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	f7ff ff49 	bl	8000884 <__aeabi_d2f>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <HAL_ADC_ConvCpltCallback+0xf4>)
 80009f6:	6013      	str	r3, [r2, #0]
		   Irms = abs((CURRT_OFFSET_CALIBRATION - currt_max_value))*CURRT_GAIN_CALIBRATION;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_ADC_ConvCpltCallback+0xec>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	f5c3 633e 	rsb	r3, r3, #3040	; 0xbe0
 8000a00:	330a      	adds	r3, #10
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bfb8      	it	lt
 8000a06:	425b      	neglt	r3, r3
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fed1 	bl	80007b0 <__aeabi_i2d>
 8000a0e:	a30c      	add	r3, pc, #48	; (adr r3, 8000a40 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a14:	f7ff fb9c 	bl	8000150 <__aeabi_dmul>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f7ff ff30 	bl	8000884 <__aeabi_d2f>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000a28:	6013      	str	r3, [r2, #0]
	 }
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	f3af 8000 	nop.w
 8000a38:	5e353f7d 	.word	0x5e353f7d
 8000a3c:	3fcc49ba 	.word	0x3fcc49ba
 8000a40:	d2f1a9fc 	.word	0xd2f1a9fc
 8000a44:	3f80624d 	.word	0x3f80624d
 8000a48:	2000008c 	.word	0x2000008c
 8000a4c:	2000017c 	.word	0x2000017c
 8000a50:	20000170 	.word	0x20000170
 8000a54:	20000172 	.word	0x20000172
 8000a58:	2000016c 	.word	0x2000016c
 8000a5c:	20000174 	.word	0x20000174
 8000a60:	20000178 	.word	0x20000178

08000a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6a:	f000 fb89 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a6e:	f000 f8b9 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a72:	f000 f9a7 	bl	8000dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a76:	f000 f987 	bl	8000d88 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a7a:	f000 f95b 	bl	8000d34 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000a7e:	f000 f90b 	bl	8000c98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_GPIO.LCD_RS_PIN = LCD_RS_Pin;
 8000a82:	4b49      	ldr	r3, [pc, #292]	; (8000ba8 <main+0x144>)
 8000a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a88:	801a      	strh	r2, [r3, #0]
  LCD_GPIO.LCD_RW_PIN = LCD_RW_Pin;
 8000a8a:	4b47      	ldr	r3, [pc, #284]	; (8000ba8 <main+0x144>)
 8000a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a90:	805a      	strh	r2, [r3, #2]
  LCD_GPIO.LCD_EN_PIN = LCD_EN_Pin;
 8000a92:	4b45      	ldr	r3, [pc, #276]	; (8000ba8 <main+0x144>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	809a      	strh	r2, [r3, #4]
  LCD_GPIO.LCD_D4_PIN = LCD_D4_Pin;
 8000a98:	4b43      	ldr	r3, [pc, #268]	; (8000ba8 <main+0x144>)
 8000a9a:	2240      	movs	r2, #64	; 0x40
 8000a9c:	80da      	strh	r2, [r3, #6]
  LCD_GPIO.LCD_D5_PIN = LCD_D5_Pin;
 8000a9e:	4b42      	ldr	r3, [pc, #264]	; (8000ba8 <main+0x144>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	811a      	strh	r2, [r3, #8]
  LCD_GPIO.LCD_D6_PIN = LCD_D6_Pin;
 8000aa4:	4b40      	ldr	r3, [pc, #256]	; (8000ba8 <main+0x144>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	815a      	strh	r2, [r3, #10]
  LCD_GPIO.LCD_D7_PIN = LCD_D7_Pin;
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <main+0x144>)
 8000aac:	2208      	movs	r2, #8
 8000aae:	819a      	strh	r2, [r3, #12]

  LCD_Size.LCD_column = 16;
 8000ab0:	4b3e      	ldr	r3, [pc, #248]	; (8000bac <main+0x148>)
 8000ab2:	2210      	movs	r2, #16
 8000ab4:	701a      	strb	r2, [r3, #0]
  LCD_Size.LCD_row    = 2;
 8000ab6:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <main+0x148>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	705a      	strb	r2, [r3, #1]

  LCD_Init(&LCD, GPIOB, LCD_GPIO, LCD_Size);
 8000abc:	4a3a      	ldr	r2, [pc, #232]	; (8000ba8 <main+0x144>)
 8000abe:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <main+0x148>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	f8ad 3008 	strh.w	r3, [sp, #8]
 8000ac6:	466b      	mov	r3, sp
 8000ac8:	f102 0108 	add.w	r1, r2, #8
 8000acc:	c903      	ldmia	r1, {r0, r1}
 8000ace:	6018      	str	r0, [r3, #0]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	8019      	strh	r1, [r3, #0]
 8000ad4:	ca0c      	ldmia	r2, {r2, r3}
 8000ad6:	4936      	ldr	r1, [pc, #216]	; (8000bb0 <main+0x14c>)
 8000ad8:	4836      	ldr	r0, [pc, #216]	; (8000bb4 <main+0x150>)
 8000ada:	f002 fcd5 	bl	8003488 <LCD_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ade:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <main+0x154>)
 8000ae0:	f001 f918 	bl	8001d14 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_scan_value, 2);
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	4935      	ldr	r1, [pc, #212]	; (8000bbc <main+0x158>)
 8000ae8:	4833      	ldr	r0, [pc, #204]	; (8000bb8 <main+0x154>)
 8000aea:	f000 fd5d 	bl	80015a8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 8000aee:	4832      	ldr	r0, [pc, #200]	; (8000bb8 <main+0x154>)
 8000af0:	f000 fca4 	bl	800143c <HAL_ADC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LCD_SetCursor(&LCD, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	482e      	ldr	r0, [pc, #184]	; (8000bb4 <main+0x150>)
 8000afa:	f002 feab 	bl	8003854 <LCD_SetCursor>
	  sprintf(lcd_msg, "VOLT: %03d.%02dVrms", (uint8_t)Vrms, ((uint8_t)(Vrms*100))%100);
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <main+0x15c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff0e 	bl	8000924 <__aeabi_f2uiz>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	461c      	mov	r4, r3
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <main+0x15c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	492c      	ldr	r1, [pc, #176]	; (8000bc4 <main+0x160>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fc45 	bl	80003a4 <__aeabi_fmul>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff01 	bl	8000924 <__aeabi_f2uiz>
 8000b22:	4603      	mov	r3, r0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	4a28      	ldr	r2, [pc, #160]	; (8000bc8 <main+0x164>)
 8000b28:	fba2 1203 	umull	r1, r2, r2, r3
 8000b2c:	0952      	lsrs	r2, r2, #5
 8000b2e:	2164      	movs	r1, #100	; 0x64
 8000b30:	fb01 f202 	mul.w	r2, r1, r2
 8000b34:	1a9b      	subs	r3, r3, r2
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4622      	mov	r2, r4
 8000b3a:	4924      	ldr	r1, [pc, #144]	; (8000bcc <main+0x168>)
 8000b3c:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <main+0x16c>)
 8000b3e:	f002 ff1d 	bl	800397c <siprintf>
	  LCD_SendString(&LCD, lcd_msg);
 8000b42:	4923      	ldr	r1, [pc, #140]	; (8000bd0 <main+0x16c>)
 8000b44:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <main+0x150>)
 8000b46:	f002 fec9 	bl	80038dc <LCD_SendString>
	  LCD_SetCursor(&LCD, 0, 1);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <main+0x150>)
 8000b50:	f002 fe80 	bl	8003854 <LCD_SetCursor>
	  sprintf(lcd_msg, "CURRT: %01d.%03dArms", (uint8_t)Irms, ((uint8_t)(Irms*1000))%1000);
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <main+0x170>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fee3 	bl	8000924 <__aeabi_f2uiz>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	461c      	mov	r4, r3
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <main+0x170>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	491b      	ldr	r1, [pc, #108]	; (8000bd8 <main+0x174>)
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fc1a 	bl	80003a4 <__aeabi_fmul>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fed6 	bl	8000924 <__aeabi_f2uiz>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <main+0x178>)
 8000b80:	fb83 1302 	smull	r1, r3, r3, r2
 8000b84:	1199      	asrs	r1, r3, #6
 8000b86:	17d3      	asrs	r3, r2, #31
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b8e:	fb01 f303 	mul.w	r3, r1, r3
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4622      	mov	r2, r4
 8000b96:	4912      	ldr	r1, [pc, #72]	; (8000be0 <main+0x17c>)
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <main+0x16c>)
 8000b9a:	f002 feef 	bl	800397c <siprintf>
	  LCD_SendString(&LCD, lcd_msg);
 8000b9e:	490c      	ldr	r1, [pc, #48]	; (8000bd0 <main+0x16c>)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <main+0x150>)
 8000ba2:	f002 fe9b 	bl	80038dc <LCD_SendString>
	  LCD_SetCursor(&LCD, 0, 0);
 8000ba6:	e7a5      	b.n	8000af4 <main+0x90>
 8000ba8:	20000158 	.word	0x20000158
 8000bac:	20000168 	.word	0x20000168
 8000bb0:	40010c00 	.word	0x40010c00
 8000bb4:	20000144 	.word	0x20000144
 8000bb8:	2000008c 	.word	0x2000008c
 8000bbc:	2000016c 	.word	0x2000016c
 8000bc0:	20000174 	.word	0x20000174
 8000bc4:	42c80000 	.word	0x42c80000
 8000bc8:	51eb851f 	.word	0x51eb851f
 8000bcc:	08004288 	.word	0x08004288
 8000bd0:	20000180 	.word	0x20000180
 8000bd4:	20000178 	.word	0x20000178
 8000bd8:	447a0000 	.word	0x447a0000
 8000bdc:	10624dd3 	.word	0x10624dd3
 8000be0:	0800429c 	.word	0x0800429c

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 feba 	bl	800396c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c30:	2300      	movs	r3, #0
 8000c32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fdb9 	bl	80027b0 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000c44:	f000 f90a 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 f825 	bl	8002cb4 <HAL_RCC_ClockConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c70:	f000 f8f4 	bl	8000e5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c74:	2302      	movs	r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000c78:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c7c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f9af 	bl	8002fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c8c:	f000 f8e6 	bl	8000e5c <Error_Handler>
  }
}
 8000c90:	bf00      	nop
 8000c92:	3750      	adds	r7, #80	; 0x50
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000caa:	4a21      	ldr	r2, [pc, #132]	; (8000d30 <MX_ADC1_Init+0x98>)
 8000cac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000cc4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cc8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd6:	4815      	ldr	r0, [pc, #84]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000cd8:	f000 fad8 	bl	800128c <HAL_ADC_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000ce2:	f000 f8bb 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ce6:	2306      	movs	r3, #6
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000cf8:	f000 fe12 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f000 f8ab 	bl	8000e5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d06:	2307      	movs	r3, #7
 8000d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_ADC1_Init+0x94>)
 8000d14:	f000 fe04 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d1e:	f000 f89d 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000008c 	.word	0x2000008c
 8000d30:	40012400 	.word	0x40012400

08000d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <MX_USART1_UART_Init+0x50>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USART1_UART_Init+0x4c>)
 8000d6c:	f002 fab0 	bl	80032d0 <HAL_UART_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d76:	f000 f871 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000100 	.word	0x20000100
 8000d84:	40013800 	.word	0x40013800

08000d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_DMA_Init+0x38>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a0b      	ldr	r2, [pc, #44]	; (8000dc0 <MX_DMA_Init+0x38>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_DMA_Init+0x38>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	200b      	movs	r0, #11
 8000dac:	f001 f93f 	bl	800202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000db0:	200b      	movs	r0, #11
 8000db2:	f001 f958 	bl	8002066 <HAL_NVIC_EnableIRQ>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e0e:	f043 0308 	orr.w	r3, r3, #8
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_GPIO_Init+0x90>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_GPIO_Init+0x94>)
 8000e28:	f001 fcaa 	bl	8002780 <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8000e2c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000e30:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4619      	mov	r1, r3
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0x94>)
 8000e46:	f001 fb17 	bl	8002478 <HAL_GPIO_Init>

}
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	40010c00 	.word	0x40010c00

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_MspInit+0x5c>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x60>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_MspInit+0x60>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3714      	adds	r7, #20
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000

08000ecc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a2c      	ldr	r2, [pc, #176]	; (8000f98 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d151      	bne.n	8000f90 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_ADC_MspInit+0xd0>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_ADC_MspInit+0xd0>)
 8000ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <HAL_ADC_MspInit+0xd0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_ADC_MspInit+0xd0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <HAL_ADC_MspInit+0xd0>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <HAL_ADC_MspInit+0xd0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f1c:	23c0      	movs	r3, #192	; 0xc0
 8000f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f20:	2303      	movs	r3, #3
 8000f22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4619      	mov	r1, r3
 8000f2a:	481d      	ldr	r0, [pc, #116]	; (8000fa0 <HAL_ADC_MspInit+0xd4>)
 8000f2c:	f001 faa4 	bl	8002478 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f32:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <HAL_ADC_MspInit+0xdc>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f66:	f001 f899 	bl	800209c <HAL_DMA_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f70:	f7ff ff74 	bl	8000e5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f78:	621a      	str	r2, [r3, #32]
 8000f7a:	4a0a      	ldr	r2, [pc, #40]	; (8000fa4 <HAL_ADC_MspInit+0xd8>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2012      	movs	r0, #18
 8000f86:	f001 f852 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f8a:	2012      	movs	r0, #18
 8000f8c:	f001 f86b 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	200000bc 	.word	0x200000bc
 8000fa8:	40020008 	.word	0x40020008

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <HAL_UART_MspInit+0x8c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d131      	bne.n	8001030 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a1a      	ldr	r2, [pc, #104]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_UART_MspInit+0x90>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <HAL_UART_MspInit+0x94>)
 8001012:	f001 fa31 	bl	8002478 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <HAL_UART_MspInit+0x94>)
 800102c:	f001 fa24 	bl	8002478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40013800 	.word	0x40013800
 800103c:	40021000 	.word	0x40021000
 8001040:	40010800 	.word	0x40010800

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <NMI_Handler+0x4>

0800104a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104e:	e7fe      	b.n	800104e <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <MemManage_Handler+0x4>

08001056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <BusFault_Handler+0x4>

0800105c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <UsageFault_Handler+0x4>

08001062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr

08001086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108a:	f000 f8bf 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Channel1_IRQHandler+0x10>)
 800109a:	f001 f8b9 	bl	8002210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000bc 	.word	0x200000bc

080010a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <ADC1_2_IRQHandler+0x10>)
 80010ae:	f000 fb59 	bl	8001764 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000008c 	.word	0x2000008c

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f002 fc14 	bl	8003918 <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20005000 	.word	0x20005000
 800111c:	00000400 	.word	0x00000400
 8001120:	200001b4 	.word	0x200001b4
 8001124:	200001d0 	.word	0x200001d0

08001128 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr

08001134 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800115a:	f7ff ffe5 	bl	8001128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f002 fbe1 	bl	8003924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001162:	f7ff fc7f 	bl	8000a64 <main>
  bx lr
 8001166:	4770      	bx	lr
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001170:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 8001174:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001178:	200001cc 	.word	0x200001cc

0800117c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800117c:	e7fe      	b.n	800117c <CAN1_RX1_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_Init+0x28>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_Init+0x28>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001190:	2003      	movs	r0, #3
 8001192:	f000 ff41 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001196:	200f      	movs	r0, #15
 8001198:	f000 f808 	bl	80011ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800119c:	f7ff fe64 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40022000 	.word	0x40022000

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_InitTick+0x54>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <HAL_InitTick+0x58>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 ff59 	bl	8002082 <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00e      	b.n	80011f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b0f      	cmp	r3, #15
 80011de:	d80a      	bhi.n	80011f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e0:	2200      	movs	r2, #0
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 ff21 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ec:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_InitTick+0x5c>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000
 8001204:	20000008 	.word	0x20000008
 8001208:	20000004 	.word	0x20000004

0800120c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x1c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_IncTick+0x20>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a03      	ldr	r2, [pc, #12]	; (800122c <HAL_IncTick+0x20>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	20000008 	.word	0x20000008
 800122c:	200001b8 	.word	0x200001b8

08001230 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b02      	ldr	r3, [pc, #8]	; (8001240 <HAL_GetTick+0x10>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	200001b8 	.word	0x200001b8

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fff0 	bl	8001230 <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffe0 	bl	8001230 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001298:	2300      	movs	r3, #0
 800129a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e0be      	b.n	800142c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fdfe 	bl	8000ecc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fc77 	bl	8001bc4 <ADC_ConversionStop_Disable>
 80012d6:	4603      	mov	r3, r0
 80012d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f040 8099 	bne.w	800141a <HAL_ADC_Init+0x18e>
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f040 8095 	bne.w	800141a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f8:	f023 0302 	bic.w	r3, r3, #2
 80012fc:	f043 0202 	orr.w	r2, r3, #2
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800130c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7b1b      	ldrb	r3, [r3, #12]
 8001312:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001314:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	4313      	orrs	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001324:	d003      	beq.n	800132e <HAL_ADC_Init+0xa2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <HAL_ADC_Init+0xa8>
 800132e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001332:	e000      	b.n	8001336 <HAL_ADC_Init+0xaa>
 8001334:	2300      	movs	r3, #0
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7d1b      	ldrb	r3, [r3, #20]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d119      	bne.n	8001378 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	7b1b      	ldrb	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d109      	bne.n	8001360 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	3b01      	subs	r3, #1
 8001352:	035a      	lsls	r2, r3, #13
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	e00b      	b.n	8001378 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	f043 0220 	orr.w	r2, r3, #32
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	f043 0201 	orr.w	r2, r3, #1
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	430a      	orrs	r2, r1
 800138a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	4b28      	ldr	r3, [pc, #160]	; (8001434 <HAL_ADC_Init+0x1a8>)
 8001394:	4013      	ands	r3, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	430b      	orrs	r3, r1
 800139e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a8:	d003      	beq.n	80013b2 <HAL_ADC_Init+0x126>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d104      	bne.n	80013bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	051b      	lsls	r3, r3, #20
 80013ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	430a      	orrs	r2, r1
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_ADC_Init+0x1ac>)
 80013d8:	4013      	ands	r3, r2
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d10b      	bne.n	80013f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013f6:	e018      	b.n	800142a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f023 0312 	bic.w	r3, r3, #18
 8001400:	f043 0210 	orr.w	r2, r3, #16
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	f043 0201 	orr.w	r2, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001418:	e007      	b.n	800142a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f043 0210 	orr.w	r2, r3, #16
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800142a:	7dfb      	ldrb	r3, [r7, #23]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	ffe1f7fd 	.word	0xffe1f7fd
 8001438:	ff1f0efe 	.word	0xff1f0efe

0800143c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_ADC_Start_IT+0x1a>
 8001452:	2302      	movs	r3, #2
 8001454:	e0a0      	b.n	8001598 <HAL_ADC_Start_IT+0x15c>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fb56 	bl	8001b10 <ADC_Enable>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 808f 	bne.w	800158e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a45      	ldr	r2, [pc, #276]	; (80015a0 <HAL_ADC_Start_IT+0x164>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d105      	bne.n	800149a <HAL_ADC_Start_IT+0x5e>
 800148e:	4b45      	ldr	r3, [pc, #276]	; (80015a4 <HAL_ADC_Start_IT+0x168>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d115      	bne.n	80014c6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d026      	beq.n	8001502 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c4:	e01d      	b.n	8001502 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <HAL_ADC_Start_IT+0x168>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d004      	beq.n	80014e6 <HAL_ADC_Start_IT+0xaa>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a2f      	ldr	r2, [pc, #188]	; (80015a0 <HAL_ADC_Start_IT+0x164>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10d      	bne.n	8001502 <HAL_ADC_Start_IT+0xc6>
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_ADC_Start_IT+0x168>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	f023 0206 	bic.w	r2, r3, #6
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	62da      	str	r2, [r3, #44]	; 0x2c
 800151a:	e002      	b.n	8001522 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f06f 0202 	mvn.w	r2, #2
 8001532:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0220 	orr.w	r2, r2, #32
 8001542:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800154e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001552:	d113      	bne.n	800157c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001558:	4a11      	ldr	r2, [pc, #68]	; (80015a0 <HAL_ADC_Start_IT+0x164>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d105      	bne.n	800156a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_Start_IT+0x168>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	e00c      	b.n	8001596 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e003      	b.n	8001596 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001596:	7bfb      	ldrb	r3, [r7, #15]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40012800 	.word	0x40012800
 80015a4:	40012400 	.word	0x40012400

080015a8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a64      	ldr	r2, [pc, #400]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d004      	beq.n	80015cc <HAL_ADC_Start_DMA+0x24>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a63      	ldr	r2, [pc, #396]	; (8001754 <HAL_ADC_Start_DMA+0x1ac>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d106      	bne.n	80015da <HAL_ADC_Start_DMA+0x32>
 80015cc:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f040 80b3 	bne.w	8001740 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_Start_DMA+0x40>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e0ae      	b.n	8001746 <HAL_ADC_Start_DMA+0x19e>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 fa8d 	bl	8001b10 <ADC_Enable>
 80015f6:	4603      	mov	r3, r0
 80015f8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f040 809a 	bne.w	8001736 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001606:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a4e      	ldr	r2, [pc, #312]	; (8001754 <HAL_ADC_Start_DMA+0x1ac>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d105      	bne.n	800162c <HAL_ADC_Start_DMA+0x84>
 8001620:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d115      	bne.n	8001658 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	2b00      	cmp	r3, #0
 8001644:	d026      	beq.n	8001694 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800164e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001656:	e01d      	b.n	8001694 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a39      	ldr	r2, [pc, #228]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d004      	beq.n	8001678 <HAL_ADC_Start_DMA+0xd0>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a38      	ldr	r2, [pc, #224]	; (8001754 <HAL_ADC_Start_DMA+0x1ac>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d10d      	bne.n	8001694 <HAL_ADC_Start_DMA+0xec>
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <HAL_ADC_Start_DMA+0x1a8>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d007      	beq.n	8001694 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800168c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	f023 0206 	bic.w	r2, r3, #6
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a25      	ldr	r2, [pc, #148]	; (8001758 <HAL_ADC_Start_DMA+0x1b0>)
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a24      	ldr	r2, [pc, #144]	; (800175c <HAL_ADC_Start_DMA+0x1b4>)
 80016ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <HAL_ADC_Start_DMA+0x1b8>)
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f06f 0202 	mvn.w	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016ec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a18      	ldr	r0, [r3, #32]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	334c      	adds	r3, #76	; 0x4c
 80016f8:	4619      	mov	r1, r3
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f000 fd27 	bl	8002150 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800170c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001710:	d108      	bne.n	8001724 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001720:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001722:	e00f      	b.n	8001744 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001732:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001734:	e006      	b.n	8001744 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800173e:	e001      	b.n	8001744 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001744:	7dfb      	ldrb	r3, [r7, #23]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40012400 	.word	0x40012400
 8001754:	40012800 	.word	0x40012800
 8001758:	08001c47 	.word	0x08001c47
 800175c:	08001cc3 	.word	0x08001cc3
 8001760:	08001cdf 	.word	0x08001cdf

08001764 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0320 	and.w	r3, r3, #32
 8001776:	2b20      	cmp	r3, #32
 8001778:	d140      	bne.n	80017fc <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b02      	cmp	r3, #2
 8001786:	d139      	bne.n	80017fc <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017ae:	d11d      	bne.n	80017ec <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d119      	bne.n	80017ec <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f022 0220 	bic.w	r2, r2, #32
 80017c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d105      	bne.n	80017ec <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff f8bb 	bl	8000968 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f06f 0212 	mvn.w	r2, #18
 80017fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b80      	cmp	r3, #128	; 0x80
 8001808:	d14f      	bne.n	80018aa <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b04      	cmp	r3, #4
 8001816:	d148      	bne.n	80018aa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800183a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800183e:	d012      	beq.n	8001866 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800184a:	2b00      	cmp	r3, #0
 800184c:	d125      	bne.n	800189a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001858:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800185c:	d11d      	bne.n	800189a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001862:	2b00      	cmp	r3, #0
 8001864:	d119      	bne.n	800189a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001874:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d105      	bne.n	800189a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	f043 0201 	orr.w	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 fae6 	bl	8001e6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 020c 	mvn.w	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b4:	2b40      	cmp	r3, #64	; 0x40
 80018b6:	d114      	bne.n	80018e2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d10d      	bne.n	80018e2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f812 	bl	80018fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f06f 0201 	mvn.w	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x20>
 800193c:	2302      	movs	r3, #2
 800193e:	e0dc      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1da>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b06      	cmp	r3, #6
 800194e:	d81c      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b05      	subs	r3, #5
 8001962:	221f      	movs	r2, #31
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	4019      	ands	r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b05      	subs	r3, #5
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
 8001988:	e03c      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d81c      	bhi.n	80019cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	; 0x23
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4019      	ands	r1, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b23      	subs	r3, #35	; 0x23
 80019be:	fa00 f203 	lsl.w	r2, r0, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ca:	e01b      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	3b41      	subs	r3, #65	; 0x41
 80019de:	221f      	movs	r2, #31
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b41      	subs	r3, #65	; 0x41
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d91c      	bls.n	8001a46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68d9      	ldr	r1, [r3, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b1e      	subs	r3, #30
 8001a1e:	2207      	movs	r2, #7
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4019      	ands	r1, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6898      	ldr	r0, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	e019      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6919      	ldr	r1, [r3, #16]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d003      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d132      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d125      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d126      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ab0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d11a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_ADC_ConfigChannel+0x1e8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_ADC_ConfigChannel+0x1ec>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9a      	lsrs	r2, r3, #18
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad0:	e002      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f9      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ade:	e007      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40012400 	.word	0x40012400
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d040      	beq.n	8001bb0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <ADC_Enable+0xac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <ADC_Enable+0xb0>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b4c:	e002      	b.n	8001b54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b5a:	f7ff fb69 	bl	8001230 <HAL_GetTick>
 8001b5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b60:	e01f      	b.n	8001ba2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b62:	f7ff fb65 	bl	8001230 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d918      	bls.n	8001ba2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d011      	beq.n	8001ba2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b82:	f043 0210 	orr.w	r2, r3, #16
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f043 0201 	orr.w	r2, r3, #1
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e007      	b.n	8001bb2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d1d8      	bne.n	8001b62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	431bde83 	.word	0x431bde83

08001bc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d12e      	bne.n	8001c3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bee:	f7ff fb1f 	bl	8001230 <HAL_GetTick>
 8001bf2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bf4:	e01b      	b.n	8001c2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bf6:	f7ff fb1b 	bl	8001230 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d914      	bls.n	8001c2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10d      	bne.n	8001c2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c16:	f043 0210 	orr.w	r2, r3, #16
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c22:	f043 0201 	orr.w	r2, r3, #1
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e007      	b.n	8001c3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d0dc      	beq.n	8001bf6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b084      	sub	sp, #16
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d127      	bne.n	8001cb0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c7a:	d115      	bne.n	8001ca8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d111      	bne.n	8001ca8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	f043 0201 	orr.w	r2, r3, #1
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7fe fe5d 	bl	8000968 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001cae:	e004      	b.n	8001cba <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f7ff fe0a 	bl	80018ea <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f7ff fe02 	bl	800190e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADCEx_Calibration_Start+0x1e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e095      	b.n	8001e5e <HAL_ADCEx_Calibration_Start+0x14a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff42 	bl	8001bc4 <ADC_ConversionStop_Disable>
 8001d40:	4603      	mov	r3, r0
 8001d42:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 8084 	bne.w	8001e54 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d54:	f023 0302 	bic.w	r3, r3, #2
 8001d58:	f043 0202 	orr.w	r2, r3, #2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d60:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_ADCEx_Calibration_Start+0x154>)
 8001d62:	681c      	ldr	r4, [r3, #0]
 8001d64:	2002      	movs	r0, #2
 8001d66:	f001 f9f3 	bl	8003150 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001d70:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001d72:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff fec4 	bl	8001b10 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0208 	orr.w	r2, r2, #8
 8001d96:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d98:	f7ff fa4a 	bl	8001230 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d9e:	e01b      	b.n	8001dd8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001da0:	f7ff fa46 	bl	8001230 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d914      	bls.n	8001dd8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f023 0312 	bic.w	r3, r3, #18
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e042      	b.n	8001e5e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1dc      	bne.n	8001da0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0204 	orr.w	r2, r2, #4
 8001df4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001df6:	f7ff fa1b 	bl	8001230 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001dfc:	e01b      	b.n	8001e36 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001dfe:	f7ff fa17 	bl	8001230 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b0a      	cmp	r3, #10
 8001e0a:	d914      	bls.n	8001e36 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00d      	beq.n	8001e36 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	f023 0312 	bic.w	r3, r3, #18
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e013      	b.n	8001e5e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1dc      	bne.n	8001dfe <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4906      	ldr	r1, [pc, #24]	; (8001f18 <__NVIC_EnableIRQ+0x34>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff90 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff2d 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff42 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff90 	bl	8001f70 <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5f 	bl	8001f1c <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff35 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e043      	b.n	800213a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_DMA_Init+0xa8>)
 80020ba:	4413      	add	r3, r2
 80020bc:	4a22      	ldr	r2, [pc, #136]	; (8002148 <HAL_DMA_Init+0xac>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_DMA_Init+0xb0>)
 80020ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80020f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002100:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	bffdfff8 	.word	0xbffdfff8
 8002148:	cccccccd 	.word	0xcccccccd
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_DMA_Start_IT+0x20>
 800216c:	2302      	movs	r3, #2
 800216e:	e04a      	b.n	8002206 <HAL_DMA_Start_IT+0xb6>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800217e:	2b01      	cmp	r3, #1
 8002180:	d13a      	bne.n	80021f8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f938 	bl	800241c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d008      	beq.n	80021c6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 020e 	orr.w	r2, r2, #14
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e00f      	b.n	80021e6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0204 	bic.w	r2, r2, #4
 80021d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f042 020a 	orr.w	r2, r2, #10
 80021e4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e005      	b.n	8002204 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002200:	2302      	movs	r3, #2
 8002202:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002204:	7dfb      	ldrb	r3, [r7, #23]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2204      	movs	r2, #4
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d04f      	beq.n	80022d8 <HAL_DMA_IRQHandler+0xc8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0304 	and.w	r3, r3, #4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d04a      	beq.n	80022d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d107      	bne.n	8002260 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0204 	bic.w	r2, r2, #4
 800225e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a66      	ldr	r2, [pc, #408]	; (8002400 <HAL_DMA_IRQHandler+0x1f0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d029      	beq.n	80022be <HAL_DMA_IRQHandler+0xae>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a65      	ldr	r2, [pc, #404]	; (8002404 <HAL_DMA_IRQHandler+0x1f4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d022      	beq.n	80022ba <HAL_DMA_IRQHandler+0xaa>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a63      	ldr	r2, [pc, #396]	; (8002408 <HAL_DMA_IRQHandler+0x1f8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01a      	beq.n	80022b4 <HAL_DMA_IRQHandler+0xa4>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a62      	ldr	r2, [pc, #392]	; (800240c <HAL_DMA_IRQHandler+0x1fc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d012      	beq.n	80022ae <HAL_DMA_IRQHandler+0x9e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a60      	ldr	r2, [pc, #384]	; (8002410 <HAL_DMA_IRQHandler+0x200>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00a      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x98>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a5f      	ldr	r2, [pc, #380]	; (8002414 <HAL_DMA_IRQHandler+0x204>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d102      	bne.n	80022a2 <HAL_DMA_IRQHandler+0x92>
 800229c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022a0:	e00e      	b.n	80022c0 <HAL_DMA_IRQHandler+0xb0>
 80022a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80022a6:	e00b      	b.n	80022c0 <HAL_DMA_IRQHandler+0xb0>
 80022a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80022ac:	e008      	b.n	80022c0 <HAL_DMA_IRQHandler+0xb0>
 80022ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022b2:	e005      	b.n	80022c0 <HAL_DMA_IRQHandler+0xb0>
 80022b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b8:	e002      	b.n	80022c0 <HAL_DMA_IRQHandler+0xb0>
 80022ba:	2340      	movs	r3, #64	; 0x40
 80022bc:	e000      	b.n	80022c0 <HAL_DMA_IRQHandler+0xb0>
 80022be:	2304      	movs	r3, #4
 80022c0:	4a55      	ldr	r2, [pc, #340]	; (8002418 <HAL_DMA_IRQHandler+0x208>)
 80022c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8094 	beq.w	80023f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80022d6:	e08e      	b.n	80023f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	2202      	movs	r2, #2
 80022de:	409a      	lsls	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d056      	beq.n	8002396 <HAL_DMA_IRQHandler+0x186>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d051      	beq.n	8002396 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10b      	bne.n	8002318 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 020a 	bic.w	r2, r2, #10
 800230e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a38      	ldr	r2, [pc, #224]	; (8002400 <HAL_DMA_IRQHandler+0x1f0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d029      	beq.n	8002376 <HAL_DMA_IRQHandler+0x166>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a37      	ldr	r2, [pc, #220]	; (8002404 <HAL_DMA_IRQHandler+0x1f4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d022      	beq.n	8002372 <HAL_DMA_IRQHandler+0x162>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_DMA_IRQHandler+0x1f8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01a      	beq.n	800236c <HAL_DMA_IRQHandler+0x15c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_DMA_IRQHandler+0x1fc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d012      	beq.n	8002366 <HAL_DMA_IRQHandler+0x156>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a32      	ldr	r2, [pc, #200]	; (8002410 <HAL_DMA_IRQHandler+0x200>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d00a      	beq.n	8002360 <HAL_DMA_IRQHandler+0x150>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a31      	ldr	r2, [pc, #196]	; (8002414 <HAL_DMA_IRQHandler+0x204>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d102      	bne.n	800235a <HAL_DMA_IRQHandler+0x14a>
 8002354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002358:	e00e      	b.n	8002378 <HAL_DMA_IRQHandler+0x168>
 800235a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800235e:	e00b      	b.n	8002378 <HAL_DMA_IRQHandler+0x168>
 8002360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002364:	e008      	b.n	8002378 <HAL_DMA_IRQHandler+0x168>
 8002366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800236a:	e005      	b.n	8002378 <HAL_DMA_IRQHandler+0x168>
 800236c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002370:	e002      	b.n	8002378 <HAL_DMA_IRQHandler+0x168>
 8002372:	2320      	movs	r3, #32
 8002374:	e000      	b.n	8002378 <HAL_DMA_IRQHandler+0x168>
 8002376:	2302      	movs	r3, #2
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_DMA_IRQHandler+0x208>)
 800237a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	d034      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002394:	e02f      	b.n	80023f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	2208      	movs	r2, #8
 800239c:	409a      	lsls	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d028      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x1e8>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d023      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 020e 	bic.w	r2, r2, #14
 80023be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c8:	2101      	movs	r1, #1
 80023ca:	fa01 f202 	lsl.w	r2, r1, r2
 80023ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
    }
  }
  return;
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
}
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40020008 	.word	0x40020008
 8002404:	4002001c 	.word	0x4002001c
 8002408:	40020030 	.word	0x40020030
 800240c:	40020044 	.word	0x40020044
 8002410:	40020058 	.word	0x40020058
 8002414:	4002006c 	.word	0x4002006c
 8002418:	40020000 	.word	0x40020000

0800241c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b10      	cmp	r3, #16
 8002448:	d108      	bne.n	800245c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800245a:	e007      	b.n	800246c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
	...

08002478 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002478:	b480      	push	{r7}
 800247a:	b08b      	sub	sp, #44	; 0x2c
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002486:	2300      	movs	r3, #0
 8002488:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248a:	e169      	b.n	8002760 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800248c:	2201      	movs	r2, #1
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	f040 8158 	bne.w	800275a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a9a      	ldr	r2, [pc, #616]	; (8002718 <HAL_GPIO_Init+0x2a0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d05e      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024b4:	4a98      	ldr	r2, [pc, #608]	; (8002718 <HAL_GPIO_Init+0x2a0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d875      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024ba:	4a98      	ldr	r2, [pc, #608]	; (800271c <HAL_GPIO_Init+0x2a4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d058      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024c0:	4a96      	ldr	r2, [pc, #600]	; (800271c <HAL_GPIO_Init+0x2a4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d86f      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024c6:	4a96      	ldr	r2, [pc, #600]	; (8002720 <HAL_GPIO_Init+0x2a8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d052      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024cc:	4a94      	ldr	r2, [pc, #592]	; (8002720 <HAL_GPIO_Init+0x2a8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d869      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024d2:	4a94      	ldr	r2, [pc, #592]	; (8002724 <HAL_GPIO_Init+0x2ac>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d04c      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024d8:	4a92      	ldr	r2, [pc, #584]	; (8002724 <HAL_GPIO_Init+0x2ac>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d863      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024de:	4a92      	ldr	r2, [pc, #584]	; (8002728 <HAL_GPIO_Init+0x2b0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d046      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
 80024e4:	4a90      	ldr	r2, [pc, #576]	; (8002728 <HAL_GPIO_Init+0x2b0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d85d      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024ea:	2b12      	cmp	r3, #18
 80024ec:	d82a      	bhi.n	8002544 <HAL_GPIO_Init+0xcc>
 80024ee:	2b12      	cmp	r3, #18
 80024f0:	d859      	bhi.n	80025a6 <HAL_GPIO_Init+0x12e>
 80024f2:	a201      	add	r2, pc, #4	; (adr r2, 80024f8 <HAL_GPIO_Init+0x80>)
 80024f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f8:	08002573 	.word	0x08002573
 80024fc:	0800254d 	.word	0x0800254d
 8002500:	0800255f 	.word	0x0800255f
 8002504:	080025a1 	.word	0x080025a1
 8002508:	080025a7 	.word	0x080025a7
 800250c:	080025a7 	.word	0x080025a7
 8002510:	080025a7 	.word	0x080025a7
 8002514:	080025a7 	.word	0x080025a7
 8002518:	080025a7 	.word	0x080025a7
 800251c:	080025a7 	.word	0x080025a7
 8002520:	080025a7 	.word	0x080025a7
 8002524:	080025a7 	.word	0x080025a7
 8002528:	080025a7 	.word	0x080025a7
 800252c:	080025a7 	.word	0x080025a7
 8002530:	080025a7 	.word	0x080025a7
 8002534:	080025a7 	.word	0x080025a7
 8002538:	080025a7 	.word	0x080025a7
 800253c:	08002555 	.word	0x08002555
 8002540:	08002569 	.word	0x08002569
 8002544:	4a79      	ldr	r2, [pc, #484]	; (800272c <HAL_GPIO_Init+0x2b4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800254a:	e02c      	b.n	80025a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	623b      	str	r3, [r7, #32]
          break;
 8002552:	e029      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	3304      	adds	r3, #4
 800255a:	623b      	str	r3, [r7, #32]
          break;
 800255c:	e024      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	3308      	adds	r3, #8
 8002564:	623b      	str	r3, [r7, #32]
          break;
 8002566:	e01f      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	330c      	adds	r3, #12
 800256e:	623b      	str	r3, [r7, #32]
          break;
 8002570:	e01a      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d102      	bne.n	8002580 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800257a:	2304      	movs	r3, #4
 800257c:	623b      	str	r3, [r7, #32]
          break;
 800257e:	e013      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d105      	bne.n	8002594 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002588:	2308      	movs	r3, #8
 800258a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	611a      	str	r2, [r3, #16]
          break;
 8002592:	e009      	b.n	80025a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002594:	2308      	movs	r3, #8
 8002596:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	615a      	str	r2, [r3, #20]
          break;
 800259e:	e003      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025a0:	2300      	movs	r3, #0
 80025a2:	623b      	str	r3, [r7, #32]
          break;
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x130>
          break;
 80025a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2bff      	cmp	r3, #255	; 0xff
 80025ac:	d801      	bhi.n	80025b2 <HAL_GPIO_Init+0x13a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	e001      	b.n	80025b6 <HAL_GPIO_Init+0x13e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3304      	adds	r3, #4
 80025b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2bff      	cmp	r3, #255	; 0xff
 80025bc:	d802      	bhi.n	80025c4 <HAL_GPIO_Init+0x14c>
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	e002      	b.n	80025ca <HAL_GPIO_Init+0x152>
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	3b08      	subs	r3, #8
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	210f      	movs	r1, #15
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	401a      	ands	r2, r3
 80025dc:	6a39      	ldr	r1, [r7, #32]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	431a      	orrs	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80b1 	beq.w	800275a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025f8:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <HAL_GPIO_Init+0x2b8>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a4c      	ldr	r2, [pc, #304]	; (8002730 <HAL_GPIO_Init+0x2b8>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b4a      	ldr	r3, [pc, #296]	; (8002730 <HAL_GPIO_Init+0x2b8>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <HAL_GPIO_Init+0x2bc>)
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	089b      	lsrs	r3, r3, #2
 8002616:	3302      	adds	r3, #2
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	220f      	movs	r2, #15
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a40      	ldr	r2, [pc, #256]	; (8002738 <HAL_GPIO_Init+0x2c0>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d013      	beq.n	8002664 <HAL_GPIO_Init+0x1ec>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a3f      	ldr	r2, [pc, #252]	; (800273c <HAL_GPIO_Init+0x2c4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00d      	beq.n	8002660 <HAL_GPIO_Init+0x1e8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a3e      	ldr	r2, [pc, #248]	; (8002740 <HAL_GPIO_Init+0x2c8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d007      	beq.n	800265c <HAL_GPIO_Init+0x1e4>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a3d      	ldr	r2, [pc, #244]	; (8002744 <HAL_GPIO_Init+0x2cc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d101      	bne.n	8002658 <HAL_GPIO_Init+0x1e0>
 8002654:	2303      	movs	r3, #3
 8002656:	e006      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 8002658:	2304      	movs	r3, #4
 800265a:	e004      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 800265c:	2302      	movs	r3, #2
 800265e:	e002      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_GPIO_Init+0x1ee>
 8002664:	2300      	movs	r3, #0
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	f002 0203 	and.w	r2, r2, #3
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	4093      	lsls	r3, r2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4313      	orrs	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002676:	492f      	ldr	r1, [pc, #188]	; (8002734 <HAL_GPIO_Init+0x2bc>)
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d006      	beq.n	800269e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002690:	4b2d      	ldr	r3, [pc, #180]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	492c      	ldr	r1, [pc, #176]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	600b      	str	r3, [r1, #0]
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800269e:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4928      	ldr	r1, [pc, #160]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026b8:	4b23      	ldr	r3, [pc, #140]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4922      	ldr	r1, [pc, #136]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	e006      	b.n	80026d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	491e      	ldr	r1, [pc, #120]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e0:	4b19      	ldr	r3, [pc, #100]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	4918      	ldr	r1, [pc, #96]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ee:	4b16      	ldr	r3, [pc, #88]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	4914      	ldr	r1, [pc, #80]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d021      	beq.n	800274c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002708:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	490e      	ldr	r1, [pc, #56]	; (8002748 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
 8002714:	e021      	b.n	800275a <HAL_GPIO_Init+0x2e2>
 8002716:	bf00      	nop
 8002718:	10320000 	.word	0x10320000
 800271c:	10310000 	.word	0x10310000
 8002720:	10220000 	.word	0x10220000
 8002724:	10210000 	.word	0x10210000
 8002728:	10120000 	.word	0x10120000
 800272c:	10110000 	.word	0x10110000
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000
 8002738:	40010800 	.word	0x40010800
 800273c:	40010c00 	.word	0x40010c00
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800274c:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_GPIO_Init+0x304>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	43db      	mvns	r3, r3
 8002754:	4909      	ldr	r1, [pc, #36]	; (800277c <HAL_GPIO_Init+0x304>)
 8002756:	4013      	ands	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	3301      	adds	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	f47f ae8e 	bne.w	800248c <HAL_GPIO_Init+0x14>
  }
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	372c      	adds	r7, #44	; 0x2c
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	40010400 	.word	0x40010400

08002780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	807b      	strh	r3, [r7, #2]
 800278c:	4613      	mov	r3, r2
 800278e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002790:	787b      	ldrb	r3, [r7, #1]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800279c:	e003      	b.n	80027a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	041a      	lsls	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e272      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8087 	beq.w	80028de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d00c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027dc:	4b8f      	ldr	r3, [pc, #572]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 030c 	and.w	r3, r3, #12
 80027e4:	2b08      	cmp	r3, #8
 80027e6:	d112      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
 80027e8:	4b8c      	ldr	r3, [pc, #560]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d10b      	bne.n	800280e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f6:	4b89      	ldr	r3, [pc, #548]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06c      	beq.n	80028dc <HAL_RCC_OscConfig+0x12c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d168      	bne.n	80028dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e24c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x76>
 8002818:	4b80      	ldr	r3, [pc, #512]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a7f      	ldr	r2, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	6013      	str	r3, [r2, #0]
 8002824:	e02e      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10c      	bne.n	8002848 <HAL_RCC_OscConfig+0x98>
 800282e:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7a      	ldr	r2, [pc, #488]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a77      	ldr	r2, [pc, #476]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	e01d      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002850:	d10c      	bne.n	800286c <HAL_RCC_OscConfig+0xbc>
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a71      	ldr	r2, [pc, #452]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002858:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800285c:	6013      	str	r3, [r2, #0]
 800285e:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e00b      	b.n	8002884 <HAL_RCC_OscConfig+0xd4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002872:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a67      	ldr	r2, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 800287e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d013      	beq.n	80028b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fcd0 	bl	8001230 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7fe fccc 	bl	8001230 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	; 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e200      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	4b5d      	ldr	r3, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0xe4>
 80028b2:	e014      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fcbc 	bl	8001230 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028bc:	f7fe fcb8 	bl	8001230 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b64      	cmp	r3, #100	; 0x64
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e1ec      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x10c>
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d063      	beq.n	80029b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ea:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00b      	beq.n	800290e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028f6:	4b49      	ldr	r3, [pc, #292]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d11c      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
 8002902:	4b46      	ldr	r3, [pc, #280]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d116      	bne.n	800293c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	4b43      	ldr	r3, [pc, #268]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1c0      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4939      	ldr	r1, [pc, #228]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293a:	e03a      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002946:	2201      	movs	r2, #1
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe fc71 	bl	8001230 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe fc6d 	bl	8001230 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e1a1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002964:	4b2d      	ldr	r3, [pc, #180]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002970:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4927      	ldr	r1, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
 8002984:	e015      	b.n	80029b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <HAL_RCC_OscConfig+0x270>)
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fc50 	bl	8001230 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002994:	f7fe fc4c 	bl	8001230 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e180      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a6:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d03a      	beq.n	8002a34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe fc30 	bl	8001230 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d4:	f7fe fc2c 	bl	8001230 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e160      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_RCC_OscConfig+0x26c>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029f2:	2001      	movs	r0, #1
 80029f4:	f000 fad8 	bl	8002fa8 <RCC_Delay>
 80029f8:	e01c      	b.n	8002a34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_RCC_OscConfig+0x274>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe fc16 	bl	8001230 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a06:	e00f      	b.n	8002a28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fe fc12 	bl	8001230 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d908      	bls.n	8002a28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e146      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	42420000 	.word	0x42420000
 8002a24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a28:	4b92      	ldr	r3, [pc, #584]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e9      	bne.n	8002a08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80a6 	beq.w	8002b8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a46:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10d      	bne.n	8002a6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4a87      	ldr	r2, [pc, #540]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	61d3      	str	r3, [r2, #28]
 8002a5e:	4b85      	ldr	r3, [pc, #532]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7e      	ldr	r2, [pc, #504]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe fbd3 	bl	8001230 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe fbcf 	bl	8001230 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	; 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e103      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b75      	ldr	r3, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x4c8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x312>
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4a6e      	ldr	r2, [pc, #440]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	e02d      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x334>
 8002aca:	4b6a      	ldr	r3, [pc, #424]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4a69      	ldr	r2, [pc, #420]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	f023 0301 	bic.w	r3, r3, #1
 8002ad4:	6213      	str	r3, [r2, #32]
 8002ad6:	4b67      	ldr	r3, [pc, #412]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4a66      	ldr	r2, [pc, #408]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6213      	str	r3, [r2, #32]
 8002ae2:	e01c      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	2b05      	cmp	r3, #5
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x356>
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	4a60      	ldr	r2, [pc, #384]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6213      	str	r3, [r2, #32]
 8002af8:	4b5e      	ldr	r3, [pc, #376]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4a5d      	ldr	r2, [pc, #372]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	e00b      	b.n	8002b1e <HAL_RCC_OscConfig+0x36e>
 8002b06:	4b5b      	ldr	r3, [pc, #364]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	4a5a      	ldr	r2, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	6213      	str	r3, [r2, #32]
 8002b12:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a57      	ldr	r2, [pc, #348]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0304 	bic.w	r3, r3, #4
 8002b1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d015      	beq.n	8002b52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fb83 	bl	8001230 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fb7f 	bl	8001230 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e0b1      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RCC_OscConfig+0x37e>
 8002b50:	e014      	b.n	8002b7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7fe fb6d 	bl	8001230 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fb69 	bl	8001230 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e09b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1ee      	bne.n	8002b5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	4b3c      	ldr	r3, [pc, #240]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8087 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b98:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d061      	beq.n	8002c68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d146      	bne.n	8002c3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb2:	f7fe fb3d 	bl	8001230 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe fb39 	bl	8001230 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e06d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bcc:	4b29      	ldr	r3, [pc, #164]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be0:	d108      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4921      	ldr	r1, [pc, #132]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a19      	ldr	r1, [r3, #32]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	430b      	orrs	r3, r1
 8002c06:	491b      	ldr	r1, [pc, #108]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c0c:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7fe fb0d 	bl	8001230 <HAL_GetTick>
 8002c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c18:	e008      	b.n	8002c2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1a:	f7fe fb09 	bl	8001230 <HAL_GetTick>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d901      	bls.n	8002c2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e03d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f0      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46a>
 8002c38:	e035      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <HAL_RCC_OscConfig+0x4cc>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c40:	f7fe faf6 	bl	8001230 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe faf2 	bl	8001230 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e026      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5a:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0x498>
 8002c66:	e01e      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d107      	bne.n	8002c80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e019      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_OscConfig+0x500>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0d0      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b67      	ldr	r3, [pc, #412]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 0207 	bic.w	r2, r3, #7
 8002cde:	4965      	ldr	r1, [pc, #404]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0b8      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d020      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0304 	and.w	r3, r3, #4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d10:	4b59      	ldr	r3, [pc, #356]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a58      	ldr	r2, [pc, #352]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d28:	4b53      	ldr	r3, [pc, #332]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a52      	ldr	r2, [pc, #328]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	494d      	ldr	r1, [pc, #308]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d040      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d107      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d115      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e07f      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e073      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e06b      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b39      	ldr	r3, [pc, #228]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4936      	ldr	r1, [pc, #216]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da4:	f7fe fa44 	bl	8001230 <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fa40 	bl	8001230 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e053      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d210      	bcs.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 0207 	bic.w	r2, r3, #7
 8002dea:	4922      	ldr	r1, [pc, #136]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d001      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e032      	b.n	8002e6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4916      	ldr	r1, [pc, #88]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d009      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e2e:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	00db      	lsls	r3, r3, #3
 8002e3c:	490e      	ldr	r1, [pc, #56]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e42:	f000 f821 	bl	8002e88 <HAL_RCC_GetSysClockFreq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	091b      	lsrs	r3, r3, #4
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	490a      	ldr	r1, [pc, #40]	; (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e54:	5ccb      	ldrb	r3, [r1, r3]
 8002e56:	fa22 f303 	lsr.w	r3, r2, r3
 8002e5a:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1cc>)
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e5e:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <HAL_RCC_ClockConfig+0x1d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe f9a2 	bl	80011ac <HAL_InitTick>

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40022000 	.word	0x40022000
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	080042d4 	.word	0x080042d4
 8002e80:	20000000 	.word	0x20000000
 8002e84:	20000004 	.word	0x20000004

08002e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e88:	b490      	push	{r4, r7}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e8e:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xac>)
 8002e90:	1d3c      	adds	r4, r7, #4
 8002e92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e98:	f240 2301 	movw	r3, #513	; 0x201
 8002e9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eb2:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x46>
 8002ec6:	e02b      	b.n	8002f20 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec8:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eca:	623b      	str	r3, [r7, #32]
      break;
 8002ecc:	e02b      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	0c9b      	lsrs	r3, r3, #18
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	3328      	adds	r3, #40	; 0x28
 8002ed8:	443b      	add	r3, r7
 8002eda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ede:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	0c5b      	lsrs	r3, r3, #17
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	3328      	adds	r3, #40	; 0x28
 8002ef6:	443b      	add	r3, r7
 8002ef8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002efc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f02:	fb03 f202 	mul.w	r2, r3, r2
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f0e:	e004      	b.n	8002f1a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	623b      	str	r3, [r7, #32]
      break;
 8002f1e:	e002      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f22:	623b      	str	r3, [r7, #32]
      break;
 8002f24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3728      	adds	r7, #40	; 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc90      	pop	{r4, r7}
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	080042b4 	.word	0x080042b4
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	003d0900 	.word	0x003d0900

08002f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b02      	ldr	r3, [pc, #8]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	20000000 	.word	0x20000000

08002f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f5c:	f7ff fff2 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 0307 	and.w	r3, r3, #7
 8002f6c:	4903      	ldr	r1, [pc, #12]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	080042e4 	.word	0x080042e4

08002f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f84:	f7ff ffde 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0adb      	lsrs	r3, r3, #11
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4903      	ldr	r1, [pc, #12]	; (8002fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	080042e4 	.word	0x080042e4

08002fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <RCC_Delay+0x34>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <RCC_Delay+0x38>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0a5b      	lsrs	r3, r3, #9
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	fb02 f303 	mul.w	r3, r2, r3
 8002fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc4:	bf00      	nop
  }
  while (Delay --);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	60fa      	str	r2, [r7, #12]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f9      	bne.n	8002fc4 <RCC_Delay+0x1c>
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	10624dd3 	.word	0x10624dd3

08002fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d07d      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003000:	2300      	movs	r3, #0
 8003002:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003004:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10d      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003010:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800301a:	61d3      	str	r3, [r2, #28]
 800301c:	4b49      	ldr	r3, [pc, #292]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003028:	2301      	movs	r3, #1
 800302a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800302c:	4b46      	ldr	r3, [pc, #280]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d118      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003038:	4b43      	ldr	r3, [pc, #268]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a42      	ldr	r2, [pc, #264]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800303e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003044:	f7fe f8f4 	bl	8001230 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	e008      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800304c:	f7fe f8f0 	bl	8001230 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e06d      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b3a      	ldr	r3, [pc, #232]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800306a:	4b36      	ldr	r3, [pc, #216]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02e      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	429a      	cmp	r2, r3
 8003086:	d027      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003088:	4b2e      	ldr	r3, [pc, #184]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003090:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003092:	4b2e      	ldr	r3, [pc, #184]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003094:	2201      	movs	r2, #1
 8003096:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003098:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d014      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ae:	f7fe f8bf 	bl	8001230 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe f8bb 	bl	8001230 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e036      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d8:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4917      	ldr	r1, [pc, #92]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	490b      	ldr	r1, [pc, #44]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	4313      	orrs	r3, r2
 8003118:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d008      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003126:	4b07      	ldr	r3, [pc, #28]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4904      	ldr	r1, [pc, #16]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003134:	4313      	orrs	r3, r2
 8003136:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	40007000 	.word	0x40007000
 800314c:	42420440 	.word	0x42420440

08003150 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b08d      	sub	sp, #52	; 0x34
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003158:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800315a:	f107 040c 	add.w	r4, r7, #12
 800315e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003164:	f240 2301 	movw	r3, #513	; 0x201
 8003168:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
 800316e:	2300      	movs	r3, #0
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	2300      	movs	r3, #0
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b10      	cmp	r3, #16
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b10      	cmp	r3, #16
 8003188:	f200 808e 	bhi.w	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d049      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d079      	beq.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003198:	e086      	b.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800319a:	4b49      	ldr	r3, [pc, #292]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d07f      	beq.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	0c9b      	lsrs	r3, r3, #18
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	3330      	adds	r3, #48	; 0x30
 80031b6:	443b      	add	r3, r7
 80031b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80031bc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d017      	beq.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	0c5b      	lsrs	r3, r3, #17
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	3330      	adds	r3, #48	; 0x30
 80031d4:	443b      	add	r3, r7
 80031d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031e6:	4a37      	ldr	r2, [pc, #220]	; (80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031f6:	e004      	b.n	8003202 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	4a33      	ldr	r2, [pc, #204]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320e:	d102      	bne.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003214:	e04a      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	085b      	lsrs	r3, r3, #1
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003224:	e042      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003236:	d108      	bne.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
 8003248:	e01f      	b.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d109      	bne.n	800326a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003256:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003262:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
 8003268:	e00f      	b.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003274:	d11c      	bne.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003282:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003288:	e012      	b.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800328a:	e011      	b.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800328c:	f7ff fe78 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	0b9b      	lsrs	r3, r3, #14
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	3301      	adds	r3, #1
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032a6:	e004      	b.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80032a8:	bf00      	nop
 80032aa:	e002      	b.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80032b0:	bf00      	nop
    }
  }
  return (frequency);
 80032b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3734      	adds	r7, #52	; 0x34
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}
 80032bc:	080042c4 	.word	0x080042c4
 80032c0:	40021000 	.word	0x40021000
 80032c4:	007a1200 	.word	0x007a1200
 80032c8:	003d0900 	.word	0x003d0900
 80032cc:	aaaaaaab 	.word	0xaaaaaaab

080032d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e03f      	b.n	8003362 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fe58 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2224      	movs	r2, #36	; 0x24
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003312:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 f829 	bl	800336c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003328:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003338:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003348:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80033a6:	f023 030c 	bic.w	r3, r3, #12
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	; (8003480 <UART_SetConfig+0x114>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d103      	bne.n	80033dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80033d4:	f7ff fdd4 	bl	8002f80 <HAL_RCC_GetPCLK2Freq>
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	e002      	b.n	80033e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80033dc:	f7ff fdbc 	bl	8002f58 <HAL_RCC_GetPCLK1Freq>
 80033e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009a      	lsls	r2, r3, #2
 80033ec:	441a      	add	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	4a22      	ldr	r2, [pc, #136]	; (8003484 <UART_SetConfig+0x118>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	0119      	lsls	r1, r3, #4
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	009a      	lsls	r2, r3, #2
 800340c:	441a      	add	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	fbb2 f2f3 	udiv	r2, r2, r3
 8003418:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <UART_SetConfig+0x118>)
 800341a:	fba3 0302 	umull	r0, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	2064      	movs	r0, #100	; 0x64
 8003422:	fb00 f303 	mul.w	r3, r0, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	3332      	adds	r3, #50	; 0x32
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <UART_SetConfig+0x118>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003438:	4419      	add	r1, r3
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	009a      	lsls	r2, r3, #2
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <UART_SetConfig+0x118>)
 8003452:	fba3 0302 	umull	r0, r3, r3, r2
 8003456:	095b      	lsrs	r3, r3, #5
 8003458:	2064      	movs	r0, #100	; 0x64
 800345a:	fb00 f303 	mul.w	r3, r0, r3
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	3332      	adds	r3, #50	; 0x32
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <UART_SetConfig+0x118>)
 8003466:	fba2 2303 	umull	r2, r3, r2, r3
 800346a:	095b      	lsrs	r3, r3, #5
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	440a      	add	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40013800 	.word	0x40013800
 8003484:	51eb851f 	.word	0x51eb851f

08003488 <LCD_Init>:
#include "stdarg.h"
#include "stdio.h"

void LCD_Init(LCD_HandleTypeDef *LCD, GPIO_TypeDef *GPIOx, 
                LCD_GPIOTypeDef LCD_Pin, LCD_SizeTypeDef LCD_Size)
{
 8003488:	b082      	sub	sp, #8
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
 8003494:	f107 0110 	add.w	r1, r7, #16
 8003498:	e881 000c 	stmia.w	r1, {r2, r3}
    LCD->GPIOx = GPIOx;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	601a      	str	r2, [r3, #0]
    LCD->LCD_Pin.LCD_RS_PIN = LCD_Pin.LCD_RS_PIN;
 80034a2:	8a3a      	ldrh	r2, [r7, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	809a      	strh	r2, [r3, #4]
    LCD->LCD_Pin.LCD_RW_PIN = LCD_Pin.LCD_RW_PIN;
 80034a8:	8a7a      	ldrh	r2, [r7, #18]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	80da      	strh	r2, [r3, #6]
    LCD->LCD_Pin.LCD_EN_PIN = LCD_Pin.LCD_EN_PIN;
 80034ae:	8aba      	ldrh	r2, [r7, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	811a      	strh	r2, [r3, #8]
    LCD->LCD_Pin.LCD_D7_PIN = LCD_Pin.LCD_D7_PIN;
 80034b4:	8bba      	ldrh	r2, [r7, #28]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	821a      	strh	r2, [r3, #16]
    LCD->LCD_Pin.LCD_D6_PIN = LCD_Pin.LCD_D6_PIN;
 80034ba:	8b7a      	ldrh	r2, [r7, #26]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	81da      	strh	r2, [r3, #14]
    LCD->LCD_Pin.LCD_D5_PIN = LCD_Pin.LCD_D5_PIN;
 80034c0:	8b3a      	ldrh	r2, [r7, #24]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	819a      	strh	r2, [r3, #12]
    LCD->LCD_Pin.LCD_D4_PIN = LCD_Pin.LCD_D4_PIN;
 80034c6:	8afa      	ldrh	r2, [r7, #22]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	815a      	strh	r2, [r3, #10]
    LCD->LCD_Size.LCD_column = LCD_Size.LCD_column;
 80034cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	749a      	strb	r2, [r3, #18]
    LCD->LCD_Size.LCD_row = LCD_Size.LCD_row;
 80034d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	74da      	strb	r2, [r3, #19]

    HAL_Delay(50);
 80034dc:	2032      	movs	r0, #50	; 0x32
 80034de:	f7fd feb1 	bl	8001244 <HAL_Delay>
    /* Function set: 4-bit interface*/
    LCD_SendCommand(LCD, 0x03);
 80034e2:	2103      	movs	r1, #3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f849 	bl	800357c <LCD_SendCommand>
    HAL_Delay(5);
 80034ea:	2005      	movs	r0, #5
 80034ec:	f7fd feaa 	bl	8001244 <HAL_Delay>
    LCD_SendCommand(LCD, 0x03);
 80034f0:	2103      	movs	r1, #3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f842 	bl	800357c <LCD_SendCommand>
    HAL_Delay(1);
 80034f8:	2001      	movs	r0, #1
 80034fa:	f7fd fea3 	bl	8001244 <HAL_Delay>
    LCD_SendCommand(LCD, 0x03);
 80034fe:	2103      	movs	r1, #3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f83b 	bl	800357c <LCD_SendCommand>
    HAL_Delay(1);
 8003506:	2001      	movs	r0, #1
 8003508:	f7fd fe9c 	bl	8001244 <HAL_Delay>
    LCD_SendCommand(LCD, 0x02);
 800350c:	2102      	movs	r1, #2
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f834 	bl	800357c <LCD_SendCommand>
        HAL_Delay(1);
 8003514:	2001      	movs	r0, #1
 8003516:	f7fd fe95 	bl	8001244 <HAL_Delay>
    /*Display OFF, cursor ON*/
    LCD_SendCommand(LCD, 0x28);
 800351a:	2128      	movs	r1, #40	; 0x28
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f82d 	bl	800357c <LCD_SendCommand>
    HAL_Delay(1);
 8003522:	2001      	movs	r0, #1
 8003524:	f7fd fe8e 	bl	8001244 <HAL_Delay>
    LCD_SendCommand(LCD, 0x08);
 8003528:	2108      	movs	r1, #8
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f826 	bl	800357c <LCD_SendCommand>
        HAL_Delay(1);
 8003530:	2001      	movs	r0, #1
 8003532:	f7fd fe87 	bl	8001244 <HAL_Delay>
    /*Clear display*/
    LCD_SendCommand(LCD, 0x01);
 8003536:	2101      	movs	r1, #1
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f81f 	bl	800357c <LCD_SendCommand>
    HAL_Delay(3);
 800353e:	2003      	movs	r0, #3
 8003540:	f7fd fe80 	bl	8001244 <HAL_Delay>
    LCD_SendCommand(LCD, 0x06);
 8003544:	2106      	movs	r1, #6
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f818 	bl	800357c <LCD_SendCommand>
    HAL_Delay(1);
 800354c:	2001      	movs	r0, #1
 800354e:	f7fd fe79 	bl	8001244 <HAL_Delay>
    /* Function set: 5x7 mode for chars*/
    LCD_SendCommand(LCD, 0x0c);
 8003552:	210c      	movs	r1, #12
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f811 	bl	800357c <LCD_SendCommand>
    HAL_Delay(1);
 800355a:	2001      	movs	r0, #1
 800355c:	f7fd fe72 	bl	8001244 <HAL_Delay>
    LCD_SendCommand(LCD, 0x02);
 8003560:	2102      	movs	r1, #2
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f80a 	bl	800357c <LCD_SendCommand>
    HAL_Delay(1);
 8003568:	2001      	movs	r0, #1
 800356a:	f7fd fe6b 	bl	8001244 <HAL_Delay>

}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003578:	b002      	add	sp, #8
 800357a:	4770      	bx	lr

0800357c <LCD_SendCommand>:

void LCD_SendCommand(LCD_HandleTypeDef *LCD, uint8_t command)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
	/* RS = 0: Write Command */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 0);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	889b      	ldrh	r3, [r3, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	4619      	mov	r1, r3
 8003594:	f7ff f8f4 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	88db      	ldrh	r3, [r3, #6]
 80035a0:	2200      	movs	r2, #0
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7ff f8ec 	bl	8002780 <HAL_GPIO_WritePin>
	/* Transmit high nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, (command & 0x10) >> 4);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8959      	ldrh	r1, [r3, #10]
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	111b      	asrs	r3, r3, #4
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	f7ff f8df 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (command & 0x20) >> 5);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	8999      	ldrh	r1, [r3, #12]
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	115b      	asrs	r3, r3, #5
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	f7ff f8d2 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (command & 0x40) >> 6);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	89d9      	ldrh	r1, [r3, #14]
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	119b      	asrs	r3, r3, #6
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	f7ff f8c5 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (command & 0x80) >> 7);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8a19      	ldrh	r1, [r3, #16]
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	09db      	lsrs	r3, r3, #7
 8003602:	b2db      	uxtb	r3, r3
 8003604:	461a      	mov	r2, r3
 8003606:	f7ff f8bb 	bl	8002780 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	891b      	ldrh	r3, [r3, #8]
 8003612:	2201      	movs	r2, #1
 8003614:	4619      	mov	r1, r3
 8003616:	f7ff f8b3 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800361a:	2001      	movs	r0, #1
 800361c:	f7fd fe12 	bl	8001244 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	891b      	ldrh	r3, [r3, #8]
 8003628:	2200      	movs	r2, #0
 800362a:	4619      	mov	r1, r3
 800362c:	f7ff f8a8 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003630:	2001      	movs	r0, #1
 8003632:	f7fd fe07 	bl	8001244 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 0);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	889b      	ldrh	r3, [r3, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	4619      	mov	r1, r3
 8003642:	f7ff f89d 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	88db      	ldrh	r3, [r3, #6]
 800364e:	2200      	movs	r2, #0
 8003650:	4619      	mov	r1, r3
 8003652:	f7ff f895 	bl	8002780 <HAL_GPIO_WritePin>
    /* Transmit low nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, command & 0x01);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	8959      	ldrh	r1, [r3, #10]
 800365e:	78fb      	ldrb	r3, [r7, #3]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	f7ff f88a 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (command & 0x02) >> 1);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	8999      	ldrh	r1, [r3, #12]
 8003674:	78fb      	ldrb	r3, [r7, #3]
 8003676:	105b      	asrs	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	f7ff f87d 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (command & 0x04) >> 2);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	89d9      	ldrh	r1, [r3, #14]
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	109b      	asrs	r3, r3, #2
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	f7ff f870 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (command & 0x08) >> 3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8a19      	ldrh	r1, [r3, #16]
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	10db      	asrs	r3, r3, #3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	f7ff f863 	bl	8002780 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	891b      	ldrh	r3, [r3, #8]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4619      	mov	r1, r3
 80036c6:	f7ff f85b 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80036ca:	2001      	movs	r0, #1
 80036cc:	f7fd fdba 	bl	8001244 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	891b      	ldrh	r3, [r3, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	4619      	mov	r1, r3
 80036dc:	f7ff f850 	bl	8002780 <HAL_GPIO_WritePin>
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <LCD_SendChar>:

void LCD_SendChar(LCD_HandleTypeDef *LCD, uint8_t LCD_data)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
    /* RS = 1: Write data */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 1);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	889b      	ldrh	r3, [r3, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	4619      	mov	r1, r3
 8003700:	f7ff f83e 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	88db      	ldrh	r3, [r3, #6]
 800370c:	2200      	movs	r2, #0
 800370e:	4619      	mov	r1, r3
 8003710:	f7ff f836 	bl	8002780 <HAL_GPIO_WritePin>
    /* Transmit high nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, (LCD_data & 0x10) >> 4);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8959      	ldrh	r1, [r3, #10]
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	111b      	asrs	r3, r3, #4
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	f7ff f829 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (LCD_data & 0x20) >> 5);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8999      	ldrh	r1, [r3, #12]
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	115b      	asrs	r3, r3, #5
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	f7ff f81c 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (LCD_data & 0x40) >> 6);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	89d9      	ldrh	r1, [r3, #14]
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	119b      	asrs	r3, r3, #6
 8003754:	b2db      	uxtb	r3, r3
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	b2db      	uxtb	r3, r3
 800375c:	461a      	mov	r2, r3
 800375e:	f7ff f80f 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (LCD_data & 0x80) >> 7);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8a19      	ldrh	r1, [r3, #16]
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	09db      	lsrs	r3, r3, #7
 800376e:	b2db      	uxtb	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	f7ff f805 	bl	8002780 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	891b      	ldrh	r3, [r3, #8]
 800377e:	2201      	movs	r2, #1
 8003780:	4619      	mov	r1, r3
 8003782:	f7fe fffd 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003786:	2001      	movs	r0, #1
 8003788:	f7fd fd5c 	bl	8001244 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	891b      	ldrh	r3, [r3, #8]
 8003794:	2200      	movs	r2, #0
 8003796:	4619      	mov	r1, r3
 8003798:	f7fe fff2 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800379c:	2001      	movs	r0, #1
 800379e:	f7fd fd51 	bl	8001244 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	889b      	ldrh	r3, [r3, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4619      	mov	r1, r3
 80037ae:	f7fe ffe7 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	88db      	ldrh	r3, [r3, #6]
 80037ba:	2200      	movs	r2, #0
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fe ffdf 	bl	8002780 <HAL_GPIO_WritePin>
    /* Transmit low nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, LCD_data & 0x01);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8959      	ldrh	r1, [r3, #10]
 80037ca:	78fb      	ldrb	r3, [r7, #3]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	f7fe ffd4 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (LCD_data & 0x02) >> 1);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8999      	ldrh	r1, [r3, #12]
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	105b      	asrs	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	f7fe ffc7 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (LCD_data & 0x04) >> 2);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	89d9      	ldrh	r1, [r3, #14]
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	109b      	asrs	r3, r3, #2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	f7fe ffba 	bl	8002780 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (LCD_data & 0x08) >> 3);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8a19      	ldrh	r1, [r3, #16]
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	10db      	asrs	r3, r3, #3
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	f7fe ffad 	bl	8002780 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	891b      	ldrh	r3, [r3, #8]
 800382e:	2201      	movs	r2, #1
 8003830:	4619      	mov	r1, r3
 8003832:	f7fe ffa5 	bl	8002780 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003836:	2001      	movs	r0, #1
 8003838:	f7fd fd04 	bl	8001244 <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	891b      	ldrh	r3, [r3, #8]
 8003844:	2200      	movs	r2, #0
 8003846:	4619      	mov	r1, r3
 8003848:	f7fe ff9a 	bl	8002780 <HAL_GPIO_WritePin>
}
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <LCD_SetCursor>:

void LCD_SetCursor(LCD_HandleTypeDef *LCD, 
                    uint8_t LCD_column_pos, uint8_t LCD_row_pos)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	70fb      	strb	r3, [r7, #3]
 8003860:	4613      	mov	r3, r2
 8003862:	70bb      	strb	r3, [r7, #2]
    uint8_t cursor_command;
    if ((LCD_column_pos < LCD->LCD_Size.LCD_column) && (LCD_row_pos < LCD->LCD_Size.LCD_row))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7c9b      	ldrb	r3, [r3, #18]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	429a      	cmp	r2, r3
 800386c:	d22a      	bcs.n	80038c4 <LCD_SetCursor+0x70>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	7cdb      	ldrb	r3, [r3, #19]
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	429a      	cmp	r2, r3
 8003876:	d225      	bcs.n	80038c4 <LCD_SetCursor+0x70>
    {
        switch (LCD_row_pos)
 8003878:	78bb      	ldrb	r3, [r7, #2]
 800387a:	2b03      	cmp	r3, #3
 800387c:	d824      	bhi.n	80038c8 <LCD_SetCursor+0x74>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <LCD_SetCursor+0x30>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	08003895 	.word	0x08003895
 8003888:	0800389d 	.word	0x0800389d
 800388c:	080038a5 	.word	0x080038a5
 8003890:	080038b5 	.word	0x080038b5
        {
        case 0:
            cursor_command = 0x80 + LCD_column_pos;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	3b80      	subs	r3, #128	; 0x80
 8003898:	73fb      	strb	r3, [r7, #15]
            break;
 800389a:	e016      	b.n	80038ca <LCD_SetCursor+0x76>

        case 1:
            cursor_command = 0xc0 + LCD_column_pos;
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	3b40      	subs	r3, #64	; 0x40
 80038a0:	73fb      	strb	r3, [r7, #15]
            break;
 80038a2:	e012      	b.n	80038ca <LCD_SetCursor+0x76>

        case 2:
            cursor_command = 0x80 + LCD->LCD_Size.LCD_column + LCD_column_pos;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7c9a      	ldrb	r2, [r3, #18]
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	4413      	add	r3, r2
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	3b80      	subs	r3, #128	; 0x80
 80038b0:	73fb      	strb	r3, [r7, #15]
            break;
 80038b2:	e00a      	b.n	80038ca <LCD_SetCursor+0x76>

        case 3:
            cursor_command = 0xc0 + LCD->LCD_Size.LCD_column + LCD_column_pos;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	7c9a      	ldrb	r2, [r3, #18]
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	4413      	add	r3, r2
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3b40      	subs	r3, #64	; 0x40
 80038c0:	73fb      	strb	r3, [r7, #15]
            break;
 80038c2:	e002      	b.n	80038ca <LCD_SetCursor+0x76>
        default:
            break;
        }
    }
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <LCD_SetCursor+0x76>
            break;
 80038c8:	bf00      	nop
    LCD_SendCommand(LCD, cursor_command);
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fe54 	bl	800357c <LCD_SendCommand>
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <LCD_SendString>:

void LCD_SendString(LCD_HandleTypeDef *LCD, char *LCD_string)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < LCD->LCD_Size.LCD_column; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	73fb      	strb	r3, [r7, #15]
 80038ea:	e00a      	b.n	8003902 <LCD_SendString+0x26>
    {
        LCD_SendChar(LCD, LCD_string[i]);
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4619      	mov	r1, r3
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7ff fef6 	bl	80036e8 <LCD_SendChar>
    for (uint8_t i = 0; i < LCD->LCD_Size.LCD_column; i++)
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	3301      	adds	r3, #1
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	7c9b      	ldrb	r3, [r3, #18]
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	429a      	cmp	r2, r3
 800390a:	d3ef      	bcc.n	80038ec <LCD_SendString+0x10>
    }
}
 800390c:	bf00      	nop
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <__errno>:
 8003918:	4b01      	ldr	r3, [pc, #4]	; (8003920 <__errno+0x8>)
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	2000000c 	.word	0x2000000c

08003924 <__libc_init_array>:
 8003924:	b570      	push	{r4, r5, r6, lr}
 8003926:	2600      	movs	r6, #0
 8003928:	4d0c      	ldr	r5, [pc, #48]	; (800395c <__libc_init_array+0x38>)
 800392a:	4c0d      	ldr	r4, [pc, #52]	; (8003960 <__libc_init_array+0x3c>)
 800392c:	1b64      	subs	r4, r4, r5
 800392e:	10a4      	asrs	r4, r4, #2
 8003930:	42a6      	cmp	r6, r4
 8003932:	d109      	bne.n	8003948 <__libc_init_array+0x24>
 8003934:	f000 fc9c 	bl	8004270 <_init>
 8003938:	2600      	movs	r6, #0
 800393a:	4d0a      	ldr	r5, [pc, #40]	; (8003964 <__libc_init_array+0x40>)
 800393c:	4c0a      	ldr	r4, [pc, #40]	; (8003968 <__libc_init_array+0x44>)
 800393e:	1b64      	subs	r4, r4, r5
 8003940:	10a4      	asrs	r4, r4, #2
 8003942:	42a6      	cmp	r6, r4
 8003944:	d105      	bne.n	8003952 <__libc_init_array+0x2e>
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	f855 3b04 	ldr.w	r3, [r5], #4
 800394c:	4798      	blx	r3
 800394e:	3601      	adds	r6, #1
 8003950:	e7ee      	b.n	8003930 <__libc_init_array+0xc>
 8003952:	f855 3b04 	ldr.w	r3, [r5], #4
 8003956:	4798      	blx	r3
 8003958:	3601      	adds	r6, #1
 800395a:	e7f2      	b.n	8003942 <__libc_init_array+0x1e>
 800395c:	08004320 	.word	0x08004320
 8003960:	08004320 	.word	0x08004320
 8003964:	08004320 	.word	0x08004320
 8003968:	08004324 	.word	0x08004324

0800396c <memset>:
 800396c:	4603      	mov	r3, r0
 800396e:	4402      	add	r2, r0
 8003970:	4293      	cmp	r3, r2
 8003972:	d100      	bne.n	8003976 <memset+0xa>
 8003974:	4770      	bx	lr
 8003976:	f803 1b01 	strb.w	r1, [r3], #1
 800397a:	e7f9      	b.n	8003970 <memset+0x4>

0800397c <siprintf>:
 800397c:	b40e      	push	{r1, r2, r3}
 800397e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003982:	b500      	push	{lr}
 8003984:	b09c      	sub	sp, #112	; 0x70
 8003986:	ab1d      	add	r3, sp, #116	; 0x74
 8003988:	9002      	str	r0, [sp, #8]
 800398a:	9006      	str	r0, [sp, #24]
 800398c:	9107      	str	r1, [sp, #28]
 800398e:	9104      	str	r1, [sp, #16]
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <siprintf+0x38>)
 8003992:	4909      	ldr	r1, [pc, #36]	; (80039b8 <siprintf+0x3c>)
 8003994:	f853 2b04 	ldr.w	r2, [r3], #4
 8003998:	9105      	str	r1, [sp, #20]
 800399a:	6800      	ldr	r0, [r0, #0]
 800399c:	a902      	add	r1, sp, #8
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	f000 f868 	bl	8003a74 <_svfiprintf_r>
 80039a4:	2200      	movs	r2, #0
 80039a6:	9b02      	ldr	r3, [sp, #8]
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	b01c      	add	sp, #112	; 0x70
 80039ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80039b0:	b003      	add	sp, #12
 80039b2:	4770      	bx	lr
 80039b4:	2000000c 	.word	0x2000000c
 80039b8:	ffff0208 	.word	0xffff0208

080039bc <__ssputs_r>:
 80039bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039c0:	688e      	ldr	r6, [r1, #8]
 80039c2:	4682      	mov	sl, r0
 80039c4:	429e      	cmp	r6, r3
 80039c6:	460c      	mov	r4, r1
 80039c8:	4690      	mov	r8, r2
 80039ca:	461f      	mov	r7, r3
 80039cc:	d838      	bhi.n	8003a40 <__ssputs_r+0x84>
 80039ce:	898a      	ldrh	r2, [r1, #12]
 80039d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039d4:	d032      	beq.n	8003a3c <__ssputs_r+0x80>
 80039d6:	6825      	ldr	r5, [r4, #0]
 80039d8:	6909      	ldr	r1, [r1, #16]
 80039da:	3301      	adds	r3, #1
 80039dc:	eba5 0901 	sub.w	r9, r5, r1
 80039e0:	6965      	ldr	r5, [r4, #20]
 80039e2:	444b      	add	r3, r9
 80039e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039ec:	106d      	asrs	r5, r5, #1
 80039ee:	429d      	cmp	r5, r3
 80039f0:	bf38      	it	cc
 80039f2:	461d      	movcc	r5, r3
 80039f4:	0553      	lsls	r3, r2, #21
 80039f6:	d531      	bpl.n	8003a5c <__ssputs_r+0xa0>
 80039f8:	4629      	mov	r1, r5
 80039fa:	f000 fb6f 	bl	80040dc <_malloc_r>
 80039fe:	4606      	mov	r6, r0
 8003a00:	b950      	cbnz	r0, 8003a18 <__ssputs_r+0x5c>
 8003a02:	230c      	movs	r3, #12
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	f8ca 3000 	str.w	r3, [sl]
 8003a0c:	89a3      	ldrh	r3, [r4, #12]
 8003a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a18:	464a      	mov	r2, r9
 8003a1a:	6921      	ldr	r1, [r4, #16]
 8003a1c:	f000 face 	bl	8003fbc <memcpy>
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2a:	81a3      	strh	r3, [r4, #12]
 8003a2c:	6126      	str	r6, [r4, #16]
 8003a2e:	444e      	add	r6, r9
 8003a30:	6026      	str	r6, [r4, #0]
 8003a32:	463e      	mov	r6, r7
 8003a34:	6165      	str	r5, [r4, #20]
 8003a36:	eba5 0509 	sub.w	r5, r5, r9
 8003a3a:	60a5      	str	r5, [r4, #8]
 8003a3c:	42be      	cmp	r6, r7
 8003a3e:	d900      	bls.n	8003a42 <__ssputs_r+0x86>
 8003a40:	463e      	mov	r6, r7
 8003a42:	4632      	mov	r2, r6
 8003a44:	4641      	mov	r1, r8
 8003a46:	6820      	ldr	r0, [r4, #0]
 8003a48:	f000 fac6 	bl	8003fd8 <memmove>
 8003a4c:	68a3      	ldr	r3, [r4, #8]
 8003a4e:	2000      	movs	r0, #0
 8003a50:	1b9b      	subs	r3, r3, r6
 8003a52:	60a3      	str	r3, [r4, #8]
 8003a54:	6823      	ldr	r3, [r4, #0]
 8003a56:	4433      	add	r3, r6
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	e7db      	b.n	8003a14 <__ssputs_r+0x58>
 8003a5c:	462a      	mov	r2, r5
 8003a5e:	f000 fbb1 	bl	80041c4 <_realloc_r>
 8003a62:	4606      	mov	r6, r0
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d1e1      	bne.n	8003a2c <__ssputs_r+0x70>
 8003a68:	4650      	mov	r0, sl
 8003a6a:	6921      	ldr	r1, [r4, #16]
 8003a6c:	f000 face 	bl	800400c <_free_r>
 8003a70:	e7c7      	b.n	8003a02 <__ssputs_r+0x46>
	...

08003a74 <_svfiprintf_r>:
 8003a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a78:	4698      	mov	r8, r3
 8003a7a:	898b      	ldrh	r3, [r1, #12]
 8003a7c:	4607      	mov	r7, r0
 8003a7e:	061b      	lsls	r3, r3, #24
 8003a80:	460d      	mov	r5, r1
 8003a82:	4614      	mov	r4, r2
 8003a84:	b09d      	sub	sp, #116	; 0x74
 8003a86:	d50e      	bpl.n	8003aa6 <_svfiprintf_r+0x32>
 8003a88:	690b      	ldr	r3, [r1, #16]
 8003a8a:	b963      	cbnz	r3, 8003aa6 <_svfiprintf_r+0x32>
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	f000 fb25 	bl	80040dc <_malloc_r>
 8003a92:	6028      	str	r0, [r5, #0]
 8003a94:	6128      	str	r0, [r5, #16]
 8003a96:	b920      	cbnz	r0, 8003aa2 <_svfiprintf_r+0x2e>
 8003a98:	230c      	movs	r3, #12
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	e0d1      	b.n	8003c46 <_svfiprintf_r+0x1d2>
 8003aa2:	2340      	movs	r3, #64	; 0x40
 8003aa4:	616b      	str	r3, [r5, #20]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8003aaa:	2320      	movs	r3, #32
 8003aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ab0:	2330      	movs	r3, #48	; 0x30
 8003ab2:	f04f 0901 	mov.w	r9, #1
 8003ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003c60 <_svfiprintf_r+0x1ec>
 8003abe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	469a      	mov	sl, r3
 8003ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003aca:	b10a      	cbz	r2, 8003ad0 <_svfiprintf_r+0x5c>
 8003acc:	2a25      	cmp	r2, #37	; 0x25
 8003ace:	d1f9      	bne.n	8003ac4 <_svfiprintf_r+0x50>
 8003ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ad4:	d00b      	beq.n	8003aee <_svfiprintf_r+0x7a>
 8003ad6:	465b      	mov	r3, fp
 8003ad8:	4622      	mov	r2, r4
 8003ada:	4629      	mov	r1, r5
 8003adc:	4638      	mov	r0, r7
 8003ade:	f7ff ff6d 	bl	80039bc <__ssputs_r>
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	f000 80aa 	beq.w	8003c3c <_svfiprintf_r+0x1c8>
 8003ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003aea:	445a      	add	r2, fp
 8003aec:	9209      	str	r2, [sp, #36]	; 0x24
 8003aee:	f89a 3000 	ldrb.w	r3, [sl]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80a2 	beq.w	8003c3c <_svfiprintf_r+0x1c8>
 8003af8:	2300      	movs	r3, #0
 8003afa:	f04f 32ff 	mov.w	r2, #4294967295
 8003afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b02:	f10a 0a01 	add.w	sl, sl, #1
 8003b06:	9304      	str	r3, [sp, #16]
 8003b08:	9307      	str	r3, [sp, #28]
 8003b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8003b10:	4654      	mov	r4, sl
 8003b12:	2205      	movs	r2, #5
 8003b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b18:	4851      	ldr	r0, [pc, #324]	; (8003c60 <_svfiprintf_r+0x1ec>)
 8003b1a:	f000 fa41 	bl	8003fa0 <memchr>
 8003b1e:	9a04      	ldr	r2, [sp, #16]
 8003b20:	b9d8      	cbnz	r0, 8003b5a <_svfiprintf_r+0xe6>
 8003b22:	06d0      	lsls	r0, r2, #27
 8003b24:	bf44      	itt	mi
 8003b26:	2320      	movmi	r3, #32
 8003b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b2c:	0711      	lsls	r1, r2, #28
 8003b2e:	bf44      	itt	mi
 8003b30:	232b      	movmi	r3, #43	; 0x2b
 8003b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b36:	f89a 3000 	ldrb.w	r3, [sl]
 8003b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b3c:	d015      	beq.n	8003b6a <_svfiprintf_r+0xf6>
 8003b3e:	4654      	mov	r4, sl
 8003b40:	2000      	movs	r0, #0
 8003b42:	f04f 0c0a 	mov.w	ip, #10
 8003b46:	9a07      	ldr	r2, [sp, #28]
 8003b48:	4621      	mov	r1, r4
 8003b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b4e:	3b30      	subs	r3, #48	; 0x30
 8003b50:	2b09      	cmp	r3, #9
 8003b52:	d94e      	bls.n	8003bf2 <_svfiprintf_r+0x17e>
 8003b54:	b1b0      	cbz	r0, 8003b84 <_svfiprintf_r+0x110>
 8003b56:	9207      	str	r2, [sp, #28]
 8003b58:	e014      	b.n	8003b84 <_svfiprintf_r+0x110>
 8003b5a:	eba0 0308 	sub.w	r3, r0, r8
 8003b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8003b62:	4313      	orrs	r3, r2
 8003b64:	46a2      	mov	sl, r4
 8003b66:	9304      	str	r3, [sp, #16]
 8003b68:	e7d2      	b.n	8003b10 <_svfiprintf_r+0x9c>
 8003b6a:	9b03      	ldr	r3, [sp, #12]
 8003b6c:	1d19      	adds	r1, r3, #4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	9103      	str	r1, [sp, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	bfbb      	ittet	lt
 8003b76:	425b      	neglt	r3, r3
 8003b78:	f042 0202 	orrlt.w	r2, r2, #2
 8003b7c:	9307      	strge	r3, [sp, #28]
 8003b7e:	9307      	strlt	r3, [sp, #28]
 8003b80:	bfb8      	it	lt
 8003b82:	9204      	strlt	r2, [sp, #16]
 8003b84:	7823      	ldrb	r3, [r4, #0]
 8003b86:	2b2e      	cmp	r3, #46	; 0x2e
 8003b88:	d10c      	bne.n	8003ba4 <_svfiprintf_r+0x130>
 8003b8a:	7863      	ldrb	r3, [r4, #1]
 8003b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b8e:	d135      	bne.n	8003bfc <_svfiprintf_r+0x188>
 8003b90:	9b03      	ldr	r3, [sp, #12]
 8003b92:	3402      	adds	r4, #2
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	9203      	str	r2, [sp, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bfb8      	it	lt
 8003b9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ba2:	9305      	str	r3, [sp, #20]
 8003ba4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003c64 <_svfiprintf_r+0x1f0>
 8003ba8:	2203      	movs	r2, #3
 8003baa:	4650      	mov	r0, sl
 8003bac:	7821      	ldrb	r1, [r4, #0]
 8003bae:	f000 f9f7 	bl	8003fa0 <memchr>
 8003bb2:	b140      	cbz	r0, 8003bc6 <_svfiprintf_r+0x152>
 8003bb4:	2340      	movs	r3, #64	; 0x40
 8003bb6:	eba0 000a 	sub.w	r0, r0, sl
 8003bba:	fa03 f000 	lsl.w	r0, r3, r0
 8003bbe:	9b04      	ldr	r3, [sp, #16]
 8003bc0:	3401      	adds	r4, #1
 8003bc2:	4303      	orrs	r3, r0
 8003bc4:	9304      	str	r3, [sp, #16]
 8003bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bca:	2206      	movs	r2, #6
 8003bcc:	4826      	ldr	r0, [pc, #152]	; (8003c68 <_svfiprintf_r+0x1f4>)
 8003bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bd2:	f000 f9e5 	bl	8003fa0 <memchr>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d038      	beq.n	8003c4c <_svfiprintf_r+0x1d8>
 8003bda:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <_svfiprintf_r+0x1f8>)
 8003bdc:	bb1b      	cbnz	r3, 8003c26 <_svfiprintf_r+0x1b2>
 8003bde:	9b03      	ldr	r3, [sp, #12]
 8003be0:	3307      	adds	r3, #7
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	3308      	adds	r3, #8
 8003be8:	9303      	str	r3, [sp, #12]
 8003bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bec:	4433      	add	r3, r6
 8003bee:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf0:	e767      	b.n	8003ac2 <_svfiprintf_r+0x4e>
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bfa:	e7a5      	b.n	8003b48 <_svfiprintf_r+0xd4>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f04f 0c0a 	mov.w	ip, #10
 8003c02:	4619      	mov	r1, r3
 8003c04:	3401      	adds	r4, #1
 8003c06:	9305      	str	r3, [sp, #20]
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c0e:	3a30      	subs	r2, #48	; 0x30
 8003c10:	2a09      	cmp	r2, #9
 8003c12:	d903      	bls.n	8003c1c <_svfiprintf_r+0x1a8>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0c5      	beq.n	8003ba4 <_svfiprintf_r+0x130>
 8003c18:	9105      	str	r1, [sp, #20]
 8003c1a:	e7c3      	b.n	8003ba4 <_svfiprintf_r+0x130>
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	2301      	movs	r3, #1
 8003c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c24:	e7f0      	b.n	8003c08 <_svfiprintf_r+0x194>
 8003c26:	ab03      	add	r3, sp, #12
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	462a      	mov	r2, r5
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <_svfiprintf_r+0x1fc>)
 8003c30:	a904      	add	r1, sp, #16
 8003c32:	f3af 8000 	nop.w
 8003c36:	1c42      	adds	r2, r0, #1
 8003c38:	4606      	mov	r6, r0
 8003c3a:	d1d6      	bne.n	8003bea <_svfiprintf_r+0x176>
 8003c3c:	89ab      	ldrh	r3, [r5, #12]
 8003c3e:	065b      	lsls	r3, r3, #25
 8003c40:	f53f af2c 	bmi.w	8003a9c <_svfiprintf_r+0x28>
 8003c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c46:	b01d      	add	sp, #116	; 0x74
 8003c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4c:	ab03      	add	r3, sp, #12
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	462a      	mov	r2, r5
 8003c52:	4638      	mov	r0, r7
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <_svfiprintf_r+0x1fc>)
 8003c56:	a904      	add	r1, sp, #16
 8003c58:	f000 f87c 	bl	8003d54 <_printf_i>
 8003c5c:	e7eb      	b.n	8003c36 <_svfiprintf_r+0x1c2>
 8003c5e:	bf00      	nop
 8003c60:	080042ec 	.word	0x080042ec
 8003c64:	080042f2 	.word	0x080042f2
 8003c68:	080042f6 	.word	0x080042f6
 8003c6c:	00000000 	.word	0x00000000
 8003c70:	080039bd 	.word	0x080039bd

08003c74 <_printf_common>:
 8003c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c78:	4616      	mov	r6, r2
 8003c7a:	4699      	mov	r9, r3
 8003c7c:	688a      	ldr	r2, [r1, #8]
 8003c7e:	690b      	ldr	r3, [r1, #16]
 8003c80:	4607      	mov	r7, r0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	bfb8      	it	lt
 8003c86:	4613      	movlt	r3, r2
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c8e:	460c      	mov	r4, r1
 8003c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c94:	b10a      	cbz	r2, 8003c9a <_printf_common+0x26>
 8003c96:	3301      	adds	r3, #1
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	0699      	lsls	r1, r3, #26
 8003c9e:	bf42      	ittt	mi
 8003ca0:	6833      	ldrmi	r3, [r6, #0]
 8003ca2:	3302      	addmi	r3, #2
 8003ca4:	6033      	strmi	r3, [r6, #0]
 8003ca6:	6825      	ldr	r5, [r4, #0]
 8003ca8:	f015 0506 	ands.w	r5, r5, #6
 8003cac:	d106      	bne.n	8003cbc <_printf_common+0x48>
 8003cae:	f104 0a19 	add.w	sl, r4, #25
 8003cb2:	68e3      	ldr	r3, [r4, #12]
 8003cb4:	6832      	ldr	r2, [r6, #0]
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	42ab      	cmp	r3, r5
 8003cba:	dc28      	bgt.n	8003d0e <_printf_common+0x9a>
 8003cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cc0:	1e13      	subs	r3, r2, #0
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	bf18      	it	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	0692      	lsls	r2, r2, #26
 8003cca:	d42d      	bmi.n	8003d28 <_printf_common+0xb4>
 8003ccc:	4649      	mov	r1, r9
 8003cce:	4638      	mov	r0, r7
 8003cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cd4:	47c0      	blx	r8
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d020      	beq.n	8003d1c <_printf_common+0xa8>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	68e5      	ldr	r5, [r4, #12]
 8003cde:	f003 0306 	and.w	r3, r3, #6
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	bf18      	it	ne
 8003ce6:	2500      	movne	r5, #0
 8003ce8:	6832      	ldr	r2, [r6, #0]
 8003cea:	f04f 0600 	mov.w	r6, #0
 8003cee:	68a3      	ldr	r3, [r4, #8]
 8003cf0:	bf08      	it	eq
 8003cf2:	1aad      	subeq	r5, r5, r2
 8003cf4:	6922      	ldr	r2, [r4, #16]
 8003cf6:	bf08      	it	eq
 8003cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	bfc4      	itt	gt
 8003d00:	1a9b      	subgt	r3, r3, r2
 8003d02:	18ed      	addgt	r5, r5, r3
 8003d04:	341a      	adds	r4, #26
 8003d06:	42b5      	cmp	r5, r6
 8003d08:	d11a      	bne.n	8003d40 <_printf_common+0xcc>
 8003d0a:	2000      	movs	r0, #0
 8003d0c:	e008      	b.n	8003d20 <_printf_common+0xac>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4652      	mov	r2, sl
 8003d12:	4649      	mov	r1, r9
 8003d14:	4638      	mov	r0, r7
 8003d16:	47c0      	blx	r8
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d103      	bne.n	8003d24 <_printf_common+0xb0>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d24:	3501      	adds	r5, #1
 8003d26:	e7c4      	b.n	8003cb2 <_printf_common+0x3e>
 8003d28:	2030      	movs	r0, #48	; 0x30
 8003d2a:	18e1      	adds	r1, r4, r3
 8003d2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d30:	1c5a      	adds	r2, r3, #1
 8003d32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d36:	4422      	add	r2, r4
 8003d38:	3302      	adds	r3, #2
 8003d3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d3e:	e7c5      	b.n	8003ccc <_printf_common+0x58>
 8003d40:	2301      	movs	r3, #1
 8003d42:	4622      	mov	r2, r4
 8003d44:	4649      	mov	r1, r9
 8003d46:	4638      	mov	r0, r7
 8003d48:	47c0      	blx	r8
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d0e6      	beq.n	8003d1c <_printf_common+0xa8>
 8003d4e:	3601      	adds	r6, #1
 8003d50:	e7d9      	b.n	8003d06 <_printf_common+0x92>
	...

08003d54 <_printf_i>:
 8003d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d58:	7e0f      	ldrb	r7, [r1, #24]
 8003d5a:	4691      	mov	r9, r2
 8003d5c:	2f78      	cmp	r7, #120	; 0x78
 8003d5e:	4680      	mov	r8, r0
 8003d60:	460c      	mov	r4, r1
 8003d62:	469a      	mov	sl, r3
 8003d64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d6a:	d807      	bhi.n	8003d7c <_printf_i+0x28>
 8003d6c:	2f62      	cmp	r7, #98	; 0x62
 8003d6e:	d80a      	bhi.n	8003d86 <_printf_i+0x32>
 8003d70:	2f00      	cmp	r7, #0
 8003d72:	f000 80d9 	beq.w	8003f28 <_printf_i+0x1d4>
 8003d76:	2f58      	cmp	r7, #88	; 0x58
 8003d78:	f000 80a4 	beq.w	8003ec4 <_printf_i+0x170>
 8003d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d84:	e03a      	b.n	8003dfc <_printf_i+0xa8>
 8003d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d8a:	2b15      	cmp	r3, #21
 8003d8c:	d8f6      	bhi.n	8003d7c <_printf_i+0x28>
 8003d8e:	a101      	add	r1, pc, #4	; (adr r1, 8003d94 <_printf_i+0x40>)
 8003d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d94:	08003ded 	.word	0x08003ded
 8003d98:	08003e01 	.word	0x08003e01
 8003d9c:	08003d7d 	.word	0x08003d7d
 8003da0:	08003d7d 	.word	0x08003d7d
 8003da4:	08003d7d 	.word	0x08003d7d
 8003da8:	08003d7d 	.word	0x08003d7d
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003d7d 	.word	0x08003d7d
 8003db4:	08003d7d 	.word	0x08003d7d
 8003db8:	08003d7d 	.word	0x08003d7d
 8003dbc:	08003d7d 	.word	0x08003d7d
 8003dc0:	08003f0f 	.word	0x08003f0f
 8003dc4:	08003e31 	.word	0x08003e31
 8003dc8:	08003ef1 	.word	0x08003ef1
 8003dcc:	08003d7d 	.word	0x08003d7d
 8003dd0:	08003d7d 	.word	0x08003d7d
 8003dd4:	08003f31 	.word	0x08003f31
 8003dd8:	08003d7d 	.word	0x08003d7d
 8003ddc:	08003e31 	.word	0x08003e31
 8003de0:	08003d7d 	.word	0x08003d7d
 8003de4:	08003d7d 	.word	0x08003d7d
 8003de8:	08003ef9 	.word	0x08003ef9
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	1d1a      	adds	r2, r3, #4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	602a      	str	r2, [r5, #0]
 8003df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0a4      	b.n	8003f4a <_printf_i+0x1f6>
 8003e00:	6820      	ldr	r0, [r4, #0]
 8003e02:	6829      	ldr	r1, [r5, #0]
 8003e04:	0606      	lsls	r6, r0, #24
 8003e06:	f101 0304 	add.w	r3, r1, #4
 8003e0a:	d50a      	bpl.n	8003e22 <_printf_i+0xce>
 8003e0c:	680e      	ldr	r6, [r1, #0]
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	2e00      	cmp	r6, #0
 8003e12:	da03      	bge.n	8003e1c <_printf_i+0xc8>
 8003e14:	232d      	movs	r3, #45	; 0x2d
 8003e16:	4276      	negs	r6, r6
 8003e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e1c:	230a      	movs	r3, #10
 8003e1e:	485e      	ldr	r0, [pc, #376]	; (8003f98 <_printf_i+0x244>)
 8003e20:	e019      	b.n	8003e56 <_printf_i+0x102>
 8003e22:	680e      	ldr	r6, [r1, #0]
 8003e24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e28:	602b      	str	r3, [r5, #0]
 8003e2a:	bf18      	it	ne
 8003e2c:	b236      	sxthne	r6, r6
 8003e2e:	e7ef      	b.n	8003e10 <_printf_i+0xbc>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	6820      	ldr	r0, [r4, #0]
 8003e34:	1d19      	adds	r1, r3, #4
 8003e36:	6029      	str	r1, [r5, #0]
 8003e38:	0601      	lsls	r1, r0, #24
 8003e3a:	d501      	bpl.n	8003e40 <_printf_i+0xec>
 8003e3c:	681e      	ldr	r6, [r3, #0]
 8003e3e:	e002      	b.n	8003e46 <_printf_i+0xf2>
 8003e40:	0646      	lsls	r6, r0, #25
 8003e42:	d5fb      	bpl.n	8003e3c <_printf_i+0xe8>
 8003e44:	881e      	ldrh	r6, [r3, #0]
 8003e46:	2f6f      	cmp	r7, #111	; 0x6f
 8003e48:	bf0c      	ite	eq
 8003e4a:	2308      	moveq	r3, #8
 8003e4c:	230a      	movne	r3, #10
 8003e4e:	4852      	ldr	r0, [pc, #328]	; (8003f98 <_printf_i+0x244>)
 8003e50:	2100      	movs	r1, #0
 8003e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e56:	6865      	ldr	r5, [r4, #4]
 8003e58:	2d00      	cmp	r5, #0
 8003e5a:	bfa8      	it	ge
 8003e5c:	6821      	ldrge	r1, [r4, #0]
 8003e5e:	60a5      	str	r5, [r4, #8]
 8003e60:	bfa4      	itt	ge
 8003e62:	f021 0104 	bicge.w	r1, r1, #4
 8003e66:	6021      	strge	r1, [r4, #0]
 8003e68:	b90e      	cbnz	r6, 8003e6e <_printf_i+0x11a>
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	d04d      	beq.n	8003f0a <_printf_i+0x1b6>
 8003e6e:	4615      	mov	r5, r2
 8003e70:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e74:	fb03 6711 	mls	r7, r3, r1, r6
 8003e78:	5dc7      	ldrb	r7, [r0, r7]
 8003e7a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e7e:	4637      	mov	r7, r6
 8003e80:	42bb      	cmp	r3, r7
 8003e82:	460e      	mov	r6, r1
 8003e84:	d9f4      	bls.n	8003e70 <_printf_i+0x11c>
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d10b      	bne.n	8003ea2 <_printf_i+0x14e>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	07de      	lsls	r6, r3, #31
 8003e8e:	d508      	bpl.n	8003ea2 <_printf_i+0x14e>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	6861      	ldr	r1, [r4, #4]
 8003e94:	4299      	cmp	r1, r3
 8003e96:	bfde      	ittt	le
 8003e98:	2330      	movle	r3, #48	; 0x30
 8003e9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ea2:	1b52      	subs	r2, r2, r5
 8003ea4:	6122      	str	r2, [r4, #16]
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	4640      	mov	r0, r8
 8003eac:	f8cd a000 	str.w	sl, [sp]
 8003eb0:	aa03      	add	r2, sp, #12
 8003eb2:	f7ff fedf 	bl	8003c74 <_printf_common>
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d14c      	bne.n	8003f54 <_printf_i+0x200>
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	b004      	add	sp, #16
 8003ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec4:	4834      	ldr	r0, [pc, #208]	; (8003f98 <_printf_i+0x244>)
 8003ec6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003eca:	6829      	ldr	r1, [r5, #0]
 8003ecc:	6823      	ldr	r3, [r4, #0]
 8003ece:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ed2:	6029      	str	r1, [r5, #0]
 8003ed4:	061d      	lsls	r5, r3, #24
 8003ed6:	d514      	bpl.n	8003f02 <_printf_i+0x1ae>
 8003ed8:	07df      	lsls	r7, r3, #31
 8003eda:	bf44      	itt	mi
 8003edc:	f043 0320 	orrmi.w	r3, r3, #32
 8003ee0:	6023      	strmi	r3, [r4, #0]
 8003ee2:	b91e      	cbnz	r6, 8003eec <_printf_i+0x198>
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	f023 0320 	bic.w	r3, r3, #32
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	2310      	movs	r3, #16
 8003eee:	e7af      	b.n	8003e50 <_printf_i+0xfc>
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	f043 0320 	orr.w	r3, r3, #32
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	2378      	movs	r3, #120	; 0x78
 8003efa:	4828      	ldr	r0, [pc, #160]	; (8003f9c <_printf_i+0x248>)
 8003efc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f00:	e7e3      	b.n	8003eca <_printf_i+0x176>
 8003f02:	0659      	lsls	r1, r3, #25
 8003f04:	bf48      	it	mi
 8003f06:	b2b6      	uxthmi	r6, r6
 8003f08:	e7e6      	b.n	8003ed8 <_printf_i+0x184>
 8003f0a:	4615      	mov	r5, r2
 8003f0c:	e7bb      	b.n	8003e86 <_printf_i+0x132>
 8003f0e:	682b      	ldr	r3, [r5, #0]
 8003f10:	6826      	ldr	r6, [r4, #0]
 8003f12:	1d18      	adds	r0, r3, #4
 8003f14:	6961      	ldr	r1, [r4, #20]
 8003f16:	6028      	str	r0, [r5, #0]
 8003f18:	0635      	lsls	r5, r6, #24
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	d501      	bpl.n	8003f22 <_printf_i+0x1ce>
 8003f1e:	6019      	str	r1, [r3, #0]
 8003f20:	e002      	b.n	8003f28 <_printf_i+0x1d4>
 8003f22:	0670      	lsls	r0, r6, #25
 8003f24:	d5fb      	bpl.n	8003f1e <_printf_i+0x1ca>
 8003f26:	8019      	strh	r1, [r3, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4615      	mov	r5, r2
 8003f2c:	6123      	str	r3, [r4, #16]
 8003f2e:	e7ba      	b.n	8003ea6 <_printf_i+0x152>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	2100      	movs	r1, #0
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	602a      	str	r2, [r5, #0]
 8003f38:	681d      	ldr	r5, [r3, #0]
 8003f3a:	6862      	ldr	r2, [r4, #4]
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f000 f82f 	bl	8003fa0 <memchr>
 8003f42:	b108      	cbz	r0, 8003f48 <_printf_i+0x1f4>
 8003f44:	1b40      	subs	r0, r0, r5
 8003f46:	6060      	str	r0, [r4, #4]
 8003f48:	6863      	ldr	r3, [r4, #4]
 8003f4a:	6123      	str	r3, [r4, #16]
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f52:	e7a8      	b.n	8003ea6 <_printf_i+0x152>
 8003f54:	462a      	mov	r2, r5
 8003f56:	4649      	mov	r1, r9
 8003f58:	4640      	mov	r0, r8
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	47d0      	blx	sl
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d0ab      	beq.n	8003eba <_printf_i+0x166>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	079b      	lsls	r3, r3, #30
 8003f66:	d413      	bmi.n	8003f90 <_printf_i+0x23c>
 8003f68:	68e0      	ldr	r0, [r4, #12]
 8003f6a:	9b03      	ldr	r3, [sp, #12]
 8003f6c:	4298      	cmp	r0, r3
 8003f6e:	bfb8      	it	lt
 8003f70:	4618      	movlt	r0, r3
 8003f72:	e7a4      	b.n	8003ebe <_printf_i+0x16a>
 8003f74:	2301      	movs	r3, #1
 8003f76:	4632      	mov	r2, r6
 8003f78:	4649      	mov	r1, r9
 8003f7a:	4640      	mov	r0, r8
 8003f7c:	47d0      	blx	sl
 8003f7e:	3001      	adds	r0, #1
 8003f80:	d09b      	beq.n	8003eba <_printf_i+0x166>
 8003f82:	3501      	adds	r5, #1
 8003f84:	68e3      	ldr	r3, [r4, #12]
 8003f86:	9903      	ldr	r1, [sp, #12]
 8003f88:	1a5b      	subs	r3, r3, r1
 8003f8a:	42ab      	cmp	r3, r5
 8003f8c:	dcf2      	bgt.n	8003f74 <_printf_i+0x220>
 8003f8e:	e7eb      	b.n	8003f68 <_printf_i+0x214>
 8003f90:	2500      	movs	r5, #0
 8003f92:	f104 0619 	add.w	r6, r4, #25
 8003f96:	e7f5      	b.n	8003f84 <_printf_i+0x230>
 8003f98:	080042fd 	.word	0x080042fd
 8003f9c:	0800430e 	.word	0x0800430e

08003fa0 <memchr>:
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	b2c9      	uxtb	r1, r1
 8003fa6:	4402      	add	r2, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	d101      	bne.n	8003fb2 <memchr+0x12>
 8003fae:	2000      	movs	r0, #0
 8003fb0:	e003      	b.n	8003fba <memchr+0x1a>
 8003fb2:	7804      	ldrb	r4, [r0, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	428c      	cmp	r4, r1
 8003fb8:	d1f6      	bne.n	8003fa8 <memchr+0x8>
 8003fba:	bd10      	pop	{r4, pc}

08003fbc <memcpy>:
 8003fbc:	440a      	add	r2, r1
 8003fbe:	4291      	cmp	r1, r2
 8003fc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fc4:	d100      	bne.n	8003fc8 <memcpy+0xc>
 8003fc6:	4770      	bx	lr
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fce:	4291      	cmp	r1, r2
 8003fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd4:	d1f9      	bne.n	8003fca <memcpy+0xe>
 8003fd6:	bd10      	pop	{r4, pc}

08003fd8 <memmove>:
 8003fd8:	4288      	cmp	r0, r1
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	eb01 0402 	add.w	r4, r1, r2
 8003fe0:	d902      	bls.n	8003fe8 <memmove+0x10>
 8003fe2:	4284      	cmp	r4, r0
 8003fe4:	4623      	mov	r3, r4
 8003fe6:	d807      	bhi.n	8003ff8 <memmove+0x20>
 8003fe8:	1e43      	subs	r3, r0, #1
 8003fea:	42a1      	cmp	r1, r4
 8003fec:	d008      	beq.n	8004000 <memmove+0x28>
 8003fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ff6:	e7f8      	b.n	8003fea <memmove+0x12>
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	4402      	add	r2, r0
 8003ffc:	428a      	cmp	r2, r1
 8003ffe:	d100      	bne.n	8004002 <memmove+0x2a>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800400a:	e7f7      	b.n	8003ffc <memmove+0x24>

0800400c <_free_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4605      	mov	r5, r0
 8004010:	2900      	cmp	r1, #0
 8004012:	d040      	beq.n	8004096 <_free_r+0x8a>
 8004014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004018:	1f0c      	subs	r4, r1, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfb8      	it	lt
 800401e:	18e4      	addlt	r4, r4, r3
 8004020:	f000 f910 	bl	8004244 <__malloc_lock>
 8004024:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <_free_r+0x8c>)
 8004026:	6813      	ldr	r3, [r2, #0]
 8004028:	b933      	cbnz	r3, 8004038 <_free_r+0x2c>
 800402a:	6063      	str	r3, [r4, #4]
 800402c:	6014      	str	r4, [r2, #0]
 800402e:	4628      	mov	r0, r5
 8004030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004034:	f000 b90c 	b.w	8004250 <__malloc_unlock>
 8004038:	42a3      	cmp	r3, r4
 800403a:	d908      	bls.n	800404e <_free_r+0x42>
 800403c:	6820      	ldr	r0, [r4, #0]
 800403e:	1821      	adds	r1, r4, r0
 8004040:	428b      	cmp	r3, r1
 8004042:	bf01      	itttt	eq
 8004044:	6819      	ldreq	r1, [r3, #0]
 8004046:	685b      	ldreq	r3, [r3, #4]
 8004048:	1809      	addeq	r1, r1, r0
 800404a:	6021      	streq	r1, [r4, #0]
 800404c:	e7ed      	b.n	800402a <_free_r+0x1e>
 800404e:	461a      	mov	r2, r3
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	b10b      	cbz	r3, 8004058 <_free_r+0x4c>
 8004054:	42a3      	cmp	r3, r4
 8004056:	d9fa      	bls.n	800404e <_free_r+0x42>
 8004058:	6811      	ldr	r1, [r2, #0]
 800405a:	1850      	adds	r0, r2, r1
 800405c:	42a0      	cmp	r0, r4
 800405e:	d10b      	bne.n	8004078 <_free_r+0x6c>
 8004060:	6820      	ldr	r0, [r4, #0]
 8004062:	4401      	add	r1, r0
 8004064:	1850      	adds	r0, r2, r1
 8004066:	4283      	cmp	r3, r0
 8004068:	6011      	str	r1, [r2, #0]
 800406a:	d1e0      	bne.n	800402e <_free_r+0x22>
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	4401      	add	r1, r0
 8004072:	6011      	str	r1, [r2, #0]
 8004074:	6053      	str	r3, [r2, #4]
 8004076:	e7da      	b.n	800402e <_free_r+0x22>
 8004078:	d902      	bls.n	8004080 <_free_r+0x74>
 800407a:	230c      	movs	r3, #12
 800407c:	602b      	str	r3, [r5, #0]
 800407e:	e7d6      	b.n	800402e <_free_r+0x22>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	1821      	adds	r1, r4, r0
 8004084:	428b      	cmp	r3, r1
 8004086:	bf01      	itttt	eq
 8004088:	6819      	ldreq	r1, [r3, #0]
 800408a:	685b      	ldreq	r3, [r3, #4]
 800408c:	1809      	addeq	r1, r1, r0
 800408e:	6021      	streq	r1, [r4, #0]
 8004090:	6063      	str	r3, [r4, #4]
 8004092:	6054      	str	r4, [r2, #4]
 8004094:	e7cb      	b.n	800402e <_free_r+0x22>
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	200001bc 	.word	0x200001bc

0800409c <sbrk_aligned>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4e0e      	ldr	r6, [pc, #56]	; (80040d8 <sbrk_aligned+0x3c>)
 80040a0:	460c      	mov	r4, r1
 80040a2:	6831      	ldr	r1, [r6, #0]
 80040a4:	4605      	mov	r5, r0
 80040a6:	b911      	cbnz	r1, 80040ae <sbrk_aligned+0x12>
 80040a8:	f000 f8bc 	bl	8004224 <_sbrk_r>
 80040ac:	6030      	str	r0, [r6, #0]
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 f8b7 	bl	8004224 <_sbrk_r>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	d00a      	beq.n	80040d0 <sbrk_aligned+0x34>
 80040ba:	1cc4      	adds	r4, r0, #3
 80040bc:	f024 0403 	bic.w	r4, r4, #3
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d007      	beq.n	80040d4 <sbrk_aligned+0x38>
 80040c4:	1a21      	subs	r1, r4, r0
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 f8ac 	bl	8004224 <_sbrk_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d101      	bne.n	80040d4 <sbrk_aligned+0x38>
 80040d0:	f04f 34ff 	mov.w	r4, #4294967295
 80040d4:	4620      	mov	r0, r4
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	200001c0 	.word	0x200001c0

080040dc <_malloc_r>:
 80040dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e0:	1ccd      	adds	r5, r1, #3
 80040e2:	f025 0503 	bic.w	r5, r5, #3
 80040e6:	3508      	adds	r5, #8
 80040e8:	2d0c      	cmp	r5, #12
 80040ea:	bf38      	it	cc
 80040ec:	250c      	movcc	r5, #12
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	4607      	mov	r7, r0
 80040f2:	db01      	blt.n	80040f8 <_malloc_r+0x1c>
 80040f4:	42a9      	cmp	r1, r5
 80040f6:	d905      	bls.n	8004104 <_malloc_r+0x28>
 80040f8:	230c      	movs	r3, #12
 80040fa:	2600      	movs	r6, #0
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4630      	mov	r0, r6
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004104:	4e2e      	ldr	r6, [pc, #184]	; (80041c0 <_malloc_r+0xe4>)
 8004106:	f000 f89d 	bl	8004244 <__malloc_lock>
 800410a:	6833      	ldr	r3, [r6, #0]
 800410c:	461c      	mov	r4, r3
 800410e:	bb34      	cbnz	r4, 800415e <_malloc_r+0x82>
 8004110:	4629      	mov	r1, r5
 8004112:	4638      	mov	r0, r7
 8004114:	f7ff ffc2 	bl	800409c <sbrk_aligned>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	4604      	mov	r4, r0
 800411c:	d14d      	bne.n	80041ba <_malloc_r+0xde>
 800411e:	6834      	ldr	r4, [r6, #0]
 8004120:	4626      	mov	r6, r4
 8004122:	2e00      	cmp	r6, #0
 8004124:	d140      	bne.n	80041a8 <_malloc_r+0xcc>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	4631      	mov	r1, r6
 800412a:	4638      	mov	r0, r7
 800412c:	eb04 0803 	add.w	r8, r4, r3
 8004130:	f000 f878 	bl	8004224 <_sbrk_r>
 8004134:	4580      	cmp	r8, r0
 8004136:	d13a      	bne.n	80041ae <_malloc_r+0xd2>
 8004138:	6821      	ldr	r1, [r4, #0]
 800413a:	3503      	adds	r5, #3
 800413c:	1a6d      	subs	r5, r5, r1
 800413e:	f025 0503 	bic.w	r5, r5, #3
 8004142:	3508      	adds	r5, #8
 8004144:	2d0c      	cmp	r5, #12
 8004146:	bf38      	it	cc
 8004148:	250c      	movcc	r5, #12
 800414a:	4638      	mov	r0, r7
 800414c:	4629      	mov	r1, r5
 800414e:	f7ff ffa5 	bl	800409c <sbrk_aligned>
 8004152:	3001      	adds	r0, #1
 8004154:	d02b      	beq.n	80041ae <_malloc_r+0xd2>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	442b      	add	r3, r5
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	e00e      	b.n	800417c <_malloc_r+0xa0>
 800415e:	6822      	ldr	r2, [r4, #0]
 8004160:	1b52      	subs	r2, r2, r5
 8004162:	d41e      	bmi.n	80041a2 <_malloc_r+0xc6>
 8004164:	2a0b      	cmp	r2, #11
 8004166:	d916      	bls.n	8004196 <_malloc_r+0xba>
 8004168:	1961      	adds	r1, r4, r5
 800416a:	42a3      	cmp	r3, r4
 800416c:	6025      	str	r5, [r4, #0]
 800416e:	bf18      	it	ne
 8004170:	6059      	strne	r1, [r3, #4]
 8004172:	6863      	ldr	r3, [r4, #4]
 8004174:	bf08      	it	eq
 8004176:	6031      	streq	r1, [r6, #0]
 8004178:	5162      	str	r2, [r4, r5]
 800417a:	604b      	str	r3, [r1, #4]
 800417c:	4638      	mov	r0, r7
 800417e:	f104 060b 	add.w	r6, r4, #11
 8004182:	f000 f865 	bl	8004250 <__malloc_unlock>
 8004186:	f026 0607 	bic.w	r6, r6, #7
 800418a:	1d23      	adds	r3, r4, #4
 800418c:	1af2      	subs	r2, r6, r3
 800418e:	d0b6      	beq.n	80040fe <_malloc_r+0x22>
 8004190:	1b9b      	subs	r3, r3, r6
 8004192:	50a3      	str	r3, [r4, r2]
 8004194:	e7b3      	b.n	80040fe <_malloc_r+0x22>
 8004196:	6862      	ldr	r2, [r4, #4]
 8004198:	42a3      	cmp	r3, r4
 800419a:	bf0c      	ite	eq
 800419c:	6032      	streq	r2, [r6, #0]
 800419e:	605a      	strne	r2, [r3, #4]
 80041a0:	e7ec      	b.n	800417c <_malloc_r+0xa0>
 80041a2:	4623      	mov	r3, r4
 80041a4:	6864      	ldr	r4, [r4, #4]
 80041a6:	e7b2      	b.n	800410e <_malloc_r+0x32>
 80041a8:	4634      	mov	r4, r6
 80041aa:	6876      	ldr	r6, [r6, #4]
 80041ac:	e7b9      	b.n	8004122 <_malloc_r+0x46>
 80041ae:	230c      	movs	r3, #12
 80041b0:	4638      	mov	r0, r7
 80041b2:	603b      	str	r3, [r7, #0]
 80041b4:	f000 f84c 	bl	8004250 <__malloc_unlock>
 80041b8:	e7a1      	b.n	80040fe <_malloc_r+0x22>
 80041ba:	6025      	str	r5, [r4, #0]
 80041bc:	e7de      	b.n	800417c <_malloc_r+0xa0>
 80041be:	bf00      	nop
 80041c0:	200001bc 	.word	0x200001bc

080041c4 <_realloc_r>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	4680      	mov	r8, r0
 80041ca:	4614      	mov	r4, r2
 80041cc:	460e      	mov	r6, r1
 80041ce:	b921      	cbnz	r1, 80041da <_realloc_r+0x16>
 80041d0:	4611      	mov	r1, r2
 80041d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041d6:	f7ff bf81 	b.w	80040dc <_malloc_r>
 80041da:	b92a      	cbnz	r2, 80041e8 <_realloc_r+0x24>
 80041dc:	f7ff ff16 	bl	800400c <_free_r>
 80041e0:	4625      	mov	r5, r4
 80041e2:	4628      	mov	r0, r5
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e8:	f000 f838 	bl	800425c <_malloc_usable_size_r>
 80041ec:	4284      	cmp	r4, r0
 80041ee:	4607      	mov	r7, r0
 80041f0:	d802      	bhi.n	80041f8 <_realloc_r+0x34>
 80041f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041f6:	d812      	bhi.n	800421e <_realloc_r+0x5a>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4640      	mov	r0, r8
 80041fc:	f7ff ff6e 	bl	80040dc <_malloc_r>
 8004200:	4605      	mov	r5, r0
 8004202:	2800      	cmp	r0, #0
 8004204:	d0ed      	beq.n	80041e2 <_realloc_r+0x1e>
 8004206:	42bc      	cmp	r4, r7
 8004208:	4622      	mov	r2, r4
 800420a:	4631      	mov	r1, r6
 800420c:	bf28      	it	cs
 800420e:	463a      	movcs	r2, r7
 8004210:	f7ff fed4 	bl	8003fbc <memcpy>
 8004214:	4631      	mov	r1, r6
 8004216:	4640      	mov	r0, r8
 8004218:	f7ff fef8 	bl	800400c <_free_r>
 800421c:	e7e1      	b.n	80041e2 <_realloc_r+0x1e>
 800421e:	4635      	mov	r5, r6
 8004220:	e7df      	b.n	80041e2 <_realloc_r+0x1e>
	...

08004224 <_sbrk_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	2300      	movs	r3, #0
 8004228:	4d05      	ldr	r5, [pc, #20]	; (8004240 <_sbrk_r+0x1c>)
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	602b      	str	r3, [r5, #0]
 8004230:	f7fc ff44 	bl	80010bc <_sbrk>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_sbrk_r+0x1a>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_sbrk_r+0x1a>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	200001c4 	.word	0x200001c4

08004244 <__malloc_lock>:
 8004244:	4801      	ldr	r0, [pc, #4]	; (800424c <__malloc_lock+0x8>)
 8004246:	f000 b811 	b.w	800426c <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	200001c8 	.word	0x200001c8

08004250 <__malloc_unlock>:
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <__malloc_unlock+0x8>)
 8004252:	f000 b80c 	b.w	800426e <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	200001c8 	.word	0x200001c8

0800425c <_malloc_usable_size_r>:
 800425c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004260:	1f18      	subs	r0, r3, #4
 8004262:	2b00      	cmp	r3, #0
 8004264:	bfbc      	itt	lt
 8004266:	580b      	ldrlt	r3, [r1, r0]
 8004268:	18c0      	addlt	r0, r0, r3
 800426a:	4770      	bx	lr

0800426c <__retarget_lock_acquire_recursive>:
 800426c:	4770      	bx	lr

0800426e <__retarget_lock_release_recursive>:
 800426e:	4770      	bx	lr

08004270 <_init>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	bf00      	nop
 8004274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004276:	bc08      	pop	{r3}
 8004278:	469e      	mov	lr, r3
 800427a:	4770      	bx	lr

0800427c <_fini>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr
