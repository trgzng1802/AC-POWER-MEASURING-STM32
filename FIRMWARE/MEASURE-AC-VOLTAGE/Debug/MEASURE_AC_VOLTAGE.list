
MEASURE_AC_VOLTAGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000451c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080046c8  080046c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c8  080046c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08004740  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004740  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006811  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac7  00000000  00000000  000268aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00028378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a0  00000000  00000000  00028a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b72  00000000  00000000  00028fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d23  00000000  00000000  00040b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008601d  00000000  00000000  00049835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf852  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f24  00000000  00000000  000cf8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004614 	.word	0x08004614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004614 	.word	0x08004614

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__aeabi_f2uiz>:
 8000f84:	0042      	lsls	r2, r0, #1
 8000f86:	d20e      	bcs.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f88:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f8c:	d30b      	bcc.n	8000fa6 <__aeabi_f2uiz+0x22>
 8000f8e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f92:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f96:	d409      	bmi.n	8000fac <__aeabi_f2uiz+0x28>
 8000f98:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fa0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2uiz+0x32>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d102      	bne.n	8000fbc <__aeabi_f2uiz+0x38>
 8000fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fba:	4770      	bx	lr
 8000fbc:	f04f 0000 	mov.w	r0, #0
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	 sample_count++;
 8000fd0:	4ba1      	ldr	r3, [pc, #644]	; (8001258 <HAL_ADC_ConvCpltCallback+0x290>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b9f      	ldr	r3, [pc, #636]	; (8001258 <HAL_ADC_ConvCpltCallback+0x290>)
 8000fda:	701a      	strb	r2, [r3, #0]

	 volt_sum += (adc_scan_value[1] * ADC_CALC - VOLT_OFFSET);
 8000fdc:	4b9f      	ldr	r3, [pc, #636]	; (800125c <HAL_ADC_ConvCpltCallback+0x294>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fa19 	bl	8000418 <__aeabi_f2d>
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	460d      	mov	r5, r1
 8000fea:	4b9d      	ldr	r3, [pc, #628]	; (8001260 <HAL_ADC_ConvCpltCallback+0x298>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa00 	bl	80003f4 <__aeabi_i2d>
 8000ff4:	a38e      	add	r3, pc, #568	; (adr r3, 8001230 <HAL_ADC_ConvCpltCallback+0x268>)
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f7ff fa65 	bl	80004c8 <__aeabi_dmul>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	a38c      	add	r3, pc, #560	; (adr r3, 8001238 <HAL_ADC_ConvCpltCallback+0x270>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff f8a4 	bl	8000158 <__aeabi_dsub>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff f8a0 	bl	800015c <__adddf3>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd00 	bl	8000a28 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	4a8c      	ldr	r2, [pc, #560]	; (800125c <HAL_ADC_ConvCpltCallback+0x294>)
 800102c:	6013      	str	r3, [r2, #0]
	 curr_sum += (adc_scan_value[0] * ADC_CALC - CURR_OFFSET);
 800102e:	4b8d      	ldr	r3, [pc, #564]	; (8001264 <HAL_ADC_ConvCpltCallback+0x29c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f9f0 	bl	8000418 <__aeabi_f2d>
 8001038:	4604      	mov	r4, r0
 800103a:	460d      	mov	r5, r1
 800103c:	4b88      	ldr	r3, [pc, #544]	; (8001260 <HAL_ADC_ConvCpltCallback+0x298>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f9d7 	bl	80003f4 <__aeabi_i2d>
 8001046:	a37a      	add	r3, pc, #488	; (adr r3, 8001230 <HAL_ADC_ConvCpltCallback+0x268>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fa3c 	bl	80004c8 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	a379      	add	r3, pc, #484	; (adr r3, 8001240 <HAL_ADC_ConvCpltCallback+0x278>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff f87b 	bl	8000158 <__aeabi_dsub>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4620      	mov	r0, r4
 8001068:	4629      	mov	r1, r5
 800106a:	f7ff f877 	bl	800015c <__adddf3>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fcd7 	bl	8000a28 <__aeabi_d2f>
 800107a:	4603      	mov	r3, r0
 800107c:	4a79      	ldr	r2, [pc, #484]	; (8001264 <HAL_ADC_ConvCpltCallback+0x29c>)
 800107e:	6013      	str	r3, [r2, #0]

	 if (sample_count == SAMPLE)
 8001080:	4b75      	ldr	r3, [pc, #468]	; (8001258 <HAL_ADC_ConvCpltCallback+0x290>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b12      	cmp	r3, #18
 8001086:	d144      	bne.n	8001112 <HAL_ADC_ConvCpltCallback+0x14a>
	 {
		 sum_count++;
 8001088:	4b77      	ldr	r3, [pc, #476]	; (8001268 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b75      	ldr	r3, [pc, #468]	; (8001268 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8001092:	701a      	strb	r2, [r3, #0]

		 volt_sum = volt_sum / SAMPLE;
 8001094:	4b71      	ldr	r3, [pc, #452]	; (800125c <HAL_ADC_ConvCpltCallback+0x294>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4974      	ldr	r1, [pc, #464]	; (800126c <HAL_ADC_ConvCpltCallback+0x2a4>)
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fed6 	bl	8000e4c <__aeabi_fdiv>
 80010a0:	4603      	mov	r3, r0
 80010a2:	461a      	mov	r2, r3
 80010a4:	4b6d      	ldr	r3, [pc, #436]	; (800125c <HAL_ADC_ConvCpltCallback+0x294>)
 80010a6:	601a      	str	r2, [r3, #0]
		 curr_sum = curr_sum / SAMPLE;
 80010a8:	4b6e      	ldr	r3, [pc, #440]	; (8001264 <HAL_ADC_ConvCpltCallback+0x29c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	496f      	ldr	r1, [pc, #444]	; (800126c <HAL_ADC_ConvCpltCallback+0x2a4>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fecc 	bl	8000e4c <__aeabi_fdiv>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_ADC_ConvCpltCallback+0x29c>)
 80010ba:	601a      	str	r2, [r3, #0]

		 volt_avg += (volt_sum * volt_sum);
 80010bc:	4b67      	ldr	r3, [pc, #412]	; (800125c <HAL_ADC_ConvCpltCallback+0x294>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a66      	ldr	r2, [pc, #408]	; (800125c <HAL_ADC_ConvCpltCallback+0x294>)
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe0c 	bl	8000ce4 <__aeabi_fmul>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f7ff fcfc 	bl	8000ad4 <__addsf3>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	4b63      	ldr	r3, [pc, #396]	; (8001270 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80010e2:	601a      	str	r2, [r3, #0]
		 curr_avg += (curr_sum * curr_sum);
 80010e4:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <HAL_ADC_ConvCpltCallback+0x29c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a5e      	ldr	r2, [pc, #376]	; (8001264 <HAL_ADC_ConvCpltCallback+0x29c>)
 80010ea:	6812      	ldr	r2, [r2, #0]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fdf8 	bl	8000ce4 <__aeabi_fmul>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4610      	mov	r0, r2
 8001100:	f7ff fce8 	bl	8000ad4 <__addsf3>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b5a      	ldr	r3, [pc, #360]	; (8001274 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800110a:	601a      	str	r2, [r3, #0]

		 sample_count = 0;
 800110c:	4b52      	ldr	r3, [pc, #328]	; (8001258 <HAL_ADC_ConvCpltCallback+0x290>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	 }
	 if (sum_count == SUM_VALUE)
 8001112:	4b55      	ldr	r3, [pc, #340]	; (8001268 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b2c      	cmp	r3, #44	; 0x2c
 8001118:	f040 8084 	bne.w	8001224 <HAL_ADC_ConvCpltCallback+0x25c>
	 {
		 temp_curr = sqrt(curr_avg / SUM_VALUE);
 800111c:	4b55      	ldr	r3, [pc, #340]	; (8001274 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4955      	ldr	r1, [pc, #340]	; (8001278 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fe92 	bl	8000e4c <__aeabi_fdiv>
 8001128:	4603      	mov	r3, r0
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f974 	bl	8000418 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f003 f998 	bl	800446c <sqrt>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f7ff fc70 	bl	8000a28 <__aeabi_d2f>
 8001148:	4603      	mov	r3, r0
 800114a:	4a4c      	ldr	r2, [pc, #304]	; (800127c <HAL_ADC_ConvCpltCallback+0x2b4>)
 800114c:	6013      	str	r3, [r2, #0]
		 temp_volt = sqrt(volt_avg / SUM_VALUE);
 800114e:	4b48      	ldr	r3, [pc, #288]	; (8001270 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4949      	ldr	r1, [pc, #292]	; (8001278 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe79 	bl	8000e4c <__aeabi_fdiv>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f95b 	bl	8000418 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f003 f97f 	bl	800446c <sqrt>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fc57 	bl	8000a28 <__aeabi_d2f>
 800117a:	4603      	mov	r3, r0
 800117c:	4a40      	ldr	r2, [pc, #256]	; (8001280 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800117e:	6013      	str	r3, [r2, #0]
		 Vrms = (sqrt(volt_avg / SUM_VALUE)) * VOLT_GAIN;
 8001180:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	493c      	ldr	r1, [pc, #240]	; (8001278 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fe60 	bl	8000e4c <__aeabi_fdiv>
 800118c:	4603      	mov	r3, r0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f942 	bl	8000418 <__aeabi_f2d>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f003 f966 	bl	800446c <sqrt>
 80011a0:	a329      	add	r3, pc, #164	; (adr r3, 8001248 <HAL_ADC_ConvCpltCallback+0x280>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff f98f 	bl	80004c8 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fc39 	bl	8000a28 <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a32      	ldr	r2, [pc, #200]	; (8001284 <HAL_ADC_ConvCpltCallback+0x2bc>)
 80011ba:	6013      	str	r3, [r2, #0]
		 Irms = (sqrt(curr_avg / SUM_VALUE)) * CURR_GAIN;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	492d      	ldr	r1, [pc, #180]	; (8001278 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fe42 	bl	8000e4c <__aeabi_fdiv>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f924 	bl	8000418 <__aeabi_f2d>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f003 f948 	bl	800446c <sqrt>
 80011dc:	a31c      	add	r3, pc, #112	; (adr r3, 8001250 <HAL_ADC_ConvCpltCallback+0x288>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff f971 	bl	80004c8 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f7ff fc1b 	bl	8000a28 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4a24      	ldr	r2, [pc, #144]	; (8001288 <HAL_ADC_ConvCpltCallback+0x2c0>)
 80011f6:	6013      	str	r3, [r2, #0]

		 sum_count = 0;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	; (8001268 <HAL_ADC_ConvCpltCallback+0x2a0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
		 sample_count = 0;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_ADC_ConvCpltCallback+0x290>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
		 volt_sum = 0;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_ADC_ConvCpltCallback+0x294>)
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
		 volt_avg = 0;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
		 curr_sum = 0;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_ADC_ConvCpltCallback+0x29c>)
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
		 curr_avg = 0;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
	 }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	f3af 8000 	nop.w
 8001230:	c316371b 	.word	0xc316371b
 8001234:	3f4a65be 	.word	0x3f4a65be
 8001238:	4dd2f1aa 	.word	0x4dd2f1aa
 800123c:	3ffb1062 	.word	0x3ffb1062
 8001240:	98c7e282 	.word	0x98c7e282
 8001244:	400416bb 	.word	0x400416bb
 8001248:	00000000 	.word	0x00000000
 800124c:	40a4dc00 	.word	0x40a4dc00
 8001250:	00000000 	.word	0x00000000
 8001254:	40552000 	.word	0x40552000
 8001258:	2000014c 	.word	0x2000014c
 800125c:	20000130 	.word	0x20000130
 8001260:	20000128 	.word	0x20000128
 8001264:	2000012c 	.word	0x2000012c
 8001268:	2000014d 	.word	0x2000014d
 800126c:	41900000 	.word	0x41900000
 8001270:	20000134 	.word	0x20000134
 8001274:	20000138 	.word	0x20000138
 8001278:	42300000 	.word	0x42300000
 800127c:	20000144 	.word	0x20000144
 8001280:	20000148 	.word	0x20000148
 8001284:	2000013c 	.word	0x2000013c
 8001288:	20000140 	.word	0x20000140

0800128c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b085      	sub	sp, #20
 8001290:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001292:	f000 fb01 	bl	8001898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001296:	f000 f8b7 	bl	8001408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129a:	f000 f97d 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 800129e:	f000 f95d 	bl	800155c <MX_DMA_Init>
  MX_ADC1_Init();
 80012a2:	f000 f90d 	bl	80014c0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  LCD_GPIO.LCD_RS_PIN = LCD_RS_Pin;
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <main+0x140>)
 80012a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012ac:	801a      	strh	r2, [r3, #0]
  LCD_GPIO.LCD_RW_PIN = LCD_RW_Pin;
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <main+0x140>)
 80012b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b4:	805a      	strh	r2, [r3, #2]
  LCD_GPIO.LCD_EN_PIN = LCD_EN_Pin;
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <main+0x140>)
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	809a      	strh	r2, [r3, #4]
  LCD_GPIO.LCD_D4_PIN = LCD_D4_Pin;
 80012bc:	4b43      	ldr	r3, [pc, #268]	; (80013cc <main+0x140>)
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	80da      	strh	r2, [r3, #6]
  LCD_GPIO.LCD_D5_PIN = LCD_D5_Pin;
 80012c2:	4b42      	ldr	r3, [pc, #264]	; (80013cc <main+0x140>)
 80012c4:	2220      	movs	r2, #32
 80012c6:	811a      	strh	r2, [r3, #8]
  LCD_GPIO.LCD_D6_PIN = LCD_D6_Pin;
 80012c8:	4b40      	ldr	r3, [pc, #256]	; (80013cc <main+0x140>)
 80012ca:	2210      	movs	r2, #16
 80012cc:	815a      	strh	r2, [r3, #10]
  LCD_GPIO.LCD_D7_PIN = LCD_D7_Pin;
 80012ce:	4b3f      	ldr	r3, [pc, #252]	; (80013cc <main+0x140>)
 80012d0:	2208      	movs	r2, #8
 80012d2:	819a      	strh	r2, [r3, #12]

  LCD_Size.LCD_column = 16;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <main+0x144>)
 80012d6:	2210      	movs	r2, #16
 80012d8:	701a      	strb	r2, [r3, #0]
  LCD_Size.LCD_row    = 2;
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <main+0x144>)
 80012dc:	2202      	movs	r2, #2
 80012de:	705a      	strb	r2, [r3, #1]

  LCD_Init(&LCD, GPIOB, LCD_GPIO, LCD_Size);
 80012e0:	4a3a      	ldr	r2, [pc, #232]	; (80013cc <main+0x140>)
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <main+0x144>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	f8ad 3008 	strh.w	r3, [sp, #8]
 80012ea:	466b      	mov	r3, sp
 80012ec:	f102 0108 	add.w	r1, r2, #8
 80012f0:	c903      	ldmia	r1, {r0, r1}
 80012f2:	6018      	str	r0, [r3, #0]
 80012f4:	3304      	adds	r3, #4
 80012f6:	8019      	strh	r1, [r3, #0]
 80012f8:	ca0c      	ldmia	r2, {r2, r3}
 80012fa:	4936      	ldr	r1, [pc, #216]	; (80013d4 <main+0x148>)
 80012fc:	4836      	ldr	r0, [pc, #216]	; (80013d8 <main+0x14c>)
 80012fe:	f002 f9c1 	bl	8003684 <LCD_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001302:	4836      	ldr	r0, [pc, #216]	; (80013dc <main+0x150>)
 8001304:	f000 ff10 	bl	8002128 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(500);
 8001308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130c:	f000 fb26 	bl	800195c <HAL_Delay>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_scan_value, 2);
 8001310:	2202      	movs	r2, #2
 8001312:	4933      	ldr	r1, [pc, #204]	; (80013e0 <main+0x154>)
 8001314:	4831      	ldr	r0, [pc, #196]	; (80013dc <main+0x150>)
 8001316:	f000 fc1d 	bl	8001b54 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  LCD_SetCursor(&LCD, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	482e      	ldr	r0, [pc, #184]	; (80013d8 <main+0x14c>)
 8001320:	f002 fb96 	bl	8003a50 <LCD_SetCursor>
	  sprintf(lcd_msg, "Voltage: %03d.%02dV", (uint8_t)Vrms, (uint16_t)(Vrms*100) % 100);
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <main+0x158>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe2b 	bl	8000f84 <__aeabi_f2uiz>
 800132e:	4603      	mov	r3, r0
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461c      	mov	r4, r3
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <main+0x158>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	492b      	ldr	r1, [pc, #172]	; (80013e8 <main+0x15c>)
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fcd2 	bl	8000ce4 <__aeabi_fmul>
 8001340:	4603      	mov	r3, r0
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fe1e 	bl	8000f84 <__aeabi_f2uiz>
 8001348:	4603      	mov	r3, r0
 800134a:	b29b      	uxth	r3, r3
 800134c:	4a27      	ldr	r2, [pc, #156]	; (80013ec <main+0x160>)
 800134e:	fba2 1203 	umull	r1, r2, r2, r3
 8001352:	0952      	lsrs	r2, r2, #5
 8001354:	2164      	movs	r1, #100	; 0x64
 8001356:	fb01 f202 	mul.w	r2, r1, r2
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	4622      	mov	r2, r4
 8001360:	4923      	ldr	r1, [pc, #140]	; (80013f0 <main+0x164>)
 8001362:	4824      	ldr	r0, [pc, #144]	; (80013f4 <main+0x168>)
 8001364:	f002 fc08 	bl	8003b78 <siprintf>
	  LCD_SendString(&LCD, lcd_msg);
 8001368:	4922      	ldr	r1, [pc, #136]	; (80013f4 <main+0x168>)
 800136a:	481b      	ldr	r0, [pc, #108]	; (80013d8 <main+0x14c>)
 800136c:	f002 fbb4 	bl	8003ad8 <LCD_SendString>
	  LCD_SetCursor(&LCD, 0, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	2100      	movs	r1, #0
 8001374:	4818      	ldr	r0, [pc, #96]	; (80013d8 <main+0x14c>)
 8001376:	f002 fb6b 	bl	8003a50 <LCD_SetCursor>
	  sprintf(lcd_msg, "Current: %01d.%04dA", (uint8_t)Irms, (uint16_t)(Irms*10000) % 10000);
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <main+0x16c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fe00 	bl	8000f84 <__aeabi_f2uiz>
 8001384:	4603      	mov	r3, r0
 8001386:	b2db      	uxtb	r3, r3
 8001388:	461c      	mov	r4, r3
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <main+0x16c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	491b      	ldr	r1, [pc, #108]	; (80013fc <main+0x170>)
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fca7 	bl	8000ce4 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fdf3 	bl	8000f84 <__aeabi_f2uiz>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <main+0x174>)
 80013a4:	fba2 1203 	umull	r1, r2, r2, r3
 80013a8:	0b52      	lsrs	r2, r2, #13
 80013aa:	f242 7110 	movw	r1, #10000	; 0x2710
 80013ae:	fb01 f202 	mul.w	r2, r1, r2
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4622      	mov	r2, r4
 80013b8:	4912      	ldr	r1, [pc, #72]	; (8001404 <main+0x178>)
 80013ba:	480e      	ldr	r0, [pc, #56]	; (80013f4 <main+0x168>)
 80013bc:	f002 fbdc 	bl	8003b78 <siprintf>
	  LCD_SendString(&LCD, lcd_msg);
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <main+0x168>)
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <main+0x14c>)
 80013c4:	f002 fb88 	bl	8003ad8 <LCD_SendString>
	  LCD_SetCursor(&LCD, 0, 0);
 80013c8:	e7a7      	b.n	800131a <main+0x8e>
 80013ca:	bf00      	nop
 80013cc:	20000114 	.word	0x20000114
 80013d0:	20000124 	.word	0x20000124
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	20000100 	.word	0x20000100
 80013dc:	2000008c 	.word	0x2000008c
 80013e0:	20000128 	.word	0x20000128
 80013e4:	2000013c 	.word	0x2000013c
 80013e8:	42c80000 	.word	0x42c80000
 80013ec:	51eb851f 	.word	0x51eb851f
 80013f0:	0800462c 	.word	0x0800462c
 80013f4:	20000150 	.word	0x20000150
 80013f8:	20000140 	.word	0x20000140
 80013fc:	461c4000 	.word	0x461c4000
 8001400:	d1b71759 	.word	0xd1b71759
 8001404:	08004640 	.word	0x08004640

08001408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b094      	sub	sp, #80	; 0x50
 800140c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2228      	movs	r2, #40	; 0x28
 8001414:	2100      	movs	r1, #0
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fba6 	bl	8003b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001446:	2301      	movs	r3, #1
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144a:	2302      	movs	r3, #2
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001452:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001454:	2300      	movs	r3, #0
 8001456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fba9 	bl	8002bb4 <HAL_RCC_OscConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001468:	f000 f8e2 	bl	8001630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	230f      	movs	r3, #15
 800146e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001478:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800147c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800147e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001482:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f001 fe14 	bl	80030b8 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001496:	f000 f8cb 	bl	8001630 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800149a:	2302      	movs	r3, #2
 800149c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800149e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 ff80 	bl	80033ac <HAL_RCCEx_PeriphCLKConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014b2:	f000 f8bd 	bl	8001630 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3750      	adds	r7, #80	; 0x50
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014d0:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_ADC1_Init+0x94>)
 80014d2:	4a21      	ldr	r2, [pc, #132]	; (8001558 <MX_ADC1_Init+0x98>)
 80014d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	; (8001554 <MX_ADC1_Init+0x94>)
 80014d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <MX_ADC1_Init+0x94>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <MX_ADC1_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <MX_ADC1_Init+0x94>)
 80014ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <MX_ADC1_Init+0x94>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <MX_ADC1_Init+0x94>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014fe:	4815      	ldr	r0, [pc, #84]	; (8001554 <MX_ADC1_Init+0x94>)
 8001500:	f000 fa50 	bl	80019a4 <HAL_ADC_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800150a:	f000 f891 	bl	8001630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800150e:	2306      	movs	r3, #6
 8001510:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001512:	2301      	movs	r3, #1
 8001514:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001516:	2307      	movs	r3, #7
 8001518:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	; (8001554 <MX_ADC1_Init+0x94>)
 8001520:	f000 fc08 	bl	8001d34 <HAL_ADC_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f881 	bl	8001630 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800152e:	2307      	movs	r3, #7
 8001530:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001532:	2302      	movs	r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	; (8001554 <MX_ADC1_Init+0x94>)
 800153c:	f000 fbfa 	bl	8001d34 <HAL_ADC_ConfigChannel>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001546:	f000 f873 	bl	8001630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000008c 	.word	0x2000008c
 8001558:	40012400 	.word	0x40012400

0800155c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_DMA_Init+0x38>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <MX_DMA_Init+0x38>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6153      	str	r3, [r2, #20]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_DMA_Init+0x38>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	200b      	movs	r0, #11
 8001580:	f000 ff57 	bl	8002432 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001584:	200b      	movs	r0, #11
 8001586:	f000 ff70 	bl	800246a <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_GPIO_Init+0x90>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <MX_GPIO_Init+0x90>)
 80015b2:	f043 0320 	orr.w	r3, r3, #32
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_GPIO_Init+0x90>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0320 	and.w	r3, r3, #32
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_GPIO_Init+0x90>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <MX_GPIO_Init+0x90>)
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_GPIO_Init+0x90>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_GPIO_Init+0x90>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <MX_GPIO_Init+0x90>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_GPIO_Init+0x90>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80015fa:	480c      	ldr	r0, [pc, #48]	; (800162c <MX_GPIO_Init+0x94>)
 80015fc:	f001 fac2 	bl	8002b84 <HAL_GPIO_WritePin>
                          |LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_D7_Pin LCD_D6_Pin LCD_D5_Pin LCD_D4_Pin
                           LCD_EN_Pin LCD_RW_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_D7_Pin|LCD_D6_Pin|LCD_D5_Pin|LCD_D4_Pin
 8001600:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8001604:	613b      	str	r3, [r7, #16]
                          |LCD_EN_Pin|LCD_RW_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4619      	mov	r1, r3
 8001618:	4804      	ldr	r0, [pc, #16]	; (800162c <MX_GPIO_Init+0x94>)
 800161a:	f001 f92f 	bl	800287c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	40010c00 	.word	0x40010c00

08001630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001634:	b672      	cpsid	i
}
 8001636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001638:	e7fe      	b.n	8001638 <Error_Handler+0x8>
	...

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	4a14      	ldr	r2, [pc, #80]	; (8001698 <HAL_MspInit+0x5c>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6193      	str	r3, [r2, #24]
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_MspInit+0x5c>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_MspInit+0x5c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <HAL_MspInit+0x5c>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_MspInit+0x60>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_MspInit+0x60>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000

080016a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_ADC_MspInit+0xbc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d149      	bne.n	8001754 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	4a26      	ldr	r2, [pc, #152]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ca:	6193      	str	r3, [r2, #24]
 80016cc:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_ADC_MspInit+0xc0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016f0:	23c0      	movs	r3, #192	; 0xc0
 80016f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f4:	2303      	movs	r3, #3
 80016f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	4819      	ldr	r0, [pc, #100]	; (8001764 <HAL_ADC_MspInit+0xc4>)
 8001700:	f001 f8bc 	bl	800287c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001706:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_ADC_MspInit+0xcc>)
 8001708:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170a:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001718:	2280      	movs	r2, #128	; 0x80
 800171a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800171e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001722:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001726:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800172a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800172e:	2220      	movs	r2, #32
 8001730:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001734:	2200      	movs	r2, #0
 8001736:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800173a:	f000 feb1 	bl	80024a0 <HAL_DMA_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001744:	f7ff ff74 	bl	8001630 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 800174c:	621a      	str	r2, [r3, #32]
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_ADC_MspInit+0xc8>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3720      	adds	r7, #32
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40012400 	.word	0x40012400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010800 	.word	0x40010800
 8001768:	200000bc 	.word	0x200000bc
 800176c:	40020008 	.word	0x40020008

08001770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <NMI_Handler+0x4>

08001776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800177a:	e7fe      	b.n	800177a <HardFault_Handler+0x4>

0800177c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001780:	e7fe      	b.n	8001780 <MemManage_Handler+0x4>

08001782 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001786:	e7fe      	b.n	8001786 <BusFault_Handler+0x4>

08001788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler+0x4>

0800178e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b6:	f000 f8b5 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017c4:	4802      	ldr	r0, [pc, #8]	; (80017d0 <DMA1_Channel1_IRQHandler+0x10>)
 80017c6:	f000 ff25 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200000bc 	.word	0x200000bc

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f002 f986 	bl	8003b14 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20005000 	.word	0x20005000
 8001834:	00000400 	.word	0x00000400
 8001838:	20000184 	.word	0x20000184
 800183c:	200001a0 	.word	0x200001a0

08001840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184e:	490d      	ldr	r1, [pc, #52]	; (8001884 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001864:	4c0a      	ldr	r4, [pc, #40]	; (8001890 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001872:	f7ff ffe5 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f002 f953 	bl	8003b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187a:	f7ff fd07 	bl	800128c <main>
  bx lr
 800187e:	4770      	bx	lr
  ldr r0, =_sdata
 8001880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001884:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001888:	080046d0 	.word	0x080046d0
  ldr r2, =_sbss
 800188c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001890:	2000019c 	.word	0x2000019c

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x28>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x28>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 fdb7 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	200f      	movs	r0, #15
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fec2 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40022000 	.word	0x40022000

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fdcf 	bl	8002486 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f000 fd97 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_IncTick+0x1c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_IncTick+0x20>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a03      	ldr	r2, [pc, #12]	; (8001944 <HAL_IncTick+0x20>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000008 	.word	0x20000008
 8001944:	20000188 	.word	0x20000188

08001948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b02      	ldr	r3, [pc, #8]	; (8001958 <HAL_GetTick+0x10>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000188 	.word	0x20000188

0800195c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fff0 	bl	8001948 <HAL_GetTick>
 8001968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001974:	d005      	beq.n	8001982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_Delay+0x44>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001982:	bf00      	nop
 8001984:	f7ff ffe0 	bl	8001948 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	429a      	cmp	r2, r3
 8001992:	d8f7      	bhi.n	8001984 <HAL_Delay+0x28>
  {
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e0be      	b.n	8001b44 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d109      	bne.n	80019e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff fe5c 	bl	80016a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 faf5 	bl	8001fd8 <ADC_ConversionStop_Disable>
 80019ee:	4603      	mov	r3, r0
 80019f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 8099 	bne.w	8001b32 <HAL_ADC_Init+0x18e>
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 8095 	bne.w	8001b32 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a10:	f023 0302 	bic.w	r3, r3, #2
 8001a14:	f043 0202 	orr.w	r2, r3, #2
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a24:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	7b1b      	ldrb	r3, [r3, #12]
 8001a2a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a2c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a3c:	d003      	beq.n	8001a46 <HAL_ADC_Init+0xa2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <HAL_ADC_Init+0xa8>
 8001a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4a:	e000      	b.n	8001a4e <HAL_ADC_Init+0xaa>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7d1b      	ldrb	r3, [r3, #20]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d119      	bne.n	8001a90 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	035a      	lsls	r2, r3, #13
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	e00b      	b.n	8001a90 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <HAL_ADC_Init+0x1a8>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	430b      	orrs	r3, r1
 8001ab6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac0:	d003      	beq.n	8001aca <HAL_ADC_Init+0x126>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d104      	bne.n	8001ad4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	051b      	lsls	r3, r3, #20
 8001ad2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <HAL_ADC_Init+0x1ac>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d10b      	bne.n	8001b10 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b0e:	e018      	b.n	8001b42 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	f023 0312 	bic.w	r3, r3, #18
 8001b18:	f043 0210 	orr.w	r2, r3, #16
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b30:	e007      	b.n	8001b42 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f043 0210 	orr.w	r2, r3, #16
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001b50:	ff1f0efe 	.word	0xff1f0efe

08001b54 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a64      	ldr	r2, [pc, #400]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_Start_DMA+0x24>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_ADC_Start_DMA+0x1ac>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_Start_DMA+0x32>
 8001b78:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 80b3 	bne.w	8001cec <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x40>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e0ae      	b.n	8001cf2 <HAL_ADC_Start_DMA+0x19e>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f9c1 	bl	8001f24 <ADC_Enable>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 809a 	bne.w	8001ce2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_ADC_Start_DMA+0x1ac>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_Start_DMA+0x84>
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d115      	bne.n	8001c04 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d026      	beq.n	8001c40 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c02:	e01d      	b.n	8001c40 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_ADC_Start_DMA+0xd0>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <HAL_ADC_Start_DMA+0x1ac>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d10d      	bne.n	8001c40 <HAL_ADC_Start_DMA+0xec>
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f023 0206 	bic.w	r2, r3, #6
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_ADC_Start_DMA+0x1b0>)
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <HAL_ADC_Start_DMA+0x1b4>)
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_ADC_Start_DMA+0x1b8>)
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0202 	mvn.w	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c98:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a18      	ldr	r0, [r3, #32]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	334c      	adds	r3, #76	; 0x4c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f000 fc53 	bl	8002554 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cb8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ccc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cce:	e00f      	b.n	8001cf0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cde:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ce0:	e006      	b.n	8001cf0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001cea:	e001      	b.n	8001cf0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40012400 	.word	0x40012400
 8001d00:	40012800 	.word	0x40012800
 8001d04:	0800205b 	.word	0x0800205b
 8001d08:	080020d7 	.word	0x080020d7
 8001d0c:	080020f3 	.word	0x080020f3

08001d10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x20>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e0dc      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1da>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b06      	cmp	r3, #6
 8001d62:	d81c      	bhi.n	8001d9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b05      	subs	r3, #5
 8001d76:	221f      	movs	r2, #31
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4019      	ands	r1, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b05      	subs	r3, #5
 8001d90:	fa00 f203 	lsl.w	r2, r0, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9c:	e03c      	b.n	8001e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d81c      	bhi.n	8001de0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b23      	subs	r3, #35	; 0x23
 8001db8:	221f      	movs	r2, #31
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4019      	ands	r1, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b23      	subs	r3, #35	; 0x23
 8001dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
 8001dde:	e01b      	b.n	8001e18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	3b41      	subs	r3, #65	; 0x41
 8001df2:	221f      	movs	r2, #31
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4019      	ands	r1, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b41      	subs	r3, #65	; 0x41
 8001e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b09      	cmp	r3, #9
 8001e1e:	d91c      	bls.n	8001e5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	3b1e      	subs	r3, #30
 8001e32:	2207      	movs	r2, #7
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4019      	ands	r1, r3
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	6898      	ldr	r0, [r3, #8]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b1e      	subs	r3, #30
 8001e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	60da      	str	r2, [r3, #12]
 8001e58:	e019      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6919      	ldr	r1, [r3, #16]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4019      	ands	r1, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6898      	ldr	r0, [r3, #8]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d003      	beq.n	8001e9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e9a:	2b11      	cmp	r3, #17
 8001e9c:	d132      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1d      	ldr	r2, [pc, #116]	; (8001f18 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d125      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d126      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ec4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b10      	cmp	r3, #16
 8001ecc:	d11a      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_ADC_ConfigChannel+0x1e8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0c9a      	lsrs	r2, r3, #18
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ee4:	e002      	b.n	8001eec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f9      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ef2:	e007      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	f043 0220 	orr.w	r2, r3, #32
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	40012400 	.word	0x40012400
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	431bde83 	.word	0x431bde83

08001f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d040      	beq.n	8001fc4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f52:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <ADC_Enable+0xac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <ADC_Enable+0xb0>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f60:	e002      	b.n	8001f68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f9      	bne.n	8001f62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f6e:	f7ff fceb 	bl	8001948 <HAL_GetTick>
 8001f72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f74:	e01f      	b.n	8001fb6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f76:	f7ff fce7 	bl	8001948 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d918      	bls.n	8001fb6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d011      	beq.n	8001fb6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	f043 0210 	orr.w	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e007      	b.n	8001fc6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d1d8      	bne.n	8001f76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d12e      	bne.n	8002050 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002002:	f7ff fca1 	bl	8001948 <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002008:	e01b      	b.n	8002042 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800200a:	f7ff fc9d 	bl	8001948 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d914      	bls.n	8002042 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d10d      	bne.n	8002042 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202a:	f043 0210 	orr.w	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	f043 0201 	orr.w	r2, r3, #1
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e007      	b.n	8002052 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b01      	cmp	r3, #1
 800204e:	d0dc      	beq.n	800200a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002070:	2b00      	cmp	r3, #0
 8002072:	d127      	bne.n	80020c4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800208a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800208e:	d115      	bne.n	80020bc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002094:	2b00      	cmp	r3, #0
 8002096:	d111      	bne.n	80020bc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7fe ff83 	bl	8000fc8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020c2:	e004      	b.n	80020ce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	4798      	blx	r3
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f7ff fe13 	bl	8001d10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b084      	sub	sp, #16
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	f043 0204 	orr.w	r2, r3, #4
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff fe02 	bl	8001d22 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADCEx_Calibration_Start+0x1e>
 8002142:	2302      	movs	r3, #2
 8002144:	e097      	b.n	8002276 <HAL_ADCEx_Calibration_Start+0x14e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ff42 	bl	8001fd8 <ADC_ConversionStop_Disable>
 8002154:	4603      	mov	r3, r0
 8002156:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fee3 	bl	8001f24 <ADC_Enable>
 800215e:	4603      	mov	r3, r0
 8002160:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002162:	7dfb      	ldrb	r3, [r7, #23]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 8081 	bne.w	800226c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002172:	f023 0302 	bic.w	r3, r3, #2
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_ADCEx_Calibration_Start+0x158>)
 8002180:	681c      	ldr	r4, [r3, #0]
 8002182:	2002      	movs	r0, #2
 8002184:	f001 f9c8 	bl	8003518 <HAL_RCCEx_GetPeriphCLKFreq>
 8002188:	4603      	mov	r3, r0
 800218a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800218e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002190:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002192:	e002      	b.n	800219a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3b01      	subs	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f9      	bne.n	8002194 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0208 	orr.w	r2, r2, #8
 80021ae:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021b0:	f7ff fbca 	bl	8001948 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021b6:	e01b      	b.n	80021f0 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021b8:	f7ff fbc6 	bl	8001948 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b0a      	cmp	r3, #10
 80021c4:	d914      	bls.n	80021f0 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00d      	beq.n	80021f0 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d8:	f023 0312 	bic.w	r3, r3, #18
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e042      	b.n	8002276 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1dc      	bne.n	80021b8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0204 	orr.w	r2, r2, #4
 800220c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800220e:	f7ff fb9b 	bl	8001948 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002214:	e01b      	b.n	800224e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002216:	f7ff fb97 	bl	8001948 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b0a      	cmp	r3, #10
 8002222:	d914      	bls.n	800224e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f023 0312 	bic.w	r3, r3, #18
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e013      	b.n	8002276 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1dc      	bne.n	8002216 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f023 0303 	bic.w	r3, r3, #3
 8002264:	f043 0201 	orr.w	r2, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002274:	7dfb      	ldrb	r3, [r7, #23]
}
 8002276:	4618      	mov	r0, r3
 8002278:	371c      	adds	r7, #28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	20000000 	.word	0x20000000

08002284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022a0:	4013      	ands	r3, r2
 80022a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b6:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <__NVIC_SetPriorityGrouping+0x44>)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60d3      	str	r3, [r2, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d0:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <__NVIC_GetPriorityGrouping+0x18>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	0a1b      	lsrs	r3, r3, #8
 80022d6:	f003 0307 	and.w	r3, r3, #7
}
 80022da:	4618      	mov	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	db0b      	blt.n	8002312 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4906      	ldr	r1, [pc, #24]	; (800231c <__NVIC_EnableIRQ+0x34>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	095b      	lsrs	r3, r3, #5
 8002308:	2001      	movs	r0, #1
 800230a:	fa00 f202 	lsl.w	r2, r0, r2
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	e000e100 	.word	0xe000e100

08002320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	6039      	str	r1, [r7, #0]
 800232a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	2b00      	cmp	r3, #0
 8002332:	db0a      	blt.n	800234a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	b2da      	uxtb	r2, r3
 8002338:	490c      	ldr	r1, [pc, #48]	; (800236c <__NVIC_SetPriority+0x4c>)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	0112      	lsls	r2, r2, #4
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	440b      	add	r3, r1
 8002344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002348:	e00a      	b.n	8002360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4908      	ldr	r1, [pc, #32]	; (8002370 <__NVIC_SetPriority+0x50>)
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	3b04      	subs	r3, #4
 8002358:	0112      	lsls	r2, r2, #4
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	440b      	add	r3, r1
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	bc80      	pop	{r7}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f1c3 0307 	rsb	r3, r3, #7
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf28      	it	cs
 8002392:	2304      	movcs	r3, #4
 8002394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3304      	adds	r3, #4
 800239a:	2b06      	cmp	r3, #6
 800239c:	d902      	bls.n	80023a4 <NVIC_EncodePriority+0x30>
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3b03      	subs	r3, #3
 80023a2:	e000      	b.n	80023a6 <NVIC_EncodePriority+0x32>
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43da      	mvns	r2, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	401a      	ands	r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	43d9      	mvns	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	4313      	orrs	r3, r2
         );
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f7ff ff90 	bl	8002320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff2d 	bl	8002284 <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff42 	bl	80022cc <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff90 	bl	8002374 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5f 	bl	8002320 <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff35 	bl	80022e8 <__NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ffa2 	bl	80023d8 <SysTick_Config>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e043      	b.n	800253e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_DMA_Init+0xa8>)
 80024be:	4413      	add	r3, r2
 80024c0:	4a22      	ldr	r2, [pc, #136]	; (800254c <HAL_DMA_Init+0xac>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	009a      	lsls	r2, r3, #2
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1f      	ldr	r2, [pc, #124]	; (8002550 <HAL_DMA_Init+0xb0>)
 80024d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024ea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	bffdfff8 	.word	0xbffdfff8
 800254c:	cccccccd 	.word	0xcccccccd
 8002550:	40020000 	.word	0x40020000

08002554 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_DMA_Start_IT+0x20>
 8002570:	2302      	movs	r3, #2
 8002572:	e04b      	b.n	800260c <HAL_DMA_Start_IT+0xb8>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d13a      	bne.n	80025fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0201 	bic.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f937 	bl	8002820 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 020e 	orr.w	r2, r2, #14
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e00f      	b.n	80025ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0204 	bic.w	r2, r2, #4
 80025da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 020a 	orr.w	r2, r2, #10
 80025ea:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e005      	b.n	800260a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002606:	2302      	movs	r3, #2
 8002608:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800260a:	7dfb      	ldrb	r3, [r7, #23]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2204      	movs	r2, #4
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d04f      	beq.n	80026dc <HAL_DMA_IRQHandler+0xc8>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d04a      	beq.n	80026dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_DMA_IRQHandler+0x1f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d029      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xae>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a65      	ldr	r2, [pc, #404]	; (8002808 <HAL_DMA_IRQHandler+0x1f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d022      	beq.n	80026be <HAL_DMA_IRQHandler+0xaa>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a63      	ldr	r2, [pc, #396]	; (800280c <HAL_DMA_IRQHandler+0x1f8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01a      	beq.n	80026b8 <HAL_DMA_IRQHandler+0xa4>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a62      	ldr	r2, [pc, #392]	; (8002810 <HAL_DMA_IRQHandler+0x1fc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d012      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x9e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a60      	ldr	r2, [pc, #384]	; (8002814 <HAL_DMA_IRQHandler+0x200>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x98>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5f      	ldr	r2, [pc, #380]	; (8002818 <HAL_DMA_IRQHandler+0x204>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d102      	bne.n	80026a6 <HAL_DMA_IRQHandler+0x92>
 80026a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026a4:	e00e      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026aa:	e00b      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026b0:	e008      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026b6:	e005      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026bc:	e002      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026be:	2340      	movs	r3, #64	; 0x40
 80026c0:	e000      	b.n	80026c4 <HAL_DMA_IRQHandler+0xb0>
 80026c2:	2304      	movs	r3, #4
 80026c4:	4a55      	ldr	r2, [pc, #340]	; (800281c <HAL_DMA_IRQHandler+0x208>)
 80026c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 8094 	beq.w	80027fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80026da:	e08e      	b.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2202      	movs	r2, #2
 80026e2:	409a      	lsls	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d056      	beq.n	800279a <HAL_DMA_IRQHandler+0x186>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d051      	beq.n	800279a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0320 	and.w	r3, r3, #32
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 020a 	bic.w	r2, r2, #10
 8002712:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a38      	ldr	r2, [pc, #224]	; (8002804 <HAL_DMA_IRQHandler+0x1f0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d029      	beq.n	800277a <HAL_DMA_IRQHandler+0x166>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <HAL_DMA_IRQHandler+0x1f4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d022      	beq.n	8002776 <HAL_DMA_IRQHandler+0x162>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a35      	ldr	r2, [pc, #212]	; (800280c <HAL_DMA_IRQHandler+0x1f8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01a      	beq.n	8002770 <HAL_DMA_IRQHandler+0x15c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_DMA_IRQHandler+0x1fc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d012      	beq.n	800276a <HAL_DMA_IRQHandler+0x156>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a32      	ldr	r2, [pc, #200]	; (8002814 <HAL_DMA_IRQHandler+0x200>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00a      	beq.n	8002764 <HAL_DMA_IRQHandler+0x150>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a31      	ldr	r2, [pc, #196]	; (8002818 <HAL_DMA_IRQHandler+0x204>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d102      	bne.n	800275e <HAL_DMA_IRQHandler+0x14a>
 8002758:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800275c:	e00e      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800275e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002762:	e00b      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002768:	e008      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800276a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800276e:	e005      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002774:	e002      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 8002776:	2320      	movs	r3, #32
 8002778:	e000      	b.n	800277c <HAL_DMA_IRQHandler+0x168>
 800277a:	2302      	movs	r3, #2
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_DMA_IRQHandler+0x208>)
 800277e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d034      	beq.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002798:	e02f      	b.n	80027fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2208      	movs	r2, #8
 80027a0:	409a      	lsls	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d028      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d023      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 020e 	bic.w	r2, r2, #14
 80027c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
    }
  }
  return;
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
}
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40020008 	.word	0x40020008
 8002808:	4002001c 	.word	0x4002001c
 800280c:	40020030 	.word	0x40020030
 8002810:	40020044 	.word	0x40020044
 8002814:	40020058 	.word	0x40020058
 8002818:	4002006c 	.word	0x4002006c
 800281c:	40020000 	.word	0x40020000

08002820 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b10      	cmp	r3, #16
 800284c:	d108      	bne.n	8002860 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800285e:	e007      	b.n	8002870 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	60da      	str	r2, [r3, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr
	...

0800287c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800287c:	b480      	push	{r7}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002886:	2300      	movs	r3, #0
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e169      	b.n	8002b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002890:	2201      	movs	r2, #1
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 8158 	bne.w	8002b5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a9a      	ldr	r2, [pc, #616]	; (8002b1c <HAL_GPIO_Init+0x2a0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d05e      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028b8:	4a98      	ldr	r2, [pc, #608]	; (8002b1c <HAL_GPIO_Init+0x2a0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d875      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028be:	4a98      	ldr	r2, [pc, #608]	; (8002b20 <HAL_GPIO_Init+0x2a4>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d058      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028c4:	4a96      	ldr	r2, [pc, #600]	; (8002b20 <HAL_GPIO_Init+0x2a4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d86f      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ca:	4a96      	ldr	r2, [pc, #600]	; (8002b24 <HAL_GPIO_Init+0x2a8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d052      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028d0:	4a94      	ldr	r2, [pc, #592]	; (8002b24 <HAL_GPIO_Init+0x2a8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d869      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028d6:	4a94      	ldr	r2, [pc, #592]	; (8002b28 <HAL_GPIO_Init+0x2ac>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04c      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028dc:	4a92      	ldr	r2, [pc, #584]	; (8002b28 <HAL_GPIO_Init+0x2ac>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d863      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028e2:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <HAL_GPIO_Init+0x2b0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d046      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
 80028e8:	4a90      	ldr	r2, [pc, #576]	; (8002b2c <HAL_GPIO_Init+0x2b0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d85d      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028ee:	2b12      	cmp	r3, #18
 80028f0:	d82a      	bhi.n	8002948 <HAL_GPIO_Init+0xcc>
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d859      	bhi.n	80029aa <HAL_GPIO_Init+0x12e>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <HAL_GPIO_Init+0x80>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002977 	.word	0x08002977
 8002900:	08002951 	.word	0x08002951
 8002904:	08002963 	.word	0x08002963
 8002908:	080029a5 	.word	0x080029a5
 800290c:	080029ab 	.word	0x080029ab
 8002910:	080029ab 	.word	0x080029ab
 8002914:	080029ab 	.word	0x080029ab
 8002918:	080029ab 	.word	0x080029ab
 800291c:	080029ab 	.word	0x080029ab
 8002920:	080029ab 	.word	0x080029ab
 8002924:	080029ab 	.word	0x080029ab
 8002928:	080029ab 	.word	0x080029ab
 800292c:	080029ab 	.word	0x080029ab
 8002930:	080029ab 	.word	0x080029ab
 8002934:	080029ab 	.word	0x080029ab
 8002938:	080029ab 	.word	0x080029ab
 800293c:	080029ab 	.word	0x080029ab
 8002940:	08002959 	.word	0x08002959
 8002944:	0800296d 	.word	0x0800296d
 8002948:	4a79      	ldr	r2, [pc, #484]	; (8002b30 <HAL_GPIO_Init+0x2b4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800294e:	e02c      	b.n	80029aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	623b      	str	r3, [r7, #32]
          break;
 8002956:	e029      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	3304      	adds	r3, #4
 800295e:	623b      	str	r3, [r7, #32]
          break;
 8002960:	e024      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	3308      	adds	r3, #8
 8002968:	623b      	str	r3, [r7, #32]
          break;
 800296a:	e01f      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	330c      	adds	r3, #12
 8002972:	623b      	str	r3, [r7, #32]
          break;
 8002974:	e01a      	b.n	80029ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d102      	bne.n	8002984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800297e:	2304      	movs	r3, #4
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e013      	b.n	80029ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d105      	bne.n	8002998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800298c:	2308      	movs	r3, #8
 800298e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	611a      	str	r2, [r3, #16]
          break;
 8002996:	e009      	b.n	80029ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002998:	2308      	movs	r3, #8
 800299a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69fa      	ldr	r2, [r7, #28]
 80029a0:	615a      	str	r2, [r3, #20]
          break;
 80029a2:	e003      	b.n	80029ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029a4:	2300      	movs	r3, #0
 80029a6:	623b      	str	r3, [r7, #32]
          break;
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x130>
          break;
 80029aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2bff      	cmp	r3, #255	; 0xff
 80029b0:	d801      	bhi.n	80029b6 <HAL_GPIO_Init+0x13a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	e001      	b.n	80029ba <HAL_GPIO_Init+0x13e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2bff      	cmp	r3, #255	; 0xff
 80029c0:	d802      	bhi.n	80029c8 <HAL_GPIO_Init+0x14c>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	e002      	b.n	80029ce <HAL_GPIO_Init+0x152>
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3b08      	subs	r3, #8
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	210f      	movs	r1, #15
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	fa01 f303 	lsl.w	r3, r1, r3
 80029e8:	431a      	orrs	r2, r3
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 80b1 	beq.w	8002b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029fc:	4b4d      	ldr	r3, [pc, #308]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6193      	str	r3, [r2, #24]
 8002a08:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_GPIO_Init+0x2b8>)
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a14:	4a48      	ldr	r2, [pc, #288]	; (8002b38 <HAL_GPIO_Init+0x2bc>)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	089b      	lsrs	r3, r3, #2
 8002a1a:	3302      	adds	r3, #2
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4013      	ands	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <HAL_GPIO_Init+0x2c0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d013      	beq.n	8002a68 <HAL_GPIO_Init+0x1ec>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3f      	ldr	r2, [pc, #252]	; (8002b40 <HAL_GPIO_Init+0x2c4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00d      	beq.n	8002a64 <HAL_GPIO_Init+0x1e8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3e      	ldr	r2, [pc, #248]	; (8002b44 <HAL_GPIO_Init+0x2c8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <HAL_GPIO_Init+0x1e4>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a3d      	ldr	r2, [pc, #244]	; (8002b48 <HAL_GPIO_Init+0x2cc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d101      	bne.n	8002a5c <HAL_GPIO_Init+0x1e0>
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e006      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e004      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e002      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_GPIO_Init+0x1ee>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	f002 0203 	and.w	r2, r2, #3
 8002a70:	0092      	lsls	r2, r2, #2
 8002a72:	4093      	lsls	r3, r2
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a7a:	492f      	ldr	r1, [pc, #188]	; (8002b38 <HAL_GPIO_Init+0x2bc>)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	3302      	adds	r3, #2
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d006      	beq.n	8002aa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	492c      	ldr	r1, [pc, #176]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	608b      	str	r3, [r1, #8]
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aa2:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	4928      	ldr	r1, [pc, #160]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	4922      	ldr	r1, [pc, #136]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60cb      	str	r3, [r1, #12]
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	491e      	ldr	r1, [pc, #120]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4918      	ldr	r1, [pc, #96]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4914      	ldr	r1, [pc, #80]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d021      	beq.n	8002b50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	490e      	ldr	r1, [pc, #56]	; (8002b4c <HAL_GPIO_Init+0x2d0>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	600b      	str	r3, [r1, #0]
 8002b18:	e021      	b.n	8002b5e <HAL_GPIO_Init+0x2e2>
 8002b1a:	bf00      	nop
 8002b1c:	10320000 	.word	0x10320000
 8002b20:	10310000 	.word	0x10310000
 8002b24:	10220000 	.word	0x10220000
 8002b28:	10210000 	.word	0x10210000
 8002b2c:	10120000 	.word	0x10120000
 8002b30:	10110000 	.word	0x10110000
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010800 	.word	0x40010800
 8002b40:	40010c00 	.word	0x40010c00
 8002b44:	40011000 	.word	0x40011000
 8002b48:	40011400 	.word	0x40011400
 8002b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_GPIO_Init+0x304>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4909      	ldr	r1, [pc, #36]	; (8002b80 <HAL_GPIO_Init+0x304>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f47f ae8e 	bne.w	8002890 <HAL_GPIO_Init+0x14>
  }
}
 8002b74:	bf00      	nop
 8002b76:	bf00      	nop
 8002b78:	372c      	adds	r7, #44	; 0x2c
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40010400 	.word	0x40010400

08002b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]
 8002b90:	4613      	mov	r3, r2
 8002b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b94:	787b      	ldrb	r3, [r7, #1]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ba0:	e003      	b.n	8002baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	041a      	lsls	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e272      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8087 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd4:	4b92      	ldr	r3, [pc, #584]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d00c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002be0:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d112      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5e>
 8002bec:	4b8c      	ldr	r3, [pc, #560]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	4b89      	ldr	r3, [pc, #548]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d06c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x12c>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d168      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e24c      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x76>
 8002c1c:	4b80      	ldr	r3, [pc, #512]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a7f      	ldr	r2, [pc, #508]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e02e      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x98>
 8002c32:	4b7b      	ldr	r3, [pc, #492]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7a      	ldr	r2, [pc, #488]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b78      	ldr	r3, [pc, #480]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a77      	ldr	r2, [pc, #476]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e01d      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0xbc>
 8002c56:	4b72      	ldr	r3, [pc, #456]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a71      	ldr	r2, [pc, #452]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a6e      	ldr	r2, [pc, #440]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0xd4>
 8002c70:	4b6b      	ldr	r3, [pc, #428]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6a      	ldr	r2, [pc, #424]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b68      	ldr	r3, [pc, #416]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a67      	ldr	r2, [pc, #412]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fe5a 	bl	8001948 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fe fe56 	bl	8001948 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e200      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0xe4>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fe46 	bl	8001948 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fe42 	bl	8001948 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e1ec      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	4b53      	ldr	r3, [pc, #332]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x10c>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d063      	beq.n	8002db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cee:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x18c>
 8002d06:	4b46      	ldr	r3, [pc, #280]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_RCC_OscConfig+0x176>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1c0      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4939      	ldr	r1, [pc, #228]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	e03a      	b.n	8002db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d020      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b36      	ldr	r3, [pc, #216]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fdfb 	bl	8001948 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d56:	f7fe fdf7 	bl	8001948 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1a1      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d68:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0f0      	beq.n	8002d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	4927      	ldr	r1, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	600b      	str	r3, [r1, #0]
 8002d88:	e015      	b.n	8002db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe fdda 	bl	8001948 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d98:	f7fe fdd6 	bl	8001948 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e180      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d03a      	beq.n	8002e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d019      	beq.n	8002dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fe fdba 	bl	8001948 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd8:	f7fe fdb6 	bl	8001948 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e160      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f000 faba 	bl	8003370 <RCC_Delay>
 8002dfc:	e01c      	b.n	8002e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fe fda0 	bl	8001948 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e0a:	e00f      	b.n	8002e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fe fd9c 	bl	8001948 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d908      	bls.n	8002e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e146      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	42420000 	.word	0x42420000
 8002e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	4b92      	ldr	r3, [pc, #584]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e9      	bne.n	8002e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a6 	beq.w	8002f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	4a87      	ldr	r2, [pc, #540]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fd5d 	bl	8001948 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe fd59 	bl	8001948 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e103      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x4c8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x312>
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	4a6e      	ldr	r2, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6213      	str	r3, [r2, #32]
 8002ec4:	e02d      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x334>
 8002ece:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6213      	str	r3, [r2, #32]
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	e01c      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x356>
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a60      	ldr	r2, [pc, #384]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6213      	str	r3, [r2, #32]
 8002efc:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a5d      	ldr	r2, [pc, #372]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6213      	str	r3, [r2, #32]
 8002f08:	e00b      	b.n	8002f22 <HAL_RCC_OscConfig+0x36e>
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4a5a      	ldr	r2, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6213      	str	r3, [r2, #32]
 8002f16:	4b58      	ldr	r3, [pc, #352]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fd0d 	bl	8001948 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe fd09 	bl	8001948 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0b1      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ee      	beq.n	8002f32 <HAL_RCC_OscConfig+0x37e>
 8002f54:	e014      	b.n	8002f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f56:	f7fe fcf7 	bl	8001948 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe fcf3 	bl	8001948 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e09b      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ee      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a3b      	ldr	r2, [pc, #236]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 8087 	beq.w	80030aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d061      	beq.n	800306c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d146      	bne.n	800303e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b33      	ldr	r3, [pc, #204]	; (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fcc7 	bl	8001948 <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbe:	f7fe fcc3 	bl	8001948 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e06d      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd0:	4b29      	ldr	r3, [pc, #164]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f0      	bne.n	8002fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d108      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fe6:	4b24      	ldr	r3, [pc, #144]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	4921      	ldr	r1, [pc, #132]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a19      	ldr	r1, [r3, #32]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	430b      	orrs	r3, r1
 800300a:	491b      	ldr	r1, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003010:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe fc97 	bl	8001948 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe fc93 	bl	8001948 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e03d      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0f0      	beq.n	800301e <HAL_RCC_OscConfig+0x46a>
 800303c:	e035      	b.n	80030aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b10      	ldr	r3, [pc, #64]	; (8003080 <HAL_RCC_OscConfig+0x4cc>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fc80 	bl	8001948 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fc7c 	bl	8001948 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e026      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x498>
 800306a:	e01e      	b.n	80030aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d107      	bne.n	8003084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e019      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_RCC_OscConfig+0x500>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	429a      	cmp	r2, r3
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000

080030b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0d0      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4965      	ldr	r1, [pc, #404]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800311e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d040      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d115      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b41      	ldr	r3, [pc, #260]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e073      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3d      	ldr	r3, [pc, #244]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e06b      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b39      	ldr	r3, [pc, #228]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4936      	ldr	r1, [pc, #216]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7fe fbce 	bl	8001948 <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7fe fbca 	bl	8001948 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e053      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d210      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 0207 	bic.w	r2, r3, #7
 80031ee:	4922      	ldr	r1, [pc, #136]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1cc>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fb2c 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000
 800327c:	40021000 	.word	0x40021000
 8003280:	08004654 	.word	0x08004654
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032a6:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d002      	beq.n	80032bc <HAL_RCC_GetSysClockFreq+0x30>
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d003      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x36>
 80032ba:	e027      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032bc:	4b19      	ldr	r3, [pc, #100]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032be:	613b      	str	r3, [r7, #16]
      break;
 80032c0:	e027      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032cc:	5cd3      	ldrb	r3, [r2, r3]
 80032ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d010      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032da:	4b11      	ldr	r3, [pc, #68]	; (8003320 <HAL_RCC_GetSysClockFreq+0x94>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	0c5b      	lsrs	r3, r3, #17
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_RCC_GetSysClockFreq+0xa0>)
 80032e6:	5cd3      	ldrb	r3, [r2, r3]
 80032e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 80032ee:	fb03 f202 	mul.w	r2, r3, r2
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	e004      	b.n	8003306 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	613b      	str	r3, [r7, #16]
      break;
 800330a:	e002      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_RCC_GetSysClockFreq+0x98>)
 800330e:	613b      	str	r3, [r7, #16]
      break;
 8003310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003312:	693b      	ldr	r3, [r7, #16]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40021000 	.word	0x40021000
 8003324:	007a1200 	.word	0x007a1200
 8003328:	0800466c 	.word	0x0800466c
 800332c:	0800467c 	.word	0x0800467c
 8003330:	003d0900 	.word	0x003d0900

08003334 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003338:	4b02      	ldr	r3, [pc, #8]	; (8003344 <HAL_RCC_GetHCLKFreq+0x10>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	bc80      	pop	{r7}
 8003342:	4770      	bx	lr
 8003344:	20000000 	.word	0x20000000

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800334c:	f7ff fff2 	bl	8003334 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0adb      	lsrs	r3, r3, #11
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000
 800336c:	08004664 	.word	0x08004664

08003370 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <RCC_Delay+0x34>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a0a      	ldr	r2, [pc, #40]	; (80033a8 <RCC_Delay+0x38>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0a5b      	lsrs	r3, r3, #9
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800338c:	bf00      	nop
  }
  while (Delay --);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	60fa      	str	r2, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f9      	bne.n	800338c <RCC_Delay+0x1c>
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	20000000 	.word	0x20000000
 80033a8:	10624dd3 	.word	0x10624dd3

080033ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d07d      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80033c8:	2300      	movs	r3, #0
 80033ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033cc:	4b4f      	ldr	r3, [pc, #316]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033d8:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	4a4b      	ldr	r2, [pc, #300]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e2:	61d3      	str	r3, [r2, #28]
 80033e4:	4b49      	ldr	r3, [pc, #292]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033f0:	2301      	movs	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d118      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a42      	ldr	r2, [pc, #264]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800340c:	f7fe fa9c 	bl	8001948 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	e008      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fe fa98 	bl	8001948 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e06d      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003432:	4b36      	ldr	r3, [pc, #216]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d02e      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	429a      	cmp	r2, r3
 800344e:	d027      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003450:	4b2e      	ldr	r3, [pc, #184]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800345a:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800345c:	2201      	movs	r2, #1
 800345e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003466:	4a29      	ldr	r2, [pc, #164]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d014      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fa67 	bl	8001948 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347c:	e00a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347e:	f7fe fa63 	bl	8001948 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	f241 3288 	movw	r2, #5000	; 0x1388
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e036      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ee      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	4917      	ldr	r1, [pc, #92]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	4a13      	ldr	r2, [pc, #76]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	490b      	ldr	r1, [pc, #44]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ee:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	4904      	ldr	r1, [pc, #16]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000
 8003510:	40007000 	.word	0x40007000
 8003514:	42420440 	.word	0x42420440

08003518 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	2300      	movs	r3, #0
 800352a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b10      	cmp	r3, #16
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b10      	cmp	r3, #16
 800353e:	f200 808a 	bhi.w	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d045      	beq.n	80035d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d075      	beq.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800354e:	e082      	b.n	8003656 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003550:	4b46      	ldr	r3, [pc, #280]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003556:	4b45      	ldr	r3, [pc, #276]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d07b      	beq.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	0c9b      	lsrs	r3, r3, #18
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	4a41      	ldr	r2, [pc, #260]	; (8003670 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800357a:	4b3c      	ldr	r3, [pc, #240]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	0c5b      	lsrs	r3, r3, #17
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	4a3b      	ldr	r2, [pc, #236]	; (8003674 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003594:	4a38      	ldr	r2, [pc, #224]	; (8003678 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fbb2 f2f3 	udiv	r2, r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	e004      	b.n	80035b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4a34      	ldr	r2, [pc, #208]	; (800367c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80035b0:	4b2e      	ldr	r3, [pc, #184]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035bc:	d102      	bne.n	80035c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	61bb      	str	r3, [r7, #24]
      break;
 80035c2:	e04a      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4a2d      	ldr	r2, [pc, #180]	; (8003680 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]
      break;
 80035d2:	e042      	b.n	800365a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e4:	d108      	bne.n	80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80035f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e01f      	b.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003602:	d109      	bne.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003610:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e00f      	b.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003622:	d11c      	bne.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d016      	beq.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003630:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003634:	61bb      	str	r3, [r7, #24]
      break;
 8003636:	e012      	b.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003638:	e011      	b.n	800365e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800363a:	f7ff fe85 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 800363e:	4602      	mov	r2, r0
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	0b9b      	lsrs	r3, r3, #14
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	61bb      	str	r3, [r7, #24]
      break;
 8003654:	e004      	b.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003656:	bf00      	nop
 8003658:	e002      	b.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800365a:	bf00      	nop
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800365e:	bf00      	nop
    }
  }
  return (frequency);
 8003660:	69bb      	ldr	r3, [r7, #24]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	08004680 	.word	0x08004680
 8003674:	08004690 	.word	0x08004690
 8003678:	007a1200 	.word	0x007a1200
 800367c:	003d0900 	.word	0x003d0900
 8003680:	aaaaaaab 	.word	0xaaaaaaab

08003684 <LCD_Init>:
#include "stdarg.h"
#include "stdio.h"

void LCD_Init(LCD_HandleTypeDef *LCD, GPIO_TypeDef *GPIOx, 
                LCD_GPIOTypeDef LCD_Pin, LCD_SizeTypeDef LCD_Size)
{
 8003684:	b082      	sub	sp, #8
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
 8003690:	f107 0110 	add.w	r1, r7, #16
 8003694:	e881 000c 	stmia.w	r1, {r2, r3}
    LCD->GPIOx = GPIOx;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
    LCD->LCD_Pin.LCD_RS_PIN = LCD_Pin.LCD_RS_PIN;
 800369e:	8a3a      	ldrh	r2, [r7, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	809a      	strh	r2, [r3, #4]
    LCD->LCD_Pin.LCD_RW_PIN = LCD_Pin.LCD_RW_PIN;
 80036a4:	8a7a      	ldrh	r2, [r7, #18]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	80da      	strh	r2, [r3, #6]
    LCD->LCD_Pin.LCD_EN_PIN = LCD_Pin.LCD_EN_PIN;
 80036aa:	8aba      	ldrh	r2, [r7, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	811a      	strh	r2, [r3, #8]
    LCD->LCD_Pin.LCD_D7_PIN = LCD_Pin.LCD_D7_PIN;
 80036b0:	8bba      	ldrh	r2, [r7, #28]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	821a      	strh	r2, [r3, #16]
    LCD->LCD_Pin.LCD_D6_PIN = LCD_Pin.LCD_D6_PIN;
 80036b6:	8b7a      	ldrh	r2, [r7, #26]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	81da      	strh	r2, [r3, #14]
    LCD->LCD_Pin.LCD_D5_PIN = LCD_Pin.LCD_D5_PIN;
 80036bc:	8b3a      	ldrh	r2, [r7, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	819a      	strh	r2, [r3, #12]
    LCD->LCD_Pin.LCD_D4_PIN = LCD_Pin.LCD_D4_PIN;
 80036c2:	8afa      	ldrh	r2, [r7, #22]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	815a      	strh	r2, [r3, #10]
    LCD->LCD_Size.LCD_column = LCD_Size.LCD_column;
 80036c8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	749a      	strb	r2, [r3, #18]
    LCD->LCD_Size.LCD_row = LCD_Size.LCD_row;
 80036d0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	74da      	strb	r2, [r3, #19]

    HAL_Delay(50);
 80036d8:	2032      	movs	r0, #50	; 0x32
 80036da:	f7fe f93f 	bl	800195c <HAL_Delay>
    /* Function set: 4-bit interface*/
    LCD_SendCommand(LCD, 0x03);
 80036de:	2103      	movs	r1, #3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f849 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(5);
 80036e6:	2005      	movs	r0, #5
 80036e8:	f7fe f938 	bl	800195c <HAL_Delay>
    LCD_SendCommand(LCD, 0x03);
 80036ec:	2103      	movs	r1, #3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f842 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(1);
 80036f4:	2001      	movs	r0, #1
 80036f6:	f7fe f931 	bl	800195c <HAL_Delay>
    LCD_SendCommand(LCD, 0x03);
 80036fa:	2103      	movs	r1, #3
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f83b 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(1);
 8003702:	2001      	movs	r0, #1
 8003704:	f7fe f92a 	bl	800195c <HAL_Delay>
    LCD_SendCommand(LCD, 0x02);
 8003708:	2102      	movs	r1, #2
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f834 	bl	8003778 <LCD_SendCommand>
        HAL_Delay(1);
 8003710:	2001      	movs	r0, #1
 8003712:	f7fe f923 	bl	800195c <HAL_Delay>
    /*Display OFF, cursor ON*/
    LCD_SendCommand(LCD, 0x28);
 8003716:	2128      	movs	r1, #40	; 0x28
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f82d 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(1);
 800371e:	2001      	movs	r0, #1
 8003720:	f7fe f91c 	bl	800195c <HAL_Delay>
    LCD_SendCommand(LCD, 0x08);
 8003724:	2108      	movs	r1, #8
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f826 	bl	8003778 <LCD_SendCommand>
        HAL_Delay(1);
 800372c:	2001      	movs	r0, #1
 800372e:	f7fe f915 	bl	800195c <HAL_Delay>
    /*Clear display*/
    LCD_SendCommand(LCD, 0x01);
 8003732:	2101      	movs	r1, #1
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f81f 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(3);
 800373a:	2003      	movs	r0, #3
 800373c:	f7fe f90e 	bl	800195c <HAL_Delay>
    LCD_SendCommand(LCD, 0x06);
 8003740:	2106      	movs	r1, #6
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f818 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(1);
 8003748:	2001      	movs	r0, #1
 800374a:	f7fe f907 	bl	800195c <HAL_Delay>
    /* Function set: 5x7 mode for chars*/
    LCD_SendCommand(LCD, 0x0c);
 800374e:	210c      	movs	r1, #12
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f811 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(1);
 8003756:	2001      	movs	r0, #1
 8003758:	f7fe f900 	bl	800195c <HAL_Delay>
    LCD_SendCommand(LCD, 0x02);
 800375c:	2102      	movs	r1, #2
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f80a 	bl	8003778 <LCD_SendCommand>
    HAL_Delay(1);
 8003764:	2001      	movs	r0, #1
 8003766:	f7fe f8f9 	bl	800195c <HAL_Delay>

}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003774:	b002      	add	sp, #8
 8003776:	4770      	bx	lr

08003778 <LCD_SendCommand>:

void LCD_SendCommand(LCD_HandleTypeDef *LCD, uint8_t command)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
	/* RS = 0: Write Command */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 0);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6818      	ldr	r0, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	889b      	ldrh	r3, [r3, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	4619      	mov	r1, r3
 8003790:	f7ff f9f8 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6818      	ldr	r0, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	88db      	ldrh	r3, [r3, #6]
 800379c:	2200      	movs	r2, #0
 800379e:	4619      	mov	r1, r3
 80037a0:	f7ff f9f0 	bl	8002b84 <HAL_GPIO_WritePin>
	/* Transmit high nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, (command & 0x10) >> 4);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8959      	ldrh	r1, [r3, #10]
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	111b      	asrs	r3, r3, #4
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	f7ff f9e3 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (command & 0x20) >> 5);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	8999      	ldrh	r1, [r3, #12]
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	115b      	asrs	r3, r3, #5
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	f7ff f9d6 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (command & 0x40) >> 6);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	89d9      	ldrh	r1, [r3, #14]
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	119b      	asrs	r3, r3, #6
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	f7ff f9c9 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (command & 0x80) >> 7);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8a19      	ldrh	r1, [r3, #16]
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	09db      	lsrs	r3, r3, #7
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	f7ff f9bf 	bl	8002b84 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	891b      	ldrh	r3, [r3, #8]
 800380e:	2201      	movs	r2, #1
 8003810:	4619      	mov	r1, r3
 8003812:	f7ff f9b7 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003816:	2001      	movs	r0, #1
 8003818:	f7fe f8a0 	bl	800195c <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	891b      	ldrh	r3, [r3, #8]
 8003824:	2200      	movs	r2, #0
 8003826:	4619      	mov	r1, r3
 8003828:	f7ff f9ac 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800382c:	2001      	movs	r0, #1
 800382e:	f7fe f895 	bl	800195c <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 0);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6818      	ldr	r0, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	889b      	ldrh	r3, [r3, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	4619      	mov	r1, r3
 800383e:	f7ff f9a1 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	88db      	ldrh	r3, [r3, #6]
 800384a:	2200      	movs	r2, #0
 800384c:	4619      	mov	r1, r3
 800384e:	f7ff f999 	bl	8002b84 <HAL_GPIO_WritePin>
    /* Transmit low nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, command & 0x01);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8959      	ldrh	r1, [r3, #10]
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	f7ff f98e 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (command & 0x02) >> 1);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	8999      	ldrh	r1, [r3, #12]
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	105b      	asrs	r3, r3, #1
 8003874:	b2db      	uxtb	r3, r3
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	b2db      	uxtb	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	f7ff f981 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (command & 0x04) >> 2);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	89d9      	ldrh	r1, [r3, #14]
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	109b      	asrs	r3, r3, #2
 800388e:	b2db      	uxtb	r3, r3
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	f7ff f974 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (command & 0x08) >> 3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	8a19      	ldrh	r1, [r3, #16]
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	10db      	asrs	r3, r3, #3
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	f7ff f967 	bl	8002b84 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	891b      	ldrh	r3, [r3, #8]
 80038be:	2201      	movs	r2, #1
 80038c0:	4619      	mov	r1, r3
 80038c2:	f7ff f95f 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80038c6:	2001      	movs	r0, #1
 80038c8:	f7fe f848 	bl	800195c <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	891b      	ldrh	r3, [r3, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	4619      	mov	r1, r3
 80038d8:	f7ff f954 	bl	8002b84 <HAL_GPIO_WritePin>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <LCD_SendChar>:

void LCD_SendChar(LCD_HandleTypeDef *LCD, uint8_t LCD_data)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
    /* RS = 1: Write data */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 1);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	889b      	ldrh	r3, [r3, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	4619      	mov	r1, r3
 80038fc:	f7ff f942 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	88db      	ldrh	r3, [r3, #6]
 8003908:	2200      	movs	r2, #0
 800390a:	4619      	mov	r1, r3
 800390c:	f7ff f93a 	bl	8002b84 <HAL_GPIO_WritePin>
    /* Transmit high nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, (LCD_data & 0x10) >> 4);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8959      	ldrh	r1, [r3, #10]
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	111b      	asrs	r3, r3, #4
 800391c:	b2db      	uxtb	r3, r3
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	f7ff f92d 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (LCD_data & 0x20) >> 5);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6818      	ldr	r0, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8999      	ldrh	r1, [r3, #12]
 8003932:	78fb      	ldrb	r3, [r7, #3]
 8003934:	115b      	asrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	f7ff f920 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (LCD_data & 0x40) >> 6);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	89d9      	ldrh	r1, [r3, #14]
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	119b      	asrs	r3, r3, #6
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	f7ff f913 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (LCD_data & 0x80) >> 7);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8a19      	ldrh	r1, [r3, #16]
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	09db      	lsrs	r3, r3, #7
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	f7ff f909 	bl	8002b84 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	891b      	ldrh	r3, [r3, #8]
 800397a:	2201      	movs	r2, #1
 800397c:	4619      	mov	r1, r3
 800397e:	f7ff f901 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003982:	2001      	movs	r0, #1
 8003984:	f7fd ffea 	bl	800195c <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	891b      	ldrh	r3, [r3, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	4619      	mov	r1, r3
 8003994:	f7ff f8f6 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003998:	2001      	movs	r0, #1
 800399a:	f7fd ffdf 	bl	800195c <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RS_PIN, 1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	889b      	ldrh	r3, [r3, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	4619      	mov	r1, r3
 80039aa:	f7ff f8eb 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_RW_PIN, 0);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	88db      	ldrh	r3, [r3, #6]
 80039b6:	2200      	movs	r2, #0
 80039b8:	4619      	mov	r1, r3
 80039ba:	f7ff f8e3 	bl	8002b84 <HAL_GPIO_WritePin>
    /* Transmit low nibble */
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D4_PIN, LCD_data & 0x01);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8959      	ldrh	r1, [r3, #10]
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	461a      	mov	r2, r3
 80039d0:	f7ff f8d8 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D5_PIN, (LCD_data & 0x02) >> 1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8999      	ldrh	r1, [r3, #12]
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	105b      	asrs	r3, r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	f7ff f8cb 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D6_PIN, (LCD_data & 0x04) >> 2);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	89d9      	ldrh	r1, [r3, #14]
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	109b      	asrs	r3, r3, #2
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	f7ff f8be 	bl	8002b84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_D7_PIN, (LCD_data & 0x08) >> 3);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8a19      	ldrh	r1, [r3, #16]
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	10db      	asrs	r3, r3, #3
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f7ff f8b1 	bl	8002b84 <HAL_GPIO_WritePin>
    
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	891b      	ldrh	r3, [r3, #8]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7ff f8a9 	bl	8002b84 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8003a32:	2001      	movs	r0, #1
 8003a34:	f7fd ff92 	bl	800195c <HAL_Delay>
    HAL_GPIO_WritePin(LCD->GPIOx, LCD->LCD_Pin.LCD_EN_PIN, 0);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	891b      	ldrh	r3, [r3, #8]
 8003a40:	2200      	movs	r2, #0
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7ff f89e 	bl	8002b84 <HAL_GPIO_WritePin>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <LCD_SetCursor>:

void LCD_SetCursor(LCD_HandleTypeDef *LCD, 
                    uint8_t LCD_column_pos, uint8_t LCD_row_pos)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	70fb      	strb	r3, [r7, #3]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	70bb      	strb	r3, [r7, #2]
    uint8_t cursor_command;
    if ((LCD_column_pos < LCD->LCD_Size.LCD_column) && (LCD_row_pos < LCD->LCD_Size.LCD_row))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	7c9b      	ldrb	r3, [r3, #18]
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d22a      	bcs.n	8003ac0 <LCD_SetCursor+0x70>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	7cdb      	ldrb	r3, [r3, #19]
 8003a6e:	78ba      	ldrb	r2, [r7, #2]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d225      	bcs.n	8003ac0 <LCD_SetCursor+0x70>
    {
        switch (LCD_row_pos)
 8003a74:	78bb      	ldrb	r3, [r7, #2]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d824      	bhi.n	8003ac4 <LCD_SetCursor+0x74>
 8003a7a:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <LCD_SetCursor+0x30>)
 8003a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a80:	08003a91 	.word	0x08003a91
 8003a84:	08003a99 	.word	0x08003a99
 8003a88:	08003aa1 	.word	0x08003aa1
 8003a8c:	08003ab1 	.word	0x08003ab1
        {
        case 0:
            cursor_command = 0x80 + LCD_column_pos;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	3b80      	subs	r3, #128	; 0x80
 8003a94:	73fb      	strb	r3, [r7, #15]
            break;
 8003a96:	e016      	b.n	8003ac6 <LCD_SetCursor+0x76>

        case 1:
            cursor_command = 0xc0 + LCD_column_pos;
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	3b40      	subs	r3, #64	; 0x40
 8003a9c:	73fb      	strb	r3, [r7, #15]
            break;
 8003a9e:	e012      	b.n	8003ac6 <LCD_SetCursor+0x76>

        case 2:
            cursor_command = 0x80 + LCD->LCD_Size.LCD_column + LCD_column_pos;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	7c9a      	ldrb	r2, [r3, #18]
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	3b80      	subs	r3, #128	; 0x80
 8003aac:	73fb      	strb	r3, [r7, #15]
            break;
 8003aae:	e00a      	b.n	8003ac6 <LCD_SetCursor+0x76>

        case 3:
            cursor_command = 0xc0 + LCD->LCD_Size.LCD_column + LCD_column_pos;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	7c9a      	ldrb	r2, [r3, #18]
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	3b40      	subs	r3, #64	; 0x40
 8003abc:	73fb      	strb	r3, [r7, #15]
            break;
 8003abe:	e002      	b.n	8003ac6 <LCD_SetCursor+0x76>
        default:
            break;
        }
    }
 8003ac0:	bf00      	nop
 8003ac2:	e000      	b.n	8003ac6 <LCD_SetCursor+0x76>
            break;
 8003ac4:	bf00      	nop
    LCD_SendCommand(LCD, cursor_command);
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fe54 	bl	8003778 <LCD_SendCommand>
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <LCD_SendString>:

void LCD_SendString(LCD_HandleTypeDef *LCD, char *LCD_string)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
    for (uint8_t i = 0; i < LCD->LCD_Size.LCD_column; i++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73fb      	strb	r3, [r7, #15]
 8003ae6:	e00a      	b.n	8003afe <LCD_SendString+0x26>
    {
        LCD_SendChar(LCD, LCD_string[i]);
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff fef6 	bl	80038e4 <LCD_SendChar>
    for (uint8_t i = 0; i < LCD->LCD_Size.LCD_column; i++)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	3301      	adds	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7c9b      	ldrb	r3, [r3, #18]
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d3ef      	bcc.n	8003ae8 <LCD_SendString+0x10>
    }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <__errno>:
 8003b14:	4b01      	ldr	r3, [pc, #4]	; (8003b1c <__errno+0x8>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	2000000c 	.word	0x2000000c

08003b20 <__libc_init_array>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	2600      	movs	r6, #0
 8003b24:	4d0c      	ldr	r5, [pc, #48]	; (8003b58 <__libc_init_array+0x38>)
 8003b26:	4c0d      	ldr	r4, [pc, #52]	; (8003b5c <__libc_init_array+0x3c>)
 8003b28:	1b64      	subs	r4, r4, r5
 8003b2a:	10a4      	asrs	r4, r4, #2
 8003b2c:	42a6      	cmp	r6, r4
 8003b2e:	d109      	bne.n	8003b44 <__libc_init_array+0x24>
 8003b30:	f000 fd70 	bl	8004614 <_init>
 8003b34:	2600      	movs	r6, #0
 8003b36:	4d0a      	ldr	r5, [pc, #40]	; (8003b60 <__libc_init_array+0x40>)
 8003b38:	4c0a      	ldr	r4, [pc, #40]	; (8003b64 <__libc_init_array+0x44>)
 8003b3a:	1b64      	subs	r4, r4, r5
 8003b3c:	10a4      	asrs	r4, r4, #2
 8003b3e:	42a6      	cmp	r6, r4
 8003b40:	d105      	bne.n	8003b4e <__libc_init_array+0x2e>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b48:	4798      	blx	r3
 8003b4a:	3601      	adds	r6, #1
 8003b4c:	e7ee      	b.n	8003b2c <__libc_init_array+0xc>
 8003b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b52:	4798      	blx	r3
 8003b54:	3601      	adds	r6, #1
 8003b56:	e7f2      	b.n	8003b3e <__libc_init_array+0x1e>
 8003b58:	080046c8 	.word	0x080046c8
 8003b5c:	080046c8 	.word	0x080046c8
 8003b60:	080046c8 	.word	0x080046c8
 8003b64:	080046cc 	.word	0x080046cc

08003b68 <memset>:
 8003b68:	4603      	mov	r3, r0
 8003b6a:	4402      	add	r2, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <memset+0xa>
 8003b70:	4770      	bx	lr
 8003b72:	f803 1b01 	strb.w	r1, [r3], #1
 8003b76:	e7f9      	b.n	8003b6c <memset+0x4>

08003b78 <siprintf>:
 8003b78:	b40e      	push	{r1, r2, r3}
 8003b7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b7e:	b500      	push	{lr}
 8003b80:	b09c      	sub	sp, #112	; 0x70
 8003b82:	ab1d      	add	r3, sp, #116	; 0x74
 8003b84:	9002      	str	r0, [sp, #8]
 8003b86:	9006      	str	r0, [sp, #24]
 8003b88:	9107      	str	r1, [sp, #28]
 8003b8a:	9104      	str	r1, [sp, #16]
 8003b8c:	4808      	ldr	r0, [pc, #32]	; (8003bb0 <siprintf+0x38>)
 8003b8e:	4909      	ldr	r1, [pc, #36]	; (8003bb4 <siprintf+0x3c>)
 8003b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b94:	9105      	str	r1, [sp, #20]
 8003b96:	6800      	ldr	r0, [r0, #0]
 8003b98:	a902      	add	r1, sp, #8
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	f000 f868 	bl	8003c70 <_svfiprintf_r>
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	9b02      	ldr	r3, [sp, #8]
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	b01c      	add	sp, #112	; 0x70
 8003ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bac:	b003      	add	sp, #12
 8003bae:	4770      	bx	lr
 8003bb0:	2000000c 	.word	0x2000000c
 8003bb4:	ffff0208 	.word	0xffff0208

08003bb8 <__ssputs_r>:
 8003bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bbc:	688e      	ldr	r6, [r1, #8]
 8003bbe:	4682      	mov	sl, r0
 8003bc0:	429e      	cmp	r6, r3
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	4690      	mov	r8, r2
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	d838      	bhi.n	8003c3c <__ssputs_r+0x84>
 8003bca:	898a      	ldrh	r2, [r1, #12]
 8003bcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bd0:	d032      	beq.n	8003c38 <__ssputs_r+0x80>
 8003bd2:	6825      	ldr	r5, [r4, #0]
 8003bd4:	6909      	ldr	r1, [r1, #16]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	eba5 0901 	sub.w	r9, r5, r1
 8003bdc:	6965      	ldr	r5, [r4, #20]
 8003bde:	444b      	add	r3, r9
 8003be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003be4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003be8:	106d      	asrs	r5, r5, #1
 8003bea:	429d      	cmp	r5, r3
 8003bec:	bf38      	it	cc
 8003bee:	461d      	movcc	r5, r3
 8003bf0:	0553      	lsls	r3, r2, #21
 8003bf2:	d531      	bpl.n	8003c58 <__ssputs_r+0xa0>
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f000 fb6f 	bl	80042d8 <_malloc_r>
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	b950      	cbnz	r0, 8003c14 <__ssputs_r+0x5c>
 8003bfe:	230c      	movs	r3, #12
 8003c00:	f04f 30ff 	mov.w	r0, #4294967295
 8003c04:	f8ca 3000 	str.w	r3, [sl]
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0e:	81a3      	strh	r3, [r4, #12]
 8003c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c14:	464a      	mov	r2, r9
 8003c16:	6921      	ldr	r1, [r4, #16]
 8003c18:	f000 face 	bl	80041b8 <memcpy>
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c26:	81a3      	strh	r3, [r4, #12]
 8003c28:	6126      	str	r6, [r4, #16]
 8003c2a:	444e      	add	r6, r9
 8003c2c:	6026      	str	r6, [r4, #0]
 8003c2e:	463e      	mov	r6, r7
 8003c30:	6165      	str	r5, [r4, #20]
 8003c32:	eba5 0509 	sub.w	r5, r5, r9
 8003c36:	60a5      	str	r5, [r4, #8]
 8003c38:	42be      	cmp	r6, r7
 8003c3a:	d900      	bls.n	8003c3e <__ssputs_r+0x86>
 8003c3c:	463e      	mov	r6, r7
 8003c3e:	4632      	mov	r2, r6
 8003c40:	4641      	mov	r1, r8
 8003c42:	6820      	ldr	r0, [r4, #0]
 8003c44:	f000 fac6 	bl	80041d4 <memmove>
 8003c48:	68a3      	ldr	r3, [r4, #8]
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	1b9b      	subs	r3, r3, r6
 8003c4e:	60a3      	str	r3, [r4, #8]
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	4433      	add	r3, r6
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	e7db      	b.n	8003c10 <__ssputs_r+0x58>
 8003c58:	462a      	mov	r2, r5
 8003c5a:	f000 fbb1 	bl	80043c0 <_realloc_r>
 8003c5e:	4606      	mov	r6, r0
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d1e1      	bne.n	8003c28 <__ssputs_r+0x70>
 8003c64:	4650      	mov	r0, sl
 8003c66:	6921      	ldr	r1, [r4, #16]
 8003c68:	f000 face 	bl	8004208 <_free_r>
 8003c6c:	e7c7      	b.n	8003bfe <__ssputs_r+0x46>
	...

08003c70 <_svfiprintf_r>:
 8003c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c74:	4698      	mov	r8, r3
 8003c76:	898b      	ldrh	r3, [r1, #12]
 8003c78:	4607      	mov	r7, r0
 8003c7a:	061b      	lsls	r3, r3, #24
 8003c7c:	460d      	mov	r5, r1
 8003c7e:	4614      	mov	r4, r2
 8003c80:	b09d      	sub	sp, #116	; 0x74
 8003c82:	d50e      	bpl.n	8003ca2 <_svfiprintf_r+0x32>
 8003c84:	690b      	ldr	r3, [r1, #16]
 8003c86:	b963      	cbnz	r3, 8003ca2 <_svfiprintf_r+0x32>
 8003c88:	2140      	movs	r1, #64	; 0x40
 8003c8a:	f000 fb25 	bl	80042d8 <_malloc_r>
 8003c8e:	6028      	str	r0, [r5, #0]
 8003c90:	6128      	str	r0, [r5, #16]
 8003c92:	b920      	cbnz	r0, 8003c9e <_svfiprintf_r+0x2e>
 8003c94:	230c      	movs	r3, #12
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e0d1      	b.n	8003e42 <_svfiprintf_r+0x1d2>
 8003c9e:	2340      	movs	r3, #64	; 0x40
 8003ca0:	616b      	str	r3, [r5, #20]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ca6:	2320      	movs	r3, #32
 8003ca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cac:	2330      	movs	r3, #48	; 0x30
 8003cae:	f04f 0901 	mov.w	r9, #1
 8003cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e5c <_svfiprintf_r+0x1ec>
 8003cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	469a      	mov	sl, r3
 8003cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cc6:	b10a      	cbz	r2, 8003ccc <_svfiprintf_r+0x5c>
 8003cc8:	2a25      	cmp	r2, #37	; 0x25
 8003cca:	d1f9      	bne.n	8003cc0 <_svfiprintf_r+0x50>
 8003ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8003cd0:	d00b      	beq.n	8003cea <_svfiprintf_r+0x7a>
 8003cd2:	465b      	mov	r3, fp
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	4638      	mov	r0, r7
 8003cda:	f7ff ff6d 	bl	8003bb8 <__ssputs_r>
 8003cde:	3001      	adds	r0, #1
 8003ce0:	f000 80aa 	beq.w	8003e38 <_svfiprintf_r+0x1c8>
 8003ce4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ce6:	445a      	add	r2, fp
 8003ce8:	9209      	str	r2, [sp, #36]	; 0x24
 8003cea:	f89a 3000 	ldrb.w	r3, [sl]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80a2 	beq.w	8003e38 <_svfiprintf_r+0x1c8>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cfe:	f10a 0a01 	add.w	sl, sl, #1
 8003d02:	9304      	str	r3, [sp, #16]
 8003d04:	9307      	str	r3, [sp, #28]
 8003d06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003d0c:	4654      	mov	r4, sl
 8003d0e:	2205      	movs	r2, #5
 8003d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d14:	4851      	ldr	r0, [pc, #324]	; (8003e5c <_svfiprintf_r+0x1ec>)
 8003d16:	f000 fa41 	bl	800419c <memchr>
 8003d1a:	9a04      	ldr	r2, [sp, #16]
 8003d1c:	b9d8      	cbnz	r0, 8003d56 <_svfiprintf_r+0xe6>
 8003d1e:	06d0      	lsls	r0, r2, #27
 8003d20:	bf44      	itt	mi
 8003d22:	2320      	movmi	r3, #32
 8003d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d28:	0711      	lsls	r1, r2, #28
 8003d2a:	bf44      	itt	mi
 8003d2c:	232b      	movmi	r3, #43	; 0x2b
 8003d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d32:	f89a 3000 	ldrb.w	r3, [sl]
 8003d36:	2b2a      	cmp	r3, #42	; 0x2a
 8003d38:	d015      	beq.n	8003d66 <_svfiprintf_r+0xf6>
 8003d3a:	4654      	mov	r4, sl
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f04f 0c0a 	mov.w	ip, #10
 8003d42:	9a07      	ldr	r2, [sp, #28]
 8003d44:	4621      	mov	r1, r4
 8003d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d4a:	3b30      	subs	r3, #48	; 0x30
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d94e      	bls.n	8003dee <_svfiprintf_r+0x17e>
 8003d50:	b1b0      	cbz	r0, 8003d80 <_svfiprintf_r+0x110>
 8003d52:	9207      	str	r2, [sp, #28]
 8003d54:	e014      	b.n	8003d80 <_svfiprintf_r+0x110>
 8003d56:	eba0 0308 	sub.w	r3, r0, r8
 8003d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	46a2      	mov	sl, r4
 8003d62:	9304      	str	r3, [sp, #16]
 8003d64:	e7d2      	b.n	8003d0c <_svfiprintf_r+0x9c>
 8003d66:	9b03      	ldr	r3, [sp, #12]
 8003d68:	1d19      	adds	r1, r3, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	9103      	str	r1, [sp, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bfbb      	ittet	lt
 8003d72:	425b      	neglt	r3, r3
 8003d74:	f042 0202 	orrlt.w	r2, r2, #2
 8003d78:	9307      	strge	r3, [sp, #28]
 8003d7a:	9307      	strlt	r3, [sp, #28]
 8003d7c:	bfb8      	it	lt
 8003d7e:	9204      	strlt	r2, [sp, #16]
 8003d80:	7823      	ldrb	r3, [r4, #0]
 8003d82:	2b2e      	cmp	r3, #46	; 0x2e
 8003d84:	d10c      	bne.n	8003da0 <_svfiprintf_r+0x130>
 8003d86:	7863      	ldrb	r3, [r4, #1]
 8003d88:	2b2a      	cmp	r3, #42	; 0x2a
 8003d8a:	d135      	bne.n	8003df8 <_svfiprintf_r+0x188>
 8003d8c:	9b03      	ldr	r3, [sp, #12]
 8003d8e:	3402      	adds	r4, #2
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	9203      	str	r2, [sp, #12]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bfb8      	it	lt
 8003d9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d9e:	9305      	str	r3, [sp, #20]
 8003da0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003e60 <_svfiprintf_r+0x1f0>
 8003da4:	2203      	movs	r2, #3
 8003da6:	4650      	mov	r0, sl
 8003da8:	7821      	ldrb	r1, [r4, #0]
 8003daa:	f000 f9f7 	bl	800419c <memchr>
 8003dae:	b140      	cbz	r0, 8003dc2 <_svfiprintf_r+0x152>
 8003db0:	2340      	movs	r3, #64	; 0x40
 8003db2:	eba0 000a 	sub.w	r0, r0, sl
 8003db6:	fa03 f000 	lsl.w	r0, r3, r0
 8003dba:	9b04      	ldr	r3, [sp, #16]
 8003dbc:	3401      	adds	r4, #1
 8003dbe:	4303      	orrs	r3, r0
 8003dc0:	9304      	str	r3, [sp, #16]
 8003dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dc6:	2206      	movs	r2, #6
 8003dc8:	4826      	ldr	r0, [pc, #152]	; (8003e64 <_svfiprintf_r+0x1f4>)
 8003dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dce:	f000 f9e5 	bl	800419c <memchr>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	d038      	beq.n	8003e48 <_svfiprintf_r+0x1d8>
 8003dd6:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <_svfiprintf_r+0x1f8>)
 8003dd8:	bb1b      	cbnz	r3, 8003e22 <_svfiprintf_r+0x1b2>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	3307      	adds	r3, #7
 8003dde:	f023 0307 	bic.w	r3, r3, #7
 8003de2:	3308      	adds	r3, #8
 8003de4:	9303      	str	r3, [sp, #12]
 8003de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de8:	4433      	add	r3, r6
 8003dea:	9309      	str	r3, [sp, #36]	; 0x24
 8003dec:	e767      	b.n	8003cbe <_svfiprintf_r+0x4e>
 8003dee:	460c      	mov	r4, r1
 8003df0:	2001      	movs	r0, #1
 8003df2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003df6:	e7a5      	b.n	8003d44 <_svfiprintf_r+0xd4>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f04f 0c0a 	mov.w	ip, #10
 8003dfe:	4619      	mov	r1, r3
 8003e00:	3401      	adds	r4, #1
 8003e02:	9305      	str	r3, [sp, #20]
 8003e04:	4620      	mov	r0, r4
 8003e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e0a:	3a30      	subs	r2, #48	; 0x30
 8003e0c:	2a09      	cmp	r2, #9
 8003e0e:	d903      	bls.n	8003e18 <_svfiprintf_r+0x1a8>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0c5      	beq.n	8003da0 <_svfiprintf_r+0x130>
 8003e14:	9105      	str	r1, [sp, #20]
 8003e16:	e7c3      	b.n	8003da0 <_svfiprintf_r+0x130>
 8003e18:	4604      	mov	r4, r0
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e20:	e7f0      	b.n	8003e04 <_svfiprintf_r+0x194>
 8003e22:	ab03      	add	r3, sp, #12
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	462a      	mov	r2, r5
 8003e28:	4638      	mov	r0, r7
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <_svfiprintf_r+0x1fc>)
 8003e2c:	a904      	add	r1, sp, #16
 8003e2e:	f3af 8000 	nop.w
 8003e32:	1c42      	adds	r2, r0, #1
 8003e34:	4606      	mov	r6, r0
 8003e36:	d1d6      	bne.n	8003de6 <_svfiprintf_r+0x176>
 8003e38:	89ab      	ldrh	r3, [r5, #12]
 8003e3a:	065b      	lsls	r3, r3, #25
 8003e3c:	f53f af2c 	bmi.w	8003c98 <_svfiprintf_r+0x28>
 8003e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e42:	b01d      	add	sp, #116	; 0x74
 8003e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e48:	ab03      	add	r3, sp, #12
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4638      	mov	r0, r7
 8003e50:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <_svfiprintf_r+0x1fc>)
 8003e52:	a904      	add	r1, sp, #16
 8003e54:	f000 f87c 	bl	8003f50 <_printf_i>
 8003e58:	e7eb      	b.n	8003e32 <_svfiprintf_r+0x1c2>
 8003e5a:	bf00      	nop
 8003e5c:	08004692 	.word	0x08004692
 8003e60:	08004698 	.word	0x08004698
 8003e64:	0800469c 	.word	0x0800469c
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	08003bb9 	.word	0x08003bb9

08003e70 <_printf_common>:
 8003e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	4616      	mov	r6, r2
 8003e76:	4699      	mov	r9, r3
 8003e78:	688a      	ldr	r2, [r1, #8]
 8003e7a:	690b      	ldr	r3, [r1, #16]
 8003e7c:	4607      	mov	r7, r0
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	bfb8      	it	lt
 8003e82:	4613      	movlt	r3, r2
 8003e84:	6033      	str	r3, [r6, #0]
 8003e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e90:	b10a      	cbz	r2, 8003e96 <_printf_common+0x26>
 8003e92:	3301      	adds	r3, #1
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	0699      	lsls	r1, r3, #26
 8003e9a:	bf42      	ittt	mi
 8003e9c:	6833      	ldrmi	r3, [r6, #0]
 8003e9e:	3302      	addmi	r3, #2
 8003ea0:	6033      	strmi	r3, [r6, #0]
 8003ea2:	6825      	ldr	r5, [r4, #0]
 8003ea4:	f015 0506 	ands.w	r5, r5, #6
 8003ea8:	d106      	bne.n	8003eb8 <_printf_common+0x48>
 8003eaa:	f104 0a19 	add.w	sl, r4, #25
 8003eae:	68e3      	ldr	r3, [r4, #12]
 8003eb0:	6832      	ldr	r2, [r6, #0]
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	42ab      	cmp	r3, r5
 8003eb6:	dc28      	bgt.n	8003f0a <_printf_common+0x9a>
 8003eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ebc:	1e13      	subs	r3, r2, #0
 8003ebe:	6822      	ldr	r2, [r4, #0]
 8003ec0:	bf18      	it	ne
 8003ec2:	2301      	movne	r3, #1
 8003ec4:	0692      	lsls	r2, r2, #26
 8003ec6:	d42d      	bmi.n	8003f24 <_printf_common+0xb4>
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ed0:	47c0      	blx	r8
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d020      	beq.n	8003f18 <_printf_common+0xa8>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	68e5      	ldr	r5, [r4, #12]
 8003eda:	f003 0306 	and.w	r3, r3, #6
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	bf18      	it	ne
 8003ee2:	2500      	movne	r5, #0
 8003ee4:	6832      	ldr	r2, [r6, #0]
 8003ee6:	f04f 0600 	mov.w	r6, #0
 8003eea:	68a3      	ldr	r3, [r4, #8]
 8003eec:	bf08      	it	eq
 8003eee:	1aad      	subeq	r5, r5, r2
 8003ef0:	6922      	ldr	r2, [r4, #16]
 8003ef2:	bf08      	it	eq
 8003ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	bfc4      	itt	gt
 8003efc:	1a9b      	subgt	r3, r3, r2
 8003efe:	18ed      	addgt	r5, r5, r3
 8003f00:	341a      	adds	r4, #26
 8003f02:	42b5      	cmp	r5, r6
 8003f04:	d11a      	bne.n	8003f3c <_printf_common+0xcc>
 8003f06:	2000      	movs	r0, #0
 8003f08:	e008      	b.n	8003f1c <_printf_common+0xac>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4652      	mov	r2, sl
 8003f0e:	4649      	mov	r1, r9
 8003f10:	4638      	mov	r0, r7
 8003f12:	47c0      	blx	r8
 8003f14:	3001      	adds	r0, #1
 8003f16:	d103      	bne.n	8003f20 <_printf_common+0xb0>
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f20:	3501      	adds	r5, #1
 8003f22:	e7c4      	b.n	8003eae <_printf_common+0x3e>
 8003f24:	2030      	movs	r0, #48	; 0x30
 8003f26:	18e1      	adds	r1, r4, r3
 8003f28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f32:	4422      	add	r2, r4
 8003f34:	3302      	adds	r3, #2
 8003f36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f3a:	e7c5      	b.n	8003ec8 <_printf_common+0x58>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	4622      	mov	r2, r4
 8003f40:	4649      	mov	r1, r9
 8003f42:	4638      	mov	r0, r7
 8003f44:	47c0      	blx	r8
 8003f46:	3001      	adds	r0, #1
 8003f48:	d0e6      	beq.n	8003f18 <_printf_common+0xa8>
 8003f4a:	3601      	adds	r6, #1
 8003f4c:	e7d9      	b.n	8003f02 <_printf_common+0x92>
	...

08003f50 <_printf_i>:
 8003f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f54:	7e0f      	ldrb	r7, [r1, #24]
 8003f56:	4691      	mov	r9, r2
 8003f58:	2f78      	cmp	r7, #120	; 0x78
 8003f5a:	4680      	mov	r8, r0
 8003f5c:	460c      	mov	r4, r1
 8003f5e:	469a      	mov	sl, r3
 8003f60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f66:	d807      	bhi.n	8003f78 <_printf_i+0x28>
 8003f68:	2f62      	cmp	r7, #98	; 0x62
 8003f6a:	d80a      	bhi.n	8003f82 <_printf_i+0x32>
 8003f6c:	2f00      	cmp	r7, #0
 8003f6e:	f000 80d9 	beq.w	8004124 <_printf_i+0x1d4>
 8003f72:	2f58      	cmp	r7, #88	; 0x58
 8003f74:	f000 80a4 	beq.w	80040c0 <_printf_i+0x170>
 8003f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f80:	e03a      	b.n	8003ff8 <_printf_i+0xa8>
 8003f82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f86:	2b15      	cmp	r3, #21
 8003f88:	d8f6      	bhi.n	8003f78 <_printf_i+0x28>
 8003f8a:	a101      	add	r1, pc, #4	; (adr r1, 8003f90 <_printf_i+0x40>)
 8003f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003ffd 	.word	0x08003ffd
 8003f98:	08003f79 	.word	0x08003f79
 8003f9c:	08003f79 	.word	0x08003f79
 8003fa0:	08003f79 	.word	0x08003f79
 8003fa4:	08003f79 	.word	0x08003f79
 8003fa8:	08003ffd 	.word	0x08003ffd
 8003fac:	08003f79 	.word	0x08003f79
 8003fb0:	08003f79 	.word	0x08003f79
 8003fb4:	08003f79 	.word	0x08003f79
 8003fb8:	08003f79 	.word	0x08003f79
 8003fbc:	0800410b 	.word	0x0800410b
 8003fc0:	0800402d 	.word	0x0800402d
 8003fc4:	080040ed 	.word	0x080040ed
 8003fc8:	08003f79 	.word	0x08003f79
 8003fcc:	08003f79 	.word	0x08003f79
 8003fd0:	0800412d 	.word	0x0800412d
 8003fd4:	08003f79 	.word	0x08003f79
 8003fd8:	0800402d 	.word	0x0800402d
 8003fdc:	08003f79 	.word	0x08003f79
 8003fe0:	08003f79 	.word	0x08003f79
 8003fe4:	080040f5 	.word	0x080040f5
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	602a      	str	r2, [r5, #0]
 8003ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0a4      	b.n	8004146 <_printf_i+0x1f6>
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	6829      	ldr	r1, [r5, #0]
 8004000:	0606      	lsls	r6, r0, #24
 8004002:	f101 0304 	add.w	r3, r1, #4
 8004006:	d50a      	bpl.n	800401e <_printf_i+0xce>
 8004008:	680e      	ldr	r6, [r1, #0]
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	2e00      	cmp	r6, #0
 800400e:	da03      	bge.n	8004018 <_printf_i+0xc8>
 8004010:	232d      	movs	r3, #45	; 0x2d
 8004012:	4276      	negs	r6, r6
 8004014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004018:	230a      	movs	r3, #10
 800401a:	485e      	ldr	r0, [pc, #376]	; (8004194 <_printf_i+0x244>)
 800401c:	e019      	b.n	8004052 <_printf_i+0x102>
 800401e:	680e      	ldr	r6, [r1, #0]
 8004020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004024:	602b      	str	r3, [r5, #0]
 8004026:	bf18      	it	ne
 8004028:	b236      	sxthne	r6, r6
 800402a:	e7ef      	b.n	800400c <_printf_i+0xbc>
 800402c:	682b      	ldr	r3, [r5, #0]
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	1d19      	adds	r1, r3, #4
 8004032:	6029      	str	r1, [r5, #0]
 8004034:	0601      	lsls	r1, r0, #24
 8004036:	d501      	bpl.n	800403c <_printf_i+0xec>
 8004038:	681e      	ldr	r6, [r3, #0]
 800403a:	e002      	b.n	8004042 <_printf_i+0xf2>
 800403c:	0646      	lsls	r6, r0, #25
 800403e:	d5fb      	bpl.n	8004038 <_printf_i+0xe8>
 8004040:	881e      	ldrh	r6, [r3, #0]
 8004042:	2f6f      	cmp	r7, #111	; 0x6f
 8004044:	bf0c      	ite	eq
 8004046:	2308      	moveq	r3, #8
 8004048:	230a      	movne	r3, #10
 800404a:	4852      	ldr	r0, [pc, #328]	; (8004194 <_printf_i+0x244>)
 800404c:	2100      	movs	r1, #0
 800404e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004052:	6865      	ldr	r5, [r4, #4]
 8004054:	2d00      	cmp	r5, #0
 8004056:	bfa8      	it	ge
 8004058:	6821      	ldrge	r1, [r4, #0]
 800405a:	60a5      	str	r5, [r4, #8]
 800405c:	bfa4      	itt	ge
 800405e:	f021 0104 	bicge.w	r1, r1, #4
 8004062:	6021      	strge	r1, [r4, #0]
 8004064:	b90e      	cbnz	r6, 800406a <_printf_i+0x11a>
 8004066:	2d00      	cmp	r5, #0
 8004068:	d04d      	beq.n	8004106 <_printf_i+0x1b6>
 800406a:	4615      	mov	r5, r2
 800406c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004070:	fb03 6711 	mls	r7, r3, r1, r6
 8004074:	5dc7      	ldrb	r7, [r0, r7]
 8004076:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800407a:	4637      	mov	r7, r6
 800407c:	42bb      	cmp	r3, r7
 800407e:	460e      	mov	r6, r1
 8004080:	d9f4      	bls.n	800406c <_printf_i+0x11c>
 8004082:	2b08      	cmp	r3, #8
 8004084:	d10b      	bne.n	800409e <_printf_i+0x14e>
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	07de      	lsls	r6, r3, #31
 800408a:	d508      	bpl.n	800409e <_printf_i+0x14e>
 800408c:	6923      	ldr	r3, [r4, #16]
 800408e:	6861      	ldr	r1, [r4, #4]
 8004090:	4299      	cmp	r1, r3
 8004092:	bfde      	ittt	le
 8004094:	2330      	movle	r3, #48	; 0x30
 8004096:	f805 3c01 	strble.w	r3, [r5, #-1]
 800409a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800409e:	1b52      	subs	r2, r2, r5
 80040a0:	6122      	str	r2, [r4, #16]
 80040a2:	464b      	mov	r3, r9
 80040a4:	4621      	mov	r1, r4
 80040a6:	4640      	mov	r0, r8
 80040a8:	f8cd a000 	str.w	sl, [sp]
 80040ac:	aa03      	add	r2, sp, #12
 80040ae:	f7ff fedf 	bl	8003e70 <_printf_common>
 80040b2:	3001      	adds	r0, #1
 80040b4:	d14c      	bne.n	8004150 <_printf_i+0x200>
 80040b6:	f04f 30ff 	mov.w	r0, #4294967295
 80040ba:	b004      	add	sp, #16
 80040bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c0:	4834      	ldr	r0, [pc, #208]	; (8004194 <_printf_i+0x244>)
 80040c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80040c6:	6829      	ldr	r1, [r5, #0]
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80040ce:	6029      	str	r1, [r5, #0]
 80040d0:	061d      	lsls	r5, r3, #24
 80040d2:	d514      	bpl.n	80040fe <_printf_i+0x1ae>
 80040d4:	07df      	lsls	r7, r3, #31
 80040d6:	bf44      	itt	mi
 80040d8:	f043 0320 	orrmi.w	r3, r3, #32
 80040dc:	6023      	strmi	r3, [r4, #0]
 80040de:	b91e      	cbnz	r6, 80040e8 <_printf_i+0x198>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	6023      	str	r3, [r4, #0]
 80040e8:	2310      	movs	r3, #16
 80040ea:	e7af      	b.n	800404c <_printf_i+0xfc>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	f043 0320 	orr.w	r3, r3, #32
 80040f2:	6023      	str	r3, [r4, #0]
 80040f4:	2378      	movs	r3, #120	; 0x78
 80040f6:	4828      	ldr	r0, [pc, #160]	; (8004198 <_printf_i+0x248>)
 80040f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040fc:	e7e3      	b.n	80040c6 <_printf_i+0x176>
 80040fe:	0659      	lsls	r1, r3, #25
 8004100:	bf48      	it	mi
 8004102:	b2b6      	uxthmi	r6, r6
 8004104:	e7e6      	b.n	80040d4 <_printf_i+0x184>
 8004106:	4615      	mov	r5, r2
 8004108:	e7bb      	b.n	8004082 <_printf_i+0x132>
 800410a:	682b      	ldr	r3, [r5, #0]
 800410c:	6826      	ldr	r6, [r4, #0]
 800410e:	1d18      	adds	r0, r3, #4
 8004110:	6961      	ldr	r1, [r4, #20]
 8004112:	6028      	str	r0, [r5, #0]
 8004114:	0635      	lsls	r5, r6, #24
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	d501      	bpl.n	800411e <_printf_i+0x1ce>
 800411a:	6019      	str	r1, [r3, #0]
 800411c:	e002      	b.n	8004124 <_printf_i+0x1d4>
 800411e:	0670      	lsls	r0, r6, #25
 8004120:	d5fb      	bpl.n	800411a <_printf_i+0x1ca>
 8004122:	8019      	strh	r1, [r3, #0]
 8004124:	2300      	movs	r3, #0
 8004126:	4615      	mov	r5, r2
 8004128:	6123      	str	r3, [r4, #16]
 800412a:	e7ba      	b.n	80040a2 <_printf_i+0x152>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	2100      	movs	r1, #0
 8004130:	1d1a      	adds	r2, r3, #4
 8004132:	602a      	str	r2, [r5, #0]
 8004134:	681d      	ldr	r5, [r3, #0]
 8004136:	6862      	ldr	r2, [r4, #4]
 8004138:	4628      	mov	r0, r5
 800413a:	f000 f82f 	bl	800419c <memchr>
 800413e:	b108      	cbz	r0, 8004144 <_printf_i+0x1f4>
 8004140:	1b40      	subs	r0, r0, r5
 8004142:	6060      	str	r0, [r4, #4]
 8004144:	6863      	ldr	r3, [r4, #4]
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	2300      	movs	r3, #0
 800414a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800414e:	e7a8      	b.n	80040a2 <_printf_i+0x152>
 8004150:	462a      	mov	r2, r5
 8004152:	4649      	mov	r1, r9
 8004154:	4640      	mov	r0, r8
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	47d0      	blx	sl
 800415a:	3001      	adds	r0, #1
 800415c:	d0ab      	beq.n	80040b6 <_printf_i+0x166>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	079b      	lsls	r3, r3, #30
 8004162:	d413      	bmi.n	800418c <_printf_i+0x23c>
 8004164:	68e0      	ldr	r0, [r4, #12]
 8004166:	9b03      	ldr	r3, [sp, #12]
 8004168:	4298      	cmp	r0, r3
 800416a:	bfb8      	it	lt
 800416c:	4618      	movlt	r0, r3
 800416e:	e7a4      	b.n	80040ba <_printf_i+0x16a>
 8004170:	2301      	movs	r3, #1
 8004172:	4632      	mov	r2, r6
 8004174:	4649      	mov	r1, r9
 8004176:	4640      	mov	r0, r8
 8004178:	47d0      	blx	sl
 800417a:	3001      	adds	r0, #1
 800417c:	d09b      	beq.n	80040b6 <_printf_i+0x166>
 800417e:	3501      	adds	r5, #1
 8004180:	68e3      	ldr	r3, [r4, #12]
 8004182:	9903      	ldr	r1, [sp, #12]
 8004184:	1a5b      	subs	r3, r3, r1
 8004186:	42ab      	cmp	r3, r5
 8004188:	dcf2      	bgt.n	8004170 <_printf_i+0x220>
 800418a:	e7eb      	b.n	8004164 <_printf_i+0x214>
 800418c:	2500      	movs	r5, #0
 800418e:	f104 0619 	add.w	r6, r4, #25
 8004192:	e7f5      	b.n	8004180 <_printf_i+0x230>
 8004194:	080046a3 	.word	0x080046a3
 8004198:	080046b4 	.word	0x080046b4

0800419c <memchr>:
 800419c:	4603      	mov	r3, r0
 800419e:	b510      	push	{r4, lr}
 80041a0:	b2c9      	uxtb	r1, r1
 80041a2:	4402      	add	r2, r0
 80041a4:	4293      	cmp	r3, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	d101      	bne.n	80041ae <memchr+0x12>
 80041aa:	2000      	movs	r0, #0
 80041ac:	e003      	b.n	80041b6 <memchr+0x1a>
 80041ae:	7804      	ldrb	r4, [r0, #0]
 80041b0:	3301      	adds	r3, #1
 80041b2:	428c      	cmp	r4, r1
 80041b4:	d1f6      	bne.n	80041a4 <memchr+0x8>
 80041b6:	bd10      	pop	{r4, pc}

080041b8 <memcpy>:
 80041b8:	440a      	add	r2, r1
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80041c0:	d100      	bne.n	80041c4 <memcpy+0xc>
 80041c2:	4770      	bx	lr
 80041c4:	b510      	push	{r4, lr}
 80041c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ca:	4291      	cmp	r1, r2
 80041cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041d0:	d1f9      	bne.n	80041c6 <memcpy+0xe>
 80041d2:	bd10      	pop	{r4, pc}

080041d4 <memmove>:
 80041d4:	4288      	cmp	r0, r1
 80041d6:	b510      	push	{r4, lr}
 80041d8:	eb01 0402 	add.w	r4, r1, r2
 80041dc:	d902      	bls.n	80041e4 <memmove+0x10>
 80041de:	4284      	cmp	r4, r0
 80041e0:	4623      	mov	r3, r4
 80041e2:	d807      	bhi.n	80041f4 <memmove+0x20>
 80041e4:	1e43      	subs	r3, r0, #1
 80041e6:	42a1      	cmp	r1, r4
 80041e8:	d008      	beq.n	80041fc <memmove+0x28>
 80041ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041f2:	e7f8      	b.n	80041e6 <memmove+0x12>
 80041f4:	4601      	mov	r1, r0
 80041f6:	4402      	add	r2, r0
 80041f8:	428a      	cmp	r2, r1
 80041fa:	d100      	bne.n	80041fe <memmove+0x2a>
 80041fc:	bd10      	pop	{r4, pc}
 80041fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004206:	e7f7      	b.n	80041f8 <memmove+0x24>

08004208 <_free_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4605      	mov	r5, r0
 800420c:	2900      	cmp	r1, #0
 800420e:	d040      	beq.n	8004292 <_free_r+0x8a>
 8004210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004214:	1f0c      	subs	r4, r1, #4
 8004216:	2b00      	cmp	r3, #0
 8004218:	bfb8      	it	lt
 800421a:	18e4      	addlt	r4, r4, r3
 800421c:	f000 f910 	bl	8004440 <__malloc_lock>
 8004220:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <_free_r+0x8c>)
 8004222:	6813      	ldr	r3, [r2, #0]
 8004224:	b933      	cbnz	r3, 8004234 <_free_r+0x2c>
 8004226:	6063      	str	r3, [r4, #4]
 8004228:	6014      	str	r4, [r2, #0]
 800422a:	4628      	mov	r0, r5
 800422c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004230:	f000 b90c 	b.w	800444c <__malloc_unlock>
 8004234:	42a3      	cmp	r3, r4
 8004236:	d908      	bls.n	800424a <_free_r+0x42>
 8004238:	6820      	ldr	r0, [r4, #0]
 800423a:	1821      	adds	r1, r4, r0
 800423c:	428b      	cmp	r3, r1
 800423e:	bf01      	itttt	eq
 8004240:	6819      	ldreq	r1, [r3, #0]
 8004242:	685b      	ldreq	r3, [r3, #4]
 8004244:	1809      	addeq	r1, r1, r0
 8004246:	6021      	streq	r1, [r4, #0]
 8004248:	e7ed      	b.n	8004226 <_free_r+0x1e>
 800424a:	461a      	mov	r2, r3
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	b10b      	cbz	r3, 8004254 <_free_r+0x4c>
 8004250:	42a3      	cmp	r3, r4
 8004252:	d9fa      	bls.n	800424a <_free_r+0x42>
 8004254:	6811      	ldr	r1, [r2, #0]
 8004256:	1850      	adds	r0, r2, r1
 8004258:	42a0      	cmp	r0, r4
 800425a:	d10b      	bne.n	8004274 <_free_r+0x6c>
 800425c:	6820      	ldr	r0, [r4, #0]
 800425e:	4401      	add	r1, r0
 8004260:	1850      	adds	r0, r2, r1
 8004262:	4283      	cmp	r3, r0
 8004264:	6011      	str	r1, [r2, #0]
 8004266:	d1e0      	bne.n	800422a <_free_r+0x22>
 8004268:	6818      	ldr	r0, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4401      	add	r1, r0
 800426e:	6011      	str	r1, [r2, #0]
 8004270:	6053      	str	r3, [r2, #4]
 8004272:	e7da      	b.n	800422a <_free_r+0x22>
 8004274:	d902      	bls.n	800427c <_free_r+0x74>
 8004276:	230c      	movs	r3, #12
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	e7d6      	b.n	800422a <_free_r+0x22>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	1821      	adds	r1, r4, r0
 8004280:	428b      	cmp	r3, r1
 8004282:	bf01      	itttt	eq
 8004284:	6819      	ldreq	r1, [r3, #0]
 8004286:	685b      	ldreq	r3, [r3, #4]
 8004288:	1809      	addeq	r1, r1, r0
 800428a:	6021      	streq	r1, [r4, #0]
 800428c:	6063      	str	r3, [r4, #4]
 800428e:	6054      	str	r4, [r2, #4]
 8004290:	e7cb      	b.n	800422a <_free_r+0x22>
 8004292:	bd38      	pop	{r3, r4, r5, pc}
 8004294:	2000018c 	.word	0x2000018c

08004298 <sbrk_aligned>:
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	4e0e      	ldr	r6, [pc, #56]	; (80042d4 <sbrk_aligned+0x3c>)
 800429c:	460c      	mov	r4, r1
 800429e:	6831      	ldr	r1, [r6, #0]
 80042a0:	4605      	mov	r5, r0
 80042a2:	b911      	cbnz	r1, 80042aa <sbrk_aligned+0x12>
 80042a4:	f000 f8bc 	bl	8004420 <_sbrk_r>
 80042a8:	6030      	str	r0, [r6, #0]
 80042aa:	4621      	mov	r1, r4
 80042ac:	4628      	mov	r0, r5
 80042ae:	f000 f8b7 	bl	8004420 <_sbrk_r>
 80042b2:	1c43      	adds	r3, r0, #1
 80042b4:	d00a      	beq.n	80042cc <sbrk_aligned+0x34>
 80042b6:	1cc4      	adds	r4, r0, #3
 80042b8:	f024 0403 	bic.w	r4, r4, #3
 80042bc:	42a0      	cmp	r0, r4
 80042be:	d007      	beq.n	80042d0 <sbrk_aligned+0x38>
 80042c0:	1a21      	subs	r1, r4, r0
 80042c2:	4628      	mov	r0, r5
 80042c4:	f000 f8ac 	bl	8004420 <_sbrk_r>
 80042c8:	3001      	adds	r0, #1
 80042ca:	d101      	bne.n	80042d0 <sbrk_aligned+0x38>
 80042cc:	f04f 34ff 	mov.w	r4, #4294967295
 80042d0:	4620      	mov	r0, r4
 80042d2:	bd70      	pop	{r4, r5, r6, pc}
 80042d4:	20000190 	.word	0x20000190

080042d8 <_malloc_r>:
 80042d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	1ccd      	adds	r5, r1, #3
 80042de:	f025 0503 	bic.w	r5, r5, #3
 80042e2:	3508      	adds	r5, #8
 80042e4:	2d0c      	cmp	r5, #12
 80042e6:	bf38      	it	cc
 80042e8:	250c      	movcc	r5, #12
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	4607      	mov	r7, r0
 80042ee:	db01      	blt.n	80042f4 <_malloc_r+0x1c>
 80042f0:	42a9      	cmp	r1, r5
 80042f2:	d905      	bls.n	8004300 <_malloc_r+0x28>
 80042f4:	230c      	movs	r3, #12
 80042f6:	2600      	movs	r6, #0
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4630      	mov	r0, r6
 80042fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004300:	4e2e      	ldr	r6, [pc, #184]	; (80043bc <_malloc_r+0xe4>)
 8004302:	f000 f89d 	bl	8004440 <__malloc_lock>
 8004306:	6833      	ldr	r3, [r6, #0]
 8004308:	461c      	mov	r4, r3
 800430a:	bb34      	cbnz	r4, 800435a <_malloc_r+0x82>
 800430c:	4629      	mov	r1, r5
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff ffc2 	bl	8004298 <sbrk_aligned>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	4604      	mov	r4, r0
 8004318:	d14d      	bne.n	80043b6 <_malloc_r+0xde>
 800431a:	6834      	ldr	r4, [r6, #0]
 800431c:	4626      	mov	r6, r4
 800431e:	2e00      	cmp	r6, #0
 8004320:	d140      	bne.n	80043a4 <_malloc_r+0xcc>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	4631      	mov	r1, r6
 8004326:	4638      	mov	r0, r7
 8004328:	eb04 0803 	add.w	r8, r4, r3
 800432c:	f000 f878 	bl	8004420 <_sbrk_r>
 8004330:	4580      	cmp	r8, r0
 8004332:	d13a      	bne.n	80043aa <_malloc_r+0xd2>
 8004334:	6821      	ldr	r1, [r4, #0]
 8004336:	3503      	adds	r5, #3
 8004338:	1a6d      	subs	r5, r5, r1
 800433a:	f025 0503 	bic.w	r5, r5, #3
 800433e:	3508      	adds	r5, #8
 8004340:	2d0c      	cmp	r5, #12
 8004342:	bf38      	it	cc
 8004344:	250c      	movcc	r5, #12
 8004346:	4638      	mov	r0, r7
 8004348:	4629      	mov	r1, r5
 800434a:	f7ff ffa5 	bl	8004298 <sbrk_aligned>
 800434e:	3001      	adds	r0, #1
 8004350:	d02b      	beq.n	80043aa <_malloc_r+0xd2>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	442b      	add	r3, r5
 8004356:	6023      	str	r3, [r4, #0]
 8004358:	e00e      	b.n	8004378 <_malloc_r+0xa0>
 800435a:	6822      	ldr	r2, [r4, #0]
 800435c:	1b52      	subs	r2, r2, r5
 800435e:	d41e      	bmi.n	800439e <_malloc_r+0xc6>
 8004360:	2a0b      	cmp	r2, #11
 8004362:	d916      	bls.n	8004392 <_malloc_r+0xba>
 8004364:	1961      	adds	r1, r4, r5
 8004366:	42a3      	cmp	r3, r4
 8004368:	6025      	str	r5, [r4, #0]
 800436a:	bf18      	it	ne
 800436c:	6059      	strne	r1, [r3, #4]
 800436e:	6863      	ldr	r3, [r4, #4]
 8004370:	bf08      	it	eq
 8004372:	6031      	streq	r1, [r6, #0]
 8004374:	5162      	str	r2, [r4, r5]
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	4638      	mov	r0, r7
 800437a:	f104 060b 	add.w	r6, r4, #11
 800437e:	f000 f865 	bl	800444c <__malloc_unlock>
 8004382:	f026 0607 	bic.w	r6, r6, #7
 8004386:	1d23      	adds	r3, r4, #4
 8004388:	1af2      	subs	r2, r6, r3
 800438a:	d0b6      	beq.n	80042fa <_malloc_r+0x22>
 800438c:	1b9b      	subs	r3, r3, r6
 800438e:	50a3      	str	r3, [r4, r2]
 8004390:	e7b3      	b.n	80042fa <_malloc_r+0x22>
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	42a3      	cmp	r3, r4
 8004396:	bf0c      	ite	eq
 8004398:	6032      	streq	r2, [r6, #0]
 800439a:	605a      	strne	r2, [r3, #4]
 800439c:	e7ec      	b.n	8004378 <_malloc_r+0xa0>
 800439e:	4623      	mov	r3, r4
 80043a0:	6864      	ldr	r4, [r4, #4]
 80043a2:	e7b2      	b.n	800430a <_malloc_r+0x32>
 80043a4:	4634      	mov	r4, r6
 80043a6:	6876      	ldr	r6, [r6, #4]
 80043a8:	e7b9      	b.n	800431e <_malloc_r+0x46>
 80043aa:	230c      	movs	r3, #12
 80043ac:	4638      	mov	r0, r7
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	f000 f84c 	bl	800444c <__malloc_unlock>
 80043b4:	e7a1      	b.n	80042fa <_malloc_r+0x22>
 80043b6:	6025      	str	r5, [r4, #0]
 80043b8:	e7de      	b.n	8004378 <_malloc_r+0xa0>
 80043ba:	bf00      	nop
 80043bc:	2000018c 	.word	0x2000018c

080043c0 <_realloc_r>:
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	4680      	mov	r8, r0
 80043c6:	4614      	mov	r4, r2
 80043c8:	460e      	mov	r6, r1
 80043ca:	b921      	cbnz	r1, 80043d6 <_realloc_r+0x16>
 80043cc:	4611      	mov	r1, r2
 80043ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043d2:	f7ff bf81 	b.w	80042d8 <_malloc_r>
 80043d6:	b92a      	cbnz	r2, 80043e4 <_realloc_r+0x24>
 80043d8:	f7ff ff16 	bl	8004208 <_free_r>
 80043dc:	4625      	mov	r5, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e4:	f000 f838 	bl	8004458 <_malloc_usable_size_r>
 80043e8:	4284      	cmp	r4, r0
 80043ea:	4607      	mov	r7, r0
 80043ec:	d802      	bhi.n	80043f4 <_realloc_r+0x34>
 80043ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80043f2:	d812      	bhi.n	800441a <_realloc_r+0x5a>
 80043f4:	4621      	mov	r1, r4
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7ff ff6e 	bl	80042d8 <_malloc_r>
 80043fc:	4605      	mov	r5, r0
 80043fe:	2800      	cmp	r0, #0
 8004400:	d0ed      	beq.n	80043de <_realloc_r+0x1e>
 8004402:	42bc      	cmp	r4, r7
 8004404:	4622      	mov	r2, r4
 8004406:	4631      	mov	r1, r6
 8004408:	bf28      	it	cs
 800440a:	463a      	movcs	r2, r7
 800440c:	f7ff fed4 	bl	80041b8 <memcpy>
 8004410:	4631      	mov	r1, r6
 8004412:	4640      	mov	r0, r8
 8004414:	f7ff fef8 	bl	8004208 <_free_r>
 8004418:	e7e1      	b.n	80043de <_realloc_r+0x1e>
 800441a:	4635      	mov	r5, r6
 800441c:	e7df      	b.n	80043de <_realloc_r+0x1e>
	...

08004420 <_sbrk_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	2300      	movs	r3, #0
 8004424:	4d05      	ldr	r5, [pc, #20]	; (800443c <_sbrk_r+0x1c>)
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	f7fd f9d2 	bl	80017d4 <_sbrk>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_sbrk_r+0x1a>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_sbrk_r+0x1a>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	20000194 	.word	0x20000194

08004440 <__malloc_lock>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__malloc_lock+0x8>)
 8004442:	f000 b811 	b.w	8004468 <__retarget_lock_acquire_recursive>
 8004446:	bf00      	nop
 8004448:	20000198 	.word	0x20000198

0800444c <__malloc_unlock>:
 800444c:	4801      	ldr	r0, [pc, #4]	; (8004454 <__malloc_unlock+0x8>)
 800444e:	f000 b80c 	b.w	800446a <__retarget_lock_release_recursive>
 8004452:	bf00      	nop
 8004454:	20000198 	.word	0x20000198

08004458 <_malloc_usable_size_r>:
 8004458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800445c:	1f18      	subs	r0, r3, #4
 800445e:	2b00      	cmp	r3, #0
 8004460:	bfbc      	itt	lt
 8004462:	580b      	ldrlt	r3, [r1, r0]
 8004464:	18c0      	addlt	r0, r0, r3
 8004466:	4770      	bx	lr

08004468 <__retarget_lock_acquire_recursive>:
 8004468:	4770      	bx	lr

0800446a <__retarget_lock_release_recursive>:
 800446a:	4770      	bx	lr

0800446c <sqrt>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	4606      	mov	r6, r0
 8004470:	460f      	mov	r7, r1
 8004472:	f000 f81f 	bl	80044b4 <__ieee754_sqrt>
 8004476:	4632      	mov	r2, r6
 8004478:	4604      	mov	r4, r0
 800447a:	460d      	mov	r5, r1
 800447c:	463b      	mov	r3, r7
 800447e:	4630      	mov	r0, r6
 8004480:	4639      	mov	r1, r7
 8004482:	f7fc fabb 	bl	80009fc <__aeabi_dcmpun>
 8004486:	b990      	cbnz	r0, 80044ae <sqrt+0x42>
 8004488:	2200      	movs	r2, #0
 800448a:	2300      	movs	r3, #0
 800448c:	4630      	mov	r0, r6
 800448e:	4639      	mov	r1, r7
 8004490:	f7fc fa8c 	bl	80009ac <__aeabi_dcmplt>
 8004494:	b158      	cbz	r0, 80044ae <sqrt+0x42>
 8004496:	f7ff fb3d 	bl	8003b14 <__errno>
 800449a:	2321      	movs	r3, #33	; 0x21
 800449c:	2200      	movs	r2, #0
 800449e:	6003      	str	r3, [r0, #0]
 80044a0:	2300      	movs	r3, #0
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fc f939 	bl	800071c <__aeabi_ddiv>
 80044aa:	4604      	mov	r4, r0
 80044ac:	460d      	mov	r5, r1
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044b4 <__ieee754_sqrt>:
 80044b4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8004610 <__ieee754_sqrt+0x15c>
 80044b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044bc:	ea3c 0c01 	bics.w	ip, ip, r1
 80044c0:	4606      	mov	r6, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	460c      	mov	r4, r1
 80044c6:	460a      	mov	r2, r1
 80044c8:	4607      	mov	r7, r0
 80044ca:	4603      	mov	r3, r0
 80044cc:	d10f      	bne.n	80044ee <__ieee754_sqrt+0x3a>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	f7fb fff9 	bl	80004c8 <__aeabi_dmul>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4630      	mov	r0, r6
 80044dc:	4629      	mov	r1, r5
 80044de:	f7fb fe3d 	bl	800015c <__adddf3>
 80044e2:	4606      	mov	r6, r0
 80044e4:	460d      	mov	r5, r1
 80044e6:	4630      	mov	r0, r6
 80044e8:	4629      	mov	r1, r5
 80044ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ee:	2900      	cmp	r1, #0
 80044f0:	dc0e      	bgt.n	8004510 <__ieee754_sqrt+0x5c>
 80044f2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80044f6:	ea5c 0707 	orrs.w	r7, ip, r7
 80044fa:	d0f4      	beq.n	80044e6 <__ieee754_sqrt+0x32>
 80044fc:	b141      	cbz	r1, 8004510 <__ieee754_sqrt+0x5c>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	f7fb fe29 	bl	8000158 <__aeabi_dsub>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	f7fc f907 	bl	800071c <__aeabi_ddiv>
 800450e:	e7e8      	b.n	80044e2 <__ieee754_sqrt+0x2e>
 8004510:	1521      	asrs	r1, r4, #20
 8004512:	d075      	beq.n	8004600 <__ieee754_sqrt+0x14c>
 8004514:	07cc      	lsls	r4, r1, #31
 8004516:	f04f 0400 	mov.w	r4, #0
 800451a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800451e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8004522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004526:	bf5e      	ittt	pl
 8004528:	0fd9      	lsrpl	r1, r3, #31
 800452a:	005b      	lslpl	r3, r3, #1
 800452c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8004530:	0fd9      	lsrs	r1, r3, #31
 8004532:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004536:	2516      	movs	r5, #22
 8004538:	4620      	mov	r0, r4
 800453a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800453e:	107f      	asrs	r7, r7, #1
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	1846      	adds	r6, r0, r1
 8004544:	4296      	cmp	r6, r2
 8004546:	bfde      	ittt	le
 8004548:	1b92      	suble	r2, r2, r6
 800454a:	1870      	addle	r0, r6, r1
 800454c:	1864      	addle	r4, r4, r1
 800454e:	0052      	lsls	r2, r2, #1
 8004550:	3d01      	subs	r5, #1
 8004552:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8004556:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800455a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800455e:	d1f0      	bne.n	8004542 <__ieee754_sqrt+0x8e>
 8004560:	4629      	mov	r1, r5
 8004562:	f04f 0e20 	mov.w	lr, #32
 8004566:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800456a:	4282      	cmp	r2, r0
 800456c:	eb06 0c05 	add.w	ip, r6, r5
 8004570:	dc02      	bgt.n	8004578 <__ieee754_sqrt+0xc4>
 8004572:	d113      	bne.n	800459c <__ieee754_sqrt+0xe8>
 8004574:	459c      	cmp	ip, r3
 8004576:	d811      	bhi.n	800459c <__ieee754_sqrt+0xe8>
 8004578:	f1bc 0f00 	cmp.w	ip, #0
 800457c:	eb0c 0506 	add.w	r5, ip, r6
 8004580:	da43      	bge.n	800460a <__ieee754_sqrt+0x156>
 8004582:	2d00      	cmp	r5, #0
 8004584:	db41      	blt.n	800460a <__ieee754_sqrt+0x156>
 8004586:	f100 0801 	add.w	r8, r0, #1
 800458a:	1a12      	subs	r2, r2, r0
 800458c:	4640      	mov	r0, r8
 800458e:	459c      	cmp	ip, r3
 8004590:	bf88      	it	hi
 8004592:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004596:	eba3 030c 	sub.w	r3, r3, ip
 800459a:	4431      	add	r1, r6
 800459c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80045a0:	f1be 0e01 	subs.w	lr, lr, #1
 80045a4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80045a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045ac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80045b0:	d1db      	bne.n	800456a <__ieee754_sqrt+0xb6>
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d006      	beq.n	80045c4 <__ieee754_sqrt+0x110>
 80045b6:	1c48      	adds	r0, r1, #1
 80045b8:	bf0b      	itete	eq
 80045ba:	4671      	moveq	r1, lr
 80045bc:	3101      	addne	r1, #1
 80045be:	3401      	addeq	r4, #1
 80045c0:	f021 0101 	bicne.w	r1, r1, #1
 80045c4:	1063      	asrs	r3, r4, #1
 80045c6:	0849      	lsrs	r1, r1, #1
 80045c8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80045cc:	07e2      	lsls	r2, r4, #31
 80045ce:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80045d2:	bf48      	it	mi
 80045d4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80045d8:	460e      	mov	r6, r1
 80045da:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80045de:	e782      	b.n	80044e6 <__ieee754_sqrt+0x32>
 80045e0:	0ada      	lsrs	r2, r3, #11
 80045e2:	3815      	subs	r0, #21
 80045e4:	055b      	lsls	r3, r3, #21
 80045e6:	2a00      	cmp	r2, #0
 80045e8:	d0fa      	beq.n	80045e0 <__ieee754_sqrt+0x12c>
 80045ea:	02d5      	lsls	r5, r2, #11
 80045ec:	d50a      	bpl.n	8004604 <__ieee754_sqrt+0x150>
 80045ee:	f1c1 0420 	rsb	r4, r1, #32
 80045f2:	fa23 f404 	lsr.w	r4, r3, r4
 80045f6:	1e4d      	subs	r5, r1, #1
 80045f8:	408b      	lsls	r3, r1
 80045fa:	4322      	orrs	r2, r4
 80045fc:	1b41      	subs	r1, r0, r5
 80045fe:	e789      	b.n	8004514 <__ieee754_sqrt+0x60>
 8004600:	4608      	mov	r0, r1
 8004602:	e7f0      	b.n	80045e6 <__ieee754_sqrt+0x132>
 8004604:	0052      	lsls	r2, r2, #1
 8004606:	3101      	adds	r1, #1
 8004608:	e7ef      	b.n	80045ea <__ieee754_sqrt+0x136>
 800460a:	4680      	mov	r8, r0
 800460c:	e7bd      	b.n	800458a <__ieee754_sqrt+0xd6>
 800460e:	bf00      	nop
 8004610:	7ff00000 	.word	0x7ff00000

08004614 <_init>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr

08004620 <_fini>:
 8004620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004622:	bf00      	nop
 8004624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004626:	bc08      	pop	{r3}
 8004628:	469e      	mov	lr, r3
 800462a:	4770      	bx	lr
